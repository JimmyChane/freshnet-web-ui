{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\development\\freshnet-v2\\vue\\src\\pages\\setting\\item\\ItemSetting.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\pages\\setting\\item\\ItemSetting.vue","mtime":1662732594220},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1662650934771}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBUb2dnbGVCdXR0b24gZnJvbSAiQC9jb21wb25lbnRzL2J1dHRvbi9Ub2dnbGVCdXR0b24udnVlIjsKCmV4cG9ydCBkZWZhdWx0IHsKICAgY29tcG9uZW50czogeyBUb2dnbGVCdXR0b24gfSwKICAgcHJvcHM6IHsKICAgICAgaXRlbTogeyB0eXBlOiBPYmplY3QsIGRlZmF1bHQ6ICgpID0+IG51bGwgfSwKICAgfSwKICAgY29tcHV0ZWQ6IHsKICAgICAgaXNMb2FkaW5nOiAoYykgPT4gYy5zZXR0aW5nU3RvcmUuZ2V0dGVycy5pc0xvYWRpbmcsCiAgIH0sCiAgIG1ldGhvZHM6IHsKICAgICAgdXBkYXRlKHZhbHVlKSB7CiAgICAgICAgIGxldCBrZXkgPSB0aGlzLml0ZW0/LmtleTsKICAgICAgICAgdGhpcy5zZXR0aW5nU3RvcmUuZGlzcGF0Y2goInVwZGF0ZUl0ZW0iLCB7IGtleToga2V5LCB2YWx1ZSB9KTsKICAgICAgfSwKICAgfSwKfTsK"},{"version":3,"sources":["ItemSetting.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ItemSetting.vue","sourceRoot":"src/pages/setting/item","sourcesContent":["<script>\r\n   import ToggleButton from \"@/components/button/ToggleButton.vue\";\r\n\r\n   export default {\r\n      components: { ToggleButton },\r\n      props: {\r\n         item: { type: Object, default: () => null },\r\n      },\r\n      computed: {\r\n         isLoading: (c) => c.settingStore.getters.isLoading,\r\n      },\r\n      methods: {\r\n         update(value) {\r\n            let key = this.item?.key;\r\n            this.settingStore.dispatch(\"updateItem\", { key: key, value });\r\n         },\r\n      },\r\n   };\r\n</script>\r\n\r\n<template>\r\n   <div class=\"ItemSetting\">\r\n      <span class=\"ItemSetting-title\">{{ item.title }}</span>\r\n\r\n      <ToggleButton\r\n         class=\"ItemSetting-value\"\r\n         :isLoading=\"isLoading\"\r\n         :isToggled=\"item.value\"\r\n         @click-toggle=\"(toggle) => update(toggle)\"\r\n      />\r\n   </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n   .ItemSetting {\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      gap: 2em;\r\n      justify-content: space-between;\r\n   }\r\n</style>\r\n"]}]}