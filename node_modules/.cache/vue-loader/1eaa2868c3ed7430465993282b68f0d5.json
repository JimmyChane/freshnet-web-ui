{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\development\\freshnet-v2\\vue\\src\\pages\\product\\BrowseWindowTitleBrandUpdate.vue?vue&type=style&index=0&id=60c033b6&lang=scss&scoped=true&","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\pages\\product\\BrowseWindowTitleBrandUpdate.vue","mtime":1662984377070},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\css-loader\\index.js","mtime":1662650920109},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1662650934772},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1662650932744},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1662650934771}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouQnJvd3NlV2luZG93VGl0bGVCcmFuZFVwZGF0ZS1ib2R5IHsKICAgd2lkdGg6IDI2cmVtOwogICBtYXgtd2lkdGg6IDEwMCU7CiAgIGRpc3BsYXk6IGZsZXg7CiAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgIGdhcDogMTBweDsKICAgLkJyb3dzZVdpbmRvd1RpdGxlQnJhbmRVcGRhdGUtaW5wdXQgewogICAgICBwYWRkaW5nLWxlZnQ6IDA7CiAgICAgIHBhZGRpbmctcmlnaHQ6IDA7CiAgIH0KfQo="},{"version":3,"sources":["BrowseWindowTitleBrandUpdate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BrowseWindowTitleBrandUpdate.vue","sourceRoot":"src/pages/product","sourcesContent":["<script>\r\n   import PopupWindowAction from \"@/components/window/PopupWindowAction.vue\";\r\n   import Selector3 from \"@/components/selector/Selector3.vue\";\r\n   import Input from \"@/components/Input.vue\";\r\n\r\n   export default {\r\n      components: { PopupWindowAction, Selector3, Input },\r\n      props: {\r\n         isShowing: { type: Boolean, default: false },\r\n         input: { type: Object, default: () => null },\r\n      },\r\n      data() {\r\n         return { data: null };\r\n      },\r\n      computed: {\r\n         product: (c) => (c.input ? c.input.product : \"\"),\r\n         title: (c) => (c.data ? c.data.title : \"\"),\r\n         brandId: (c) => (c.data ? c.data.brandId : \"\"),\r\n         brand: (c) =>\r\n            c.brandStore.getters.items.find((brand) => brand.getId() === c.brandId),\r\n         brandTitle: (c) => (c.brand ? c.brand.title : \"\"),\r\n         parsedTitleBrand: (c) => {\r\n            if (c.title && c.brandTitle) return `${c.brandTitle} ${c.title}`;\r\n            if (c.title) return c.title;\r\n            if (c.brandTitle) return c.brandTitle;\r\n            return \"\";\r\n         },\r\n\r\n         brandMenus: (c) => {\r\n            return [{ _id: \"\", title: \"None\" }, ...c.brandStore.getters.items].map(\r\n               (item) => {\r\n                  return {\r\n                     key: item._id,\r\n                     title: item.title,\r\n                     icon: item.icon ? item.icon.url() : \"\",\r\n                  };\r\n               }\r\n            );\r\n         },\r\n      },\r\n      watch: {\r\n         input() {\r\n            this.clear();\r\n            if (!this.input) {\r\n               this.data = null;\r\n               return;\r\n            }\r\n\r\n            this.data = {\r\n               title: this.input.title,\r\n               brandId: this.input.brandId,\r\n            };\r\n         },\r\n      },\r\n      methods: {\r\n         clear() {\r\n            this.data = { title: \"\", brandId: \"\" };\r\n         },\r\n         clickConfirm() {\r\n            let output = {\r\n               product: this.product,\r\n               title: this.title,\r\n               brandId: this.brandId,\r\n            };\r\n\r\n            if (!output.title) {\r\n               this.$root.feedback(\"You must specify title\");\r\n               return;\r\n            }\r\n\r\n            this.$emit(\"click-confirm\", output) && this.clear();\r\n         },\r\n      },\r\n      mounted() {\r\n         this.clear();\r\n      },\r\n   };\r\n</script>\r\n\r\n<template>\r\n   <PopupWindowAction\r\n      class=\"BrowseWindowTitleBrandUpdate\"\r\n      title=\"Update Title &amp; Brand\"\r\n      :isShowing=\"isShowing\"\r\n      @click-dismiss=\"$emit('click-dismiss') && clear()\"\r\n      @click-cancel=\"$emit('click-cancel') && clear()\"\r\n      @click-ok=\"clickConfirm()\"\r\n   >\r\n      <div class=\"BrowseWindowTitleBrandUpdate-body\">\r\n         <Input\r\n            class=\"BrowseWindowTitleBrandUpdate-input\"\r\n            :bindValue=\"title\"\r\n            :isRequired=\"true\"\r\n            @input=\"(comp) => (data.title = comp.value)\"\r\n         />\r\n\r\n         <Selector3\r\n            :menus=\"brandMenus\"\r\n            :selectedKey=\"brandId\"\r\n            @click-menu=\"\r\n               (menu) => {\r\n                  if (data) data.brandId = menu.key;\r\n               }\r\n            \"\r\n         />\r\n      </div>\r\n   </PopupWindowAction>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n   .BrowseWindowTitleBrandUpdate-body {\r\n      width: 26rem;\r\n      max-width: 100%;\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 10px;\r\n      .BrowseWindowTitleBrandUpdate-input {\r\n         padding-left: 0;\r\n         padding-right: 0;\r\n      }\r\n   }\r\n</style>\r\n"]}]}