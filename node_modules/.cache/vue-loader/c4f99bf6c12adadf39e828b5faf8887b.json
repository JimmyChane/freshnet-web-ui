{"remainingRequest":"C:\\dev\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\dev\\freshnet-v2\\vue\\src\\pages\\home\\PageHome.vue?vue&type=style&index=0&id=a2232984&lang=scss&scoped=true&","dependencies":[{"path":"C:\\dev\\freshnet-v2\\vue\\src\\pages\\home\\PageHome.vue","mtime":1665495772292},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\css-loader\\index.js","mtime":1662650920109},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1662650934772},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1662650932744},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1662650934771}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}