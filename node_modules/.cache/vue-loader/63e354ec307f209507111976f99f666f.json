{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\development\\freshnet-v2\\vue\\src\\pages\\service\\PanelService.vue?vue&type=template&id=57c98c16&scoped=true&","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\pages\\service\\PanelService.vue","mtime":1663518187757},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1662650934773},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1662650934771}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}