{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\development\\freshnet-v2\\vue\\src\\pages\\service\\panels\\PanelLeft.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\pages\\service\\panels\\PanelLeft.vue","mtime":1662732616163},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1662650934771}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}