{"remainingRequest":"C:\\dev\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\dev\\freshnet-v2\\vue\\src\\pages\\setting\\PageSetting.vue?vue&type=style&index=0&id=8cd8b8e4&lang=scss&scoped=true&","dependencies":[{"path":"C:\\dev\\freshnet-v2\\vue\\src\\pages\\setting\\PageSetting.vue","mtime":1664551315829},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\css-loader\\index.js","mtime":1662650920109},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1662650934772},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1662650932744},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1662650934771}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5QYWdlU2V0dGluZyB7CiAgIHdpZHRoOiAxMDAlOwogICBoZWlnaHQ6IDEwMCU7CiAgIG92ZXJmbG93LXk6IGF1dG87CiAgIGRpc3BsYXk6IGZsZXg7CiAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsKCiAgIC5QYWdlU2V0dGluZy1hY3Rpb25iYXIgewogICAgICB3aWR0aDogMTAwJTsKICAgfQoKICAgLlBhZ2VTZXR0aW5nLWJvZHkgewogICAgICB3aWR0aDogMTAwJTsKICAgICAgbWF4LXdpZHRoOiAyNXJlbTsKICAgICAgbWFyZ2luOiAwIGF1dG87CiAgICAgIHBhZGRpbmc6IDEuOHJlbTsKICAgICAgcGFkZGluZy1ib3R0b206IDhyZW07CiAgICAgIGdhcDogMnJlbTsKCiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0OwogICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7CiAgIH0KfQo="},{"version":3,"sources":["PageSetting.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"PageSetting.vue","sourceRoot":"src/pages/setting","sourcesContent":["<script>\r\n   import ActionBarManage from \"@/pages/manage/ActionBarManage.vue\";\r\n   import Empty from \"@/components/Empty.vue\";\r\n   import GroupSetting from \"./GroupSetting.vue\";\r\n   import SettingModule from \"@/../../express/data_structures/Setting.js\";\r\n\r\n   export default {\r\n      key: \"setting\",\r\n      title: \"Settings\",\r\n      icon: { light: \"setting-FFFFFF\", dark: \"setting-2A4858\" },\r\n      userPermissions: [\"admin\"],\r\n\r\n      components: { ActionBarManage, Empty, GroupSetting },\r\n      data() {\r\n         return {\r\n            scrollTop: 0,\r\n            groups: [\r\n               {\r\n                  title: \"Contacts\",\r\n                  actions: [\r\n                     {\r\n                        title: \"Add\",\r\n                        icon: this.host.res(\"icon/add-000000.svg\"),\r\n                        click: () => console.log(\"click add\"),\r\n                     },\r\n                  ],\r\n               },\r\n               {\r\n                  title: \"Location\",\r\n                  actions: [\r\n                     {\r\n                        title: \"Edit\",\r\n                        icon: this.host.res(\"icon/edit-000000.svg\"),\r\n                        click: () => console.log(\"click edit\"),\r\n                     },\r\n                  ],\r\n               },\r\n               {\r\n                  title: \"Product Page\",\r\n                  items: [\r\n                     {\r\n                        key: SettingModule.Key.PublicShowPrice,\r\n                        title: \"Show Price in View Mode\",\r\n                        type: \"boolean\",\r\n                     },\r\n                  ],\r\n               },\r\n            ],\r\n         };\r\n      },\r\n      computed: {\r\n         isLoading: (c) => c.settingStore.getters.isLoading,\r\n         settings: (c) => c.settingStore.getters.items,\r\n      },\r\n      methods: {\r\n         refresh() {\r\n            this.settingStore.dispatch(\"refresh\");\r\n         },\r\n      },\r\n      mounted() {\r\n         this.refresh();\r\n      },\r\n   };\r\n</script>\r\n\r\n<template>\r\n   <div class=\"PageSetting\" @scroll=\"(event) => (scrollTop = event.target.scrollTop)\">\r\n      <ActionBarManage\r\n         :class=\"['PageSetting-actionbar']\"\r\n         :hasShadow=\"scrollTop > 0\"\r\n         :title=\"$options.title\"\r\n         :rightMenus=\"[\r\n            {\r\n               key: 'refresh',\r\n               title: 'Refresh',\r\n               icon: host.res('icon/refresh-2A4858.svg'),\r\n               click: () => refresh(),\r\n            },\r\n         ]\"\r\n         @click-drawer-expand=\"$emit('click-drawer-expand')\"\r\n      />\r\n\r\n      <div class=\"PageSetting-body\" v-if=\"settings.length\">\r\n         <GroupSetting v-for=\"group of groups\" :key=\"group.title\" :group=\"group\" />\r\n      </div>\r\n\r\n      <Empty v-if=\"!settings.length && !isLoading\" />\r\n   </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n   .PageSetting {\r\n      width: 100%;\r\n      height: 100%;\r\n      overflow-y: auto;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: flex-start;\r\n\r\n      .PageSetting-actionbar {\r\n         width: 100%;\r\n      }\r\n\r\n      .PageSetting-body {\r\n         width: 100%;\r\n         max-width: 25rem;\r\n         margin: 0 auto;\r\n         padding: 1.8rem;\r\n         padding-bottom: 8rem;\r\n         gap: 2rem;\r\n\r\n         display: flex;\r\n         flex-direction: column;\r\n         align-items: flex-start;\r\n         justify-content: flex-start;\r\n      }\r\n   }\r\n</style>\r\n"]}]}