{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\development\\freshnet-v2\\vue\\src\\pages\\setting\\ItemSetting.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\pages\\setting\\ItemSetting.vue","mtime":1663518638165},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1662650934771}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBUb2dnbGVCdXR0b24gZnJvbSAiQC9jb21wb25lbnRzL2J1dHRvbi9Ub2dnbGVCdXR0b24udnVlIjsKCmV4cG9ydCBkZWZhdWx0IHsKICAgY29tcG9uZW50czogeyBUb2dnbGVCdXR0b24gfSwKICAgcHJvcHM6IHsgc2V0dGluZ0tleTogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICIiIH0gfSwKICAgY29tcHV0ZWQ6IHsKICAgICAgaXNMb2FkaW5nOiAoYykgPT4gYy5zZXR0aW5nU3RvcmUuZ2V0dGVycy5pc0xvYWRpbmcsCiAgICAgIHNldHRpbmcoKSB7CiAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdTdG9yZS5nZXR0ZXJzLml0ZW1zLmZpbmQoKHNldHRpbmcpID0+IHsKICAgICAgICAgICAgcmV0dXJuIHNldHRpbmcua2V5ID09PSB0aGlzLnNldHRpbmdLZXk7CiAgICAgICAgIH0pOwogICAgICB9LAogICB9LAogICBtZXRob2RzOiB7CiAgICAgIHVwZGF0ZSh2YWx1ZSkgewogICAgICAgICBsZXQga2V5ID0gdGhpcy5zZXR0aW5nPy5rZXk7CiAgICAgICAgIHRoaXMuc2V0dGluZ1N0b3JlLmRpc3BhdGNoKCJ1cGRhdGVJdGVtIiwgeyBrZXk6IGtleSwgdmFsdWUgfSk7CiAgICAgIH0sCiAgIH0sCn07Cg=="},{"version":3,"sources":["ItemSetting.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ItemSetting.vue","sourceRoot":"src/pages/setting","sourcesContent":["<script>\r\n   import ToggleButton from \"@/components/button/ToggleButton.vue\";\r\n\r\n   export default {\r\n      components: { ToggleButton },\r\n      props: { settingKey: { type: String, default: \"\" } },\r\n      computed: {\r\n         isLoading: (c) => c.settingStore.getters.isLoading,\r\n         setting() {\r\n            return this.settingStore.getters.items.find((setting) => {\r\n               return setting.key === this.settingKey;\r\n            });\r\n         },\r\n      },\r\n      methods: {\r\n         update(value) {\r\n            let key = this.setting?.key;\r\n            this.settingStore.dispatch(\"updateItem\", { key: key, value });\r\n         },\r\n      },\r\n   };\r\n</script>\r\n\r\n<template>\r\n   <div class=\"ItemSetting\" @click=\"$refs.toggleButton.$el.click()\">\r\n      <span class=\"ItemSetting-title\">{{ setting.title }}</span>\r\n      <ToggleButton\r\n         class=\"ItemSetting-value\"\r\n         ref=\"toggleButton\"\r\n         :isLoading=\"isLoading\"\r\n         :isToggled=\"setting.value\"\r\n         @click-toggle=\"(toggle) => update(toggle)\"\r\n      />\r\n   </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n   .ItemSetting {\r\n      width: 100%;\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      gap: 2rem;\r\n      padding: 1rem 0.8rem;\r\n\r\n      background-color: hsla(0, 0%, 100%, 0.6);\r\n      transition: var(--animation-duration);\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n         background-color: white;\r\n      }\r\n   }\r\n</style>\r\n"]}]}