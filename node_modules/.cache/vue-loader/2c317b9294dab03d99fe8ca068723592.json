{"remainingRequest":"C:\\dev\\freshnet-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\dev\\freshnet-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\dev\\freshnet-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\dev\\freshnet-vue\\src\\pages\\product\\LayoutProductViewer\\LayoutProductViewer.vue?vue&type=template&id=54e1942a&scoped=true&","dependencies":[{"path":"C:\\dev\\freshnet-vue\\src\\pages\\product\\LayoutProductViewer\\LayoutProductViewer.vue","mtime":1668340811473},{"path":"C:\\dev\\freshnet-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\dev\\freshnet-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1662650934773},{"path":"C:\\dev\\freshnet-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\dev\\freshnet-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1662650934771}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}