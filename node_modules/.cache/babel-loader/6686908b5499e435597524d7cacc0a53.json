{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\development\\freshnet-v2\\vue\\src\\stores\\store.login.js","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\stores\\store.login.js","mtime":1663504444445},{"path":"C:\\development\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/development/freshnet-v2/vue/src/stores/store.login.js"],"names":["Vuex","ApiHost","ItemUser","Processor","storageTokenKey","getToken","window","localStorage","getItem","setToken","token","setItem","deleteToken","removeItem","onNewCredentail","context","arg","user","newUser","commit","init","Stores","store","loginStore","Store","state","loader","mutations","getters","isLoading","actions","refresh","acquire","dispatch","getUser","request","POST","url","body","send","api","content","getContent","message","changePassword","getUsername","Error","username","passwordVerify","passwordNew","login","password","error","getError","logout"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AAEA,IAAMC,eAAe,GAAG,WAAxB;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAMC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BJ,eAA5B,CAAN;AAAA,CAAjB;;AACA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAWJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4BP,eAA5B,EAA6CM,KAA7C,CAAX;AAAA,CAAjB;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAMN,MAAM,CAACC,YAAP,CAAoBM,UAApB,CAA+BT,eAA/B,CAAN;AAAA,CAApB;;AACA,IAAMU,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD;AAAA,MAAUC,GAAV,uEAAgB;AAAEN,IAAAA,KAAK,EAALA,KAAF;AAASO,IAAAA,IAAI,EAAJA;AAAT,GAAhB;AAAA,qBAAoC;AACzD,QAAQP,KAAR,GAAwBM,GAAxB,CAAQN,KAAR;AAAA,QAAeO,IAAf,GAAwBD,GAAxB,CAAeC,IAAf;AACA,QAAMC,OAAO,GAAG,IAAIhB,QAAJ,CAAae,IAAb,CAAhB;AACAR,IAAAA,QAAQ,CAACC,KAAD,CAAR;AACAK,IAAAA,OAAO,CAACI,MAAR,CAAe,MAAf,EAAuBD,OAAvB;AACA,WAAOA,OAAP;AACF,GANuB;AAAA,CAAxB;;AAQA,eAAe;AACZE,EAAAA,IADY,gBACPC,MADO,EACC;AACV,QAAQC,KAAR,GAAkBD,MAAlB,CAAQC,KAAR;AAEA,QAAMC,UAAU,GAAG,IAAIvB,IAAI,CAACwB,KAAT,CAAe;AAC/BC,MAAAA,KAAK,EAAE;AAAER,QAAAA,IAAI,EAAE,IAAR;AAAcS,QAAAA,MAAM,EAAE,IAAIvB,SAAJ;AAAtB,OADwB;AAE/BwB,MAAAA,SAAS,EAAE;AAAEV,QAAAA,IAAI;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAAE,UAACQ,KAAD,EAAQR,IAAR;AAAA,iBAAkBQ,KAAK,CAACR,IAAN,GAAaA,IAA/B;AAAA,SAAF;AAAN,OAFoB;AAG/BW,MAAAA,OAAO,EAAE;AACNC,QAAAA,SAAS,EAAE,mBAACJ,KAAD;AAAA,iBAAWA,KAAK,CAACC,MAAN,CAAaG,SAAb,EAAX;AAAA,SADL;AAENZ,QAAAA,IAAI,EAAE,cAACQ,KAAD;AAAA,iBAAWA,KAAK,CAACR,IAAjB;AAAA,SAFA;AAGNP,QAAAA,KAAK,EAAE;AAAA,iBAAML,QAAQ,EAAd;AAAA;AAHD,OAHsB;AAQ/ByB,MAAAA,OAAO,EAAE;AACAC,QAAAA,OADA,mBACQhB,OADR,EACiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDACbA,OAAO,CAACU,KAAR,CAAcC,MAAd,CAAqBM,OAArB,CAA6B,SAA7B,uEAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCACtCjB,OAAO,CAACkB,QAAR,CAAiB,SAAjB,CADsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAxC,GADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAItB,SALK;AAOAC,QAAAA,OAPA,mBAOQnB,OAPR,EAOiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDACbA,OAAO,CAACU,KAAR,CAAcC,MAAd,CAAqBM,OAArB,CAA6B,SAA7B,uEAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAErCtB,8BAAAA,MAFqC,GAE7BL,QAAQ,EAFqB;;AAAA,kCAGpCK,MAHoC;AAAA;AAAA;AAAA;;AAItCK,8BAAAA,OAAO,CAACI,MAAR,CAAe,MAAf,EAAuB,IAAvB;AACAP,8BAAAA,WAAW;AAL2B,gEAM/B,IAN+B;;AAAA;AAAA;AAAA,qCASzBX,OAAO,CAACkC,OAAR,GACZC,IADY,GAEZC,GAFY,CAER,sBAFQ,EAGZC,IAHY,CAGP;AAAE5B,gCAAAA,KAAK,EAALA;AAAF,+BAHO,EAIZ6B,IAJY,EATyB;;AAAA;AASrCC,8BAAAA,GATqC;AAerCC,8BAAAA,OAfqC,GAe3BD,GAAG,CAACE,UAAJ,EAf2B;AAgBrCzB,8BAAAA,MAhBqC,GAgB9B,IAAIf,QAAJ,CAAauC,OAAO,CAACxB,IAArB,CAhB8B;AAkBzCR,8BAAAA,QAAQ,CAACC,MAAD,CAAR;AACAK,8BAAAA,OAAO,CAACI,MAAR,CAAe,MAAf,EAAuBF,MAAvB;AAnByC,gEAqBlCA,MArBkC;;AAAA;AAAA;AAAA;AAuBzCF,8BAAAA,OAAO,CAACI,MAAR,CAAe,MAAf,EAAuB,IAAvB;AACAP,8BAAAA,WAAW;;AAxB8B,oCAyBrC,aAAM+B,OAAN,KAAkB,eAzBmB;AAAA;AAAA;AAAA;;AAAA,gEAyBK,IAzBL;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAxC,GADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BtB,SArCK;AAsCAC,QAAAA,cAtCA,0BAsCe7B,OAtCf,EAsCkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAVC,oBAAAA,GAAU,0EAAJ,EAAI;AAAA,sDAC9BD,OAAO,CAACU,KAAR,CAAcC,MAAd,CAAqBM,OAArB,CAA6B,gBAA7B,uEAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7Cf,8BAAAA,IAD6C,GACpCF,OAAO,CAACa,OAD4B,CAC7CX,IAD6C;;AAAA,oCAE/C,CAACA,IAAD,IAAS,CAACA,IAAI,CAAC4B,WAAL,EAFqC;AAAA;AAAA;AAAA;;AAAA,oCAG1C,IAAIC,KAAJ,CAAU,wCAAV,CAH0C;;AAAA;AAK/CC,8BAAAA,QAL+C,GAKpC9B,IAAI,CAAC4B,WAAL,EALoC;AAM7CG,8BAAAA,cAN6C,GAMbhC,GANa,CAM7CgC,cAN6C,EAM7BC,WAN6B,GAMbjC,GANa,CAM7BiC,WAN6B;AAAA;AAAA,qCAOnChD,OAAO,CAACkC,OAAR,GACZC,IADY,GAEZC,GAFY,wBAEQU,QAFR,sBAGZT,IAHY,CAGP;AAAEU,gCAAAA,cAAc,EAAdA,cAAF;AAAkBC,gCAAAA,WAAW,EAAXA;AAAlB,+BAHO,EAIZV,IAJY,EAPmC;;AAAA;AAO/CC,8BAAAA,GAP+C;AAY/CC,8BAAAA,OAZ+C,GAYrCD,GAAG,CAACE,UAAJ,EAZqC;AAa7ChC,8BAAAA,KAb6C,GAanC+B,OAbmC,CAa7C/B,KAb6C;AAcnDO,8BAAAA,IAAI,GAAGwB,OAAP;AACAxB,8BAAAA,IAAI,GAAGH,eAAe,CAACC,OAAD,EAAU;AAAEL,gCAAAA,KAAK,EAALA,KAAF;AAASO,gCAAAA,IAAI,EAAJA;AAAT,+BAAV,CAAtB;AACAK,8BAAAA,KAAK,CAACW,QAAN,CAAe,eAAf;AAhBmD,gEAkB5ChB,IAlB4C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA/C,GAD8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBvC,SA3DK;AA6DAiC,QAAAA,KA7DA,iBA6DMnC,OA7DN,EA6D6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA9BC,oBAAAA,GAA8B,6EAAxB;AAAE+B,sBAAAA,QAAQ,EAARA,QAAF;AAAYI,sBAAAA,QAAQ,EAARA;AAAZ,qBAAwB;AAAA,sDACzCpC,OAAO,CAACU,KAAR,CAAcC,MAAd,CAAqBM,OAArB,CAA6B,OAA7B,uEAAsC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEvCpB,8BAAAA,WAAW;AAF4B;AAAA,qCAGvBX,OAAO,CAACkC,OAAR,GACZC,IADY,GAEZC,GAFY,CAER,gBAFQ,EAGZC,IAHY,CAGP;AAAES,gCAAAA,QAAQ,EAAE/B,GAAG,CAAC+B,QAAhB;AAA0BI,gCAAAA,QAAQ,EAAEnC,GAAG,CAACmC;AAAxC,+BAHO,EAIZZ,IAJY,EAHuB;;AAAA;AAGnCC,8BAAAA,GAHmC;AAQnCY,8BAAAA,KARmC,GAQ3BZ,GAAG,CAACa,QAAJ,EAR2B;AASnCZ,8BAAAA,OATmC,GASzBD,GAAG,CAACE,UAAJ,EATyB;;AAAA,oCAUnCU,KAAK,IAAI,CAACX,OAVyB;AAAA;AAAA;AAAA;;AAAA,oCAUV,IAAIK,KAAJ,EAVU;;AAAA;AAW/BpC,8BAAAA,OAX+B,GAWf+B,OAXe,CAW/B/B,KAX+B,EAWxBO,MAXwB,GAWfwB,OAXe,CAWxBxB,IAXwB;AAYjCC,8BAAAA,OAZiC,GAYvBJ,eAAe,CAACC,OAAD,EAAU;AAAEL,gCAAAA,KAAK,EAALA,OAAF;AAASO,gCAAAA,IAAI,EAAJA;AAAT,+BAAV,CAZQ;AAavCK,8BAAAA,KAAK,CAACW,QAAN,CAAe,eAAf;AAbuC,gEAchCf,OAdgC;;AAAA;AAAA;AAAA;AAgBvCN,8BAAAA,WAAW;AACXG,8BAAAA,OAAO,CAACI,MAAR,CAAe,MAAf,EAAuB,IAAvB;AAjBuC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAtC,GADyC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBlD,SAnFK;AAoFAmC,QAAAA,MApFA,kBAoFOvC,OApFP,EAoFgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDACZA,OAAO,CAACU,KAAR,CAAcC,MAAd,CAAqBM,OAArB,CAA6B,QAA7B,uEAAuC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAExCpB,8BAAAA,WAAW;AACXU,8BAAAA,KAAK,CAACW,QAAN,CAAe,eAAf;AACIhB,8BAAAA,MAJoC,GAI7BF,OAAO,CAACa,OAAR,CAAgBX,IAJa;AAKxCF,8BAAAA,OAAO,CAACI,MAAR,CAAe,MAAf,EAAuB,IAAvB;AALwC,gEAMjCF,MANiC;;AAAA;AAAA;AAAA;AAQxCL,8BAAAA,WAAW;AACXG,8BAAAA,OAAO,CAACI,MAAR,CAAe,MAAf,EAAuB,IAAvB;AATwC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAvC,GADY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcrB;AAlGK;AARsB,KAAf,CAAnB;AA8GA,WAAOI,UAAP;AACF;AAnHW,CAAf","sourcesContent":["import Vuex from \"vuex\";\r\nimport ApiHost from \"@/host/ApiHost.js\";\r\nimport ItemUser from \"../items/User.js\";\r\nimport Processor from \"./components/Processor.js\";\r\n\r\nconst storageTokenKey = \"userToken\";\r\nconst getToken = () => window.localStorage.getItem(storageTokenKey);\r\nconst setToken = (token) => window.localStorage.setItem(storageTokenKey, token);\r\nconst deleteToken = () => window.localStorage.removeItem(storageTokenKey);\r\nconst onNewCredentail = (context, arg = { token, user }) => {\r\n   const { token, user } = arg;\r\n   const newUser = new ItemUser(user);\r\n   setToken(token);\r\n   context.commit(\"user\", newUser);\r\n   return newUser;\r\n};\r\n\r\nexport default {\r\n   init(Stores) {\r\n      const { store } = Stores;\r\n\r\n      const loginStore = new Vuex.Store({\r\n         state: { user: null, loader: new Processor() },\r\n         mutations: { user: (state, user) => (state.user = user) },\r\n         getters: {\r\n            isLoading: (state) => state.loader.isLoading(),\r\n            user: (state) => state.user,\r\n            token: () => getToken(),\r\n         },\r\n         actions: {\r\n            async refresh(context) {\r\n               return context.state.loader.acquire(\"refresh\", async () => {\r\n                  await context.dispatch(\"getUser\");\r\n               });\r\n            },\r\n\r\n            async getUser(context) {\r\n               return context.state.loader.acquire(\"getUser\", async () => {\r\n                  try {\r\n                     let token = getToken();\r\n                     if (!token) {\r\n                        context.commit(\"user\", null);\r\n                        deleteToken();\r\n                        return null;\r\n                     }\r\n\r\n                     let api = await ApiHost.request()\r\n                        .POST()\r\n                        .url(\"session/verifyToken/\")\r\n                        .body({ token })\r\n                        .send();\r\n\r\n                     let content = api.getContent();\r\n                     let user = new ItemUser(content.user);\r\n\r\n                     setToken(token);\r\n                     context.commit(\"user\", user);\r\n\r\n                     return user;\r\n                  } catch (error) {\r\n                     context.commit(\"user\", null);\r\n                     deleteToken();\r\n                     if (error.message === \"not signed in\") return null;\r\n                     throw error;\r\n                  }\r\n               });\r\n            },\r\n            async changePassword(context, arg = {}) {\r\n               return context.state.loader.acquire(\"changePassword\", async () => {\r\n                  let { user } = context.getters;\r\n                  if (!user || !user.getUsername()) {\r\n                     throw new Error(\"cannot find username with current user\");\r\n                  }\r\n                  let username = user.getUsername();\r\n                  let { passwordVerify, passwordNew } = arg;\r\n                  let api = await ApiHost.request()\r\n                     .POST()\r\n                     .url(`session/user/${username}/changePassword`)\r\n                     .body({ passwordVerify, passwordNew })\r\n                     .send();\r\n                  let content = api.getContent();\r\n                  let { token } = content;\r\n                  user = content;\r\n                  user = onNewCredentail(context, { token, user });\r\n                  store.dispatch(\"restartSocket\");\r\n\r\n                  return user;\r\n               });\r\n            },\r\n\r\n            async login(context, arg = { username, password }) {\r\n               return context.state.loader.acquire(\"login\", async () => {\r\n                  try {\r\n                     deleteToken();\r\n                     let api = await ApiHost.request()\r\n                        .POST()\r\n                        .url(\"session/login/\")\r\n                        .body({ username: arg.username, password: arg.password })\r\n                        .send();\r\n                     let error = api.getError();\r\n                     let content = api.getContent();\r\n                     if (error || !content) throw new Error();\r\n                     const { token, user } = content;\r\n                     const newUser = onNewCredentail(context, { token, user });\r\n                     store.dispatch(\"restartSocket\");\r\n                     return newUser;\r\n                  } catch (error) {\r\n                     deleteToken();\r\n                     context.commit(\"user\", null);\r\n                     throw error;\r\n                  }\r\n               });\r\n            },\r\n            async logout(context) {\r\n               return context.state.loader.acquire(\"logout\", async () => {\r\n                  try {\r\n                     deleteToken();\r\n                     store.dispatch(\"restartSocket\");\r\n                     let user = context.getters.user;\r\n                     context.commit(\"user\", null);\r\n                     return user;\r\n                  } catch (error) {\r\n                     deleteToken();\r\n                     context.commit(\"user\", null);\r\n                     throw error;\r\n                  }\r\n               });\r\n            },\r\n         },\r\n      });\r\n\r\n      return loginStore;\r\n   },\r\n};\r\n"]}]}