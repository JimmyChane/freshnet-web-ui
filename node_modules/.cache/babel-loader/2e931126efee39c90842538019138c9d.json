{"remainingRequest":"C:\\dev\\freshnet-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\dev\\freshnet-vue\\src\\stores\\tools\\Processor.js","dependencies":[{"path":"C:\\dev\\freshnet-vue\\src\\stores\\tools\\Processor.js","mtime":1666020150057},{"path":"C:\\dev\\freshnet-vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\dev\\freshnet-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\dev\\freshnet-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6XFxkZXZcXGZyZXNobmV0LXZ1ZVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWVcXGhlbHBlcnNcXGVzbVxcYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiQzpcXGRldlxcZnJlc2huZXQtdnVlXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxjbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQzpcXGRldlxcZnJlc2huZXQtdnVlXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxjcmVhdGVDbGFzcy5qcyI7CmltcG9ydCBfY2xhc3NQcml2YXRlTWV0aG9kSW5pdFNwZWMgZnJvbSAiQzpcXGRldlxcZnJlc2huZXQtdnVlXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxjbGFzc1ByaXZhdGVNZXRob2RJbml0U3BlYy5qcyI7CmltcG9ydCBfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyBmcm9tICJDOlxcZGV2XFxmcmVzaG5ldC12dWVcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lXFxoZWxwZXJzXFxlc21cXGNsYXNzUHJpdmF0ZUZpZWxkSW5pdFNwZWMuanMiOwppbXBvcnQgX2NsYXNzUHJpdmF0ZU1ldGhvZEdldCBmcm9tICJDOlxcZGV2XFxmcmVzaG5ldC12dWVcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lXFxoZWxwZXJzXFxlc21cXGNsYXNzUHJpdmF0ZU1ldGhvZEdldC5qcyI7CmltcG9ydCBfY2xhc3NQcml2YXRlRmllbGRHZXQgZnJvbSAiQzpcXGRldlxcZnJlc2huZXQtdnVlXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxjbGFzc1ByaXZhdGVGaWVsZEdldC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMud2Vhay1tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMud2Vhay1zZXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7Cgp2YXIgX2tleXMgPSAvKiNfX1BVUkVfXyovbmV3IFdlYWtNYXAoKTsKCnZhciBfYWRkID0gLyojX19QVVJFX18qL25ldyBXZWFrU2V0KCk7Cgp2YXIgX3JlbW92ZSA9IC8qI19fUFVSRV9fKi9uZXcgV2Vha1NldCgpOwoKdmFyIFByb2Nlc3NvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUHJvY2Vzc29yKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb2Nlc3Nvcik7CgogICAgX2NsYXNzUHJpdmF0ZU1ldGhvZEluaXRTcGVjKHRoaXMsIF9yZW1vdmUpOwoKICAgIF9jbGFzc1ByaXZhdGVNZXRob2RJbml0U3BlYyh0aGlzLCBfYWRkKTsKCiAgICBfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyh0aGlzLCBfa2V5cywgewogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgdmFsdWU6IFtdCiAgICB9KTsKICB9CgogIF9jcmVhdGVDbGFzcyhQcm9jZXNzb3IsIFt7CiAgICBrZXk6ICJhY3F1aXJlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfYWNxdWlyZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShrZXksIGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVNZXRob2RHZXQodGhpcywgX2FkZCwgX2FkZDIpLmNhbGwodGhpcywga2V5KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgICBfY2xhc3NQcml2YXRlTWV0aG9kR2V0KHRoaXMsIF9yZW1vdmUsIF9yZW1vdmUyKS5jYWxsKHRoaXMsIGtleSk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzdWx0KTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CgogICAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZU1ldGhvZEdldCh0aGlzLCBfcmVtb3ZlLCBfcmVtb3ZlMikuY2FsbCh0aGlzLCBrZXkpOwoKICAgICAgICAgICAgICAgIHRocm93IF9jb250ZXh0LnQwOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcywgW1swLCAxMF1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gYWNxdWlyZShfeCwgX3gyKSB7CiAgICAgICAgcmV0dXJuIF9hY3F1aXJlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBhY3F1aXJlOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiaXNMb2FkaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0xvYWRpbmcoa2V5KSB7CiAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAic3RyaW5nIikgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfa2V5cykubGVuZ3RoID4gMDsKICAgICAgcmV0dXJuICEhX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9rZXlzKS5maW5kKGZ1bmN0aW9uIChsb2FkaW5nKSB7CiAgICAgICAgcmV0dXJuIGxvYWRpbmcgPT09IGtleTsKICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUHJvY2Vzc29yOwp9KCk7CgpmdW5jdGlvbiBfYWRkMihfeDMpIHsKICByZXR1cm4gX2FkZDMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2FkZDMoKSB7CiAgX2FkZDMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGtleSkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgIHZhciBydW4gPSBmdW5jdGlvbiBydW4oKSB7CiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNMb2FkaW5nKGtleSkpIHJldHVybiBzZXRUaW1lb3V0KHJ1biwgMTAwKTsKCiAgICAgICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRHZXQoX3RoaXMsIF9rZXlzKS5wdXNoKGtleSk7CgogICAgICAgICAgICAgICAgcmVzb2x2ZShrZXkpOwogICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgIHJ1bigpOwogICAgICAgICAgICB9KSk7CgogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMik7CiAgfSkpOwogIHJldHVybiBfYWRkMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfcmVtb3ZlMihrZXkpIHsKICB2YXIgaW5kZXggPSBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX2tleXMpLmluZGV4T2Yoa2V5KTsKCiAgaWYgKGluZGV4ID4gLTEpIF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfa2V5cykuc3BsaWNlKGluZGV4LCAxKTsKfQoKZXhwb3J0IGRlZmF1bHQgUHJvY2Vzc29yOw=="},{"version":3,"sources":["C:/dev/freshnet-vue/src/stores/tools/Processor.js"],"names":["Processor","key","callback","result","length","find","loading","Promise","resolve","reject","run","isLoading","setTimeout","push","index","indexOf","splice"],"mappings":";;;;;;;;;;;;;;;;;;;;;;IAAMA,S;;;;;;;;;;aACG;;;;;;;6EAkBR,iBAAcC,GAAd,EAAmBC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAEQ,IAFR,oBAEQ,IAFR,EAEkBD,GAFlB;;AAAA;AAAA;AAAA,uBAGuBC,QAAQ,EAH/B;;AAAA;AAGQC,gBAAAA,MAHR;;AAIE,2EAAaF,GAAb;;AAJF,iDAKSE,MALT;;AAAA;AAAA;AAAA;;AAOE,2EAAaF,GAAb;;AAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAYA,mBAAUA,GAAV,EAAe;AACd,UAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAO,mCAAWG,MAAX,GAAoB,CAA3B;AAC7B,aAAO,CAAC,CAAC,mCAAWC,IAAX,CAAgB,UAACC,OAAD;AAAA,eAAaA,OAAO,KAAKL,GAAzB;AAAA,OAAhB,CAAT;AACA;;;;;;;;;;;oFA/BUA,G;;;;;;;8CACH,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,kBAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AACjB,oBAAI,KAAI,CAACC,SAAL,CAAeV,GAAf,CAAJ,EAAyB,OAAOW,UAAU,CAACF,GAAD,EAAM,GAAN,CAAjB;;AAEzB,sCAAA,KAAI,QAAJ,CAAWG,IAAX,CAAgBZ,GAAhB;;AACAO,gBAAAA,OAAO,CAACP,GAAD,CAAP;AACA,eALD;;AAMAS,cAAAA,GAAG;AACH,aARM,C;;;;;;;;;;;;kBAUAT,G,EAAK;AACZ,MAAMa,KAAK,GAAG,mCAAWC,OAAX,CAAmBd,GAAnB,CAAd;;AACA,MAAIa,KAAK,GAAG,CAAC,CAAb,EAAgB,mCAAWE,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB;AAChB;;AAoBF,eAAed,SAAf","sourcesContent":["class Processor {\r\n\t#keys = [];\r\n\r\n\tasync #add(key) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst run = () => {\r\n\t\t\t\tif (this.isLoading(key)) return setTimeout(run, 100);\r\n\r\n\t\t\t\tthis.#keys.push(key);\r\n\t\t\t\tresolve(key);\r\n\t\t\t};\r\n\t\t\trun();\r\n\t\t});\r\n\t}\r\n\t#remove(key) {\r\n\t\tconst index = this.#keys.indexOf(key);\r\n\t\tif (index > -1) this.#keys.splice(index, 1);\r\n\t}\r\n\r\n\tasync acquire(key, callback) {\r\n\t\ttry {\r\n\t\t\tawait this.#add(key);\r\n\t\t\tconst result = await callback();\r\n\t\t\tthis.#remove(key);\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tthis.#remove(key);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\tisLoading(key) {\r\n\t\tif (typeof key !== \"string\") return this.#keys.length > 0;\r\n\t\treturn !!this.#keys.find((loading) => loading === key);\r\n\t}\r\n}\r\n\r\nexport default Processor;\r\n"]}]}