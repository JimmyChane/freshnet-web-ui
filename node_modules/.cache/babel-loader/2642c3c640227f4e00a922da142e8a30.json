{"remainingRequest":"C:\\dev\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\dev\\freshnet-v2\\vue\\src\\host\\ApiHost.js","dependencies":[{"path":"C:\\dev\\freshnet-v2\\vue\\src\\host\\ApiHost.js","mtime":1665935449347},{"path":"C:\\dev\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/dev/freshnet-v2/vue/src/host/ApiHost.js"],"names":["HostRequest","HostResponse","Text","ApiHost","window","location","protocol","hostname","name","option","width","height","query","origin","list","api","url","then","json","content","upload","images","formData","FormData","forEach","image","append","fetch","method","body","remove","request","DELETE","send","param","trim","headers","undefined","localStorage","getItem","authorization","response","hostResponse","getError","console","error","port"],"mappings":"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","sourcesContent":["import HostRequest from \"./HostRequest.js\";\r\nimport HostResponse from \"./HostResponse.js\";\r\nimport Text from \"@/../../express/data_structures/Text.js\";\r\n\r\nclass ApiHost {\r\n   static #dev_port = 80;\r\n   static #parseOrigin(protocol, hostname, port) {\r\n      port = port === 80 ? \"\" : `:${port}`;\r\n      return `${protocol}//${hostname}${port}`;\r\n   }\r\n\r\n   get #pathCloudinary() {\r\n      return \"https://res.cloudinary.com/freshnet/image/upload/\";\r\n   }\r\n   get origin() {\r\n      return \"https://www.freshnet.app\";\r\n      const { protocol, hostname } = window.location;\r\n      return ApiHost.#parseOrigin(protocol, hostname, ApiHost.#dev_port);\r\n   }\r\n   get imgFile() {\r\n      return {\r\n         name: (name, option = {}) => {\r\n            let { width = 0, height = 0 } = option;\r\n            width = width > 0 ? width : 0;\r\n            height = height > 0 ? height : 0;\r\n\r\n            let query = \"\";\r\n            if (width != 0 && height == 0) {\r\n               query = `?width=${width}`;\r\n            } else if (width == 0 && height != 0) {\r\n               query = `?height=${height}`;\r\n            } else if (width > 0 && height > 0) {\r\n               query = `?width=${width}&height=${height}`;\r\n            }\r\n\r\n            return `${this.origin}/api/image/name/${name}${query}`;\r\n         },\r\n         list: () => this.api({ url: `image/list` }).then((json) => json.content),\r\n         upload: (images = []) => {\r\n            const formData = new FormData();\r\n            images.forEach((image) => formData.append(image.name, image));\r\n\r\n            return this.fetch({\r\n               method: \"POST\",\r\n               url: `image/upload`,\r\n               body: formData,\r\n            });\r\n         },\r\n         remove: (name) => {\r\n            return this.request().DELETE().url(`image/delete/${name}`).send();\r\n         },\r\n      };\r\n   }\r\n\r\n   res(url) {\r\n      return `${this.origin}/resource/${url}`;\r\n   }\r\n   cloudinary(param = { url: \"\" }) {\r\n      let { url } = param;\r\n      url = typeof url === \"string\" ? Text.trim(url, \"\") : \"\";\r\n      if (url === \"\") return \"\";\r\n      return `${this.#pathCloudinary}resource/${url}`;\r\n   }\r\n\r\n   request() {\r\n      return new HostRequest(this);\r\n   }\r\n   api(param = { method: \"GET\", url: \"\", headers: {}, body: undefined }) {\r\n      return this.request()\r\n         .method(param.method)\r\n         .url(param.url)\r\n         .headers(param.headers)\r\n         .body(param.body)\r\n         .send();\r\n   } //legacy\r\n   async fetch(param = {}) {\r\n      let { method = \"GET\", url = \"\", headers = {}, body = undefined } = param;\r\n\r\n      if (url) url = `${this.origin}/api/${url}`;\r\n      if (window.localStorage.getItem(\"userToken\")) {\r\n         headers.authorization = window.localStorage.getItem(\"userToken\");\r\n      }\r\n\r\n      try {\r\n         let response = await fetch(url, { method, headers, body });\r\n         let json = await response.json();\r\n         let hostResponse = new HostResponse(json);\r\n\r\n         if (hostResponse.getError()) {\r\n            console.error(\"ApiHost Response:\", hostResponse.getError());\r\n         }\r\n\r\n         return hostResponse;\r\n      } catch (error) {\r\n         console.error(\"Fetch:\", error);\r\n         throw error;\r\n      }\r\n   }\r\n}\r\n\r\nexport default new ApiHost();\r\n"]}]}