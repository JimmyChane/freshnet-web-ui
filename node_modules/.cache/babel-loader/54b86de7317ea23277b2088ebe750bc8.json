{"remainingRequest":"C:\\dev\\freshnet-v2\\vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\dev\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\dev\\freshnet-v2\\vue\\src\\stores\\store.order.js","dependencies":[{"path":"C:\\dev\\freshnet-v2\\vue\\src\\stores\\store.order.js","mtime":1666953104916},{"path":"C:\\dev\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1662650934417},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}