{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\development\\freshnet-v2\\vue\\src\\stores\\store.order.js","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\stores\\store.order.js","mtime":1663504444447},{"path":"C:\\development\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/development/freshnet-v2/vue/src/stores/store.order.js"],"names":["Vuex","ApiHost","Order","OrderModule","DataLoader","CollectionUpdater","Processor","init","Stores","store","Store","state","dataLoader","timeout","processor","loadData","request","url","send","api","error","getError","content","getContent","Error","contents","Array","isArray","items","map","data","setData","commit","getData","getters","mutations","isLoading","pendingGroupItems","filter","order","getStatus","STATUS_PENDING","completedGroupItems","STATUS_COMPLETED","actions","refresh","context","acquire","doTimeout","dispatch","getItems","addItem","arg","POST","body","onId","item","getId","getItem","removeOItemOfId","id","DELETE","updateStatusOfId","status","PUT","onUpdate","getItemById","updateToPendingOfId","Status","Pending","updateToCompletedOfId","Completed"],"mappings":"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","sourcesContent":["import Vuex from \"vuex\";\r\nimport ApiHost from \"@/host/ApiHost.js\";\r\nimport Order from \"@/items/Order.js\";\r\nimport OrderModule from \"@/../../express/data_structures/Order.js\";\r\n\r\nimport DataLoader from \"./components/DataLoader\";\r\nimport CollectionUpdater from \"./components/CollectionUpdater\";\r\nimport Processor from \"./components/Processor.js\";\r\n\r\nexport default {\r\n   init(Stores) {\r\n      const store = new Vuex.Store({\r\n         state: {\r\n            dataLoader: new DataLoader({ timeout: 1000 * 60 * 10 }) // 10min\r\n               .processor(() => store.state.processor)\r\n               .loadData(async () => {\r\n                  const api = await ApiHost.request().url(\"order/\").send();\r\n                  const error = api.getError();\r\n                  const content = api.getContent();\r\n                  if (error) throw new Error(error);\r\n                  const contents = Array.isArray(content) ? content : [];\r\n                  const items = contents.map((data) => new Order(data));\r\n                  return items;\r\n               })\r\n               .setData((data) => store.commit(\"items\", Array.isArray(data) ? data : []))\r\n               .getData(() => store.getters.items),\r\n            items: [],\r\n            processor: new Processor(),\r\n         },\r\n         mutations: { items: (state, items) => (state.items = items) },\r\n         getters: {\r\n            isLoading: (state) => state.processor.isLoading(),\r\n            items: (state) => (Array.isArray(state.items) ? state.items : []),\r\n            pendingGroupItems() {\r\n               return store.getters.items.filter((order) => {\r\n                  return order.getStatus() === Order.STATUS_PENDING;\r\n               });\r\n            },\r\n            completedGroupItems() {\r\n               return store.getters.items.filter((order) => {\r\n                  return order.getStatus() === Order.STATUS_COMPLETED;\r\n               });\r\n            },\r\n         },\r\n         actions: {\r\n            async refresh(context) {\r\n               return context.state.processor.acquire(\"refresh\", async () => {\r\n                  context.state.dataLoader.doTimeout();\r\n                  await context.dispatch(\"getItems\");\r\n               });\r\n            },\r\n\r\n            async getItems(context) {\r\n               return context.state.processor.acquire(\"getItems\", async () => {\r\n                  return context.state.dataLoader.data();\r\n               });\r\n            },\r\n            async addItem(context, arg = { data }) {\r\n               return context.state.processor.acquire(\"addItem\", async () => {\r\n                  let { data } = arg;\r\n                  if (!data) return null;\r\n                  let api = await ApiHost.request()\r\n                     .POST()\r\n                     .url(\"order/\")\r\n                     .body(data)\r\n                     .send();\r\n                  let error = api.getError();\r\n                  let content = api.getContent();\r\n                  if (error) throw new Error();\r\n                  let order = new Order(content);\r\n\r\n                  order = new CollectionUpdater(context)\r\n                     .onId((item) => item.getId())\r\n                     .getItem(order);\r\n\r\n                  return order;\r\n               });\r\n            },\r\n            async removeOItemOfId(context, arg = { id }) {\r\n               return context.state.processor.acquire(\"removeOItemOfId\", async () => {\r\n                  let { id } = arg;\r\n                  let api = await ApiHost.request()\r\n                     .DELETE()\r\n                     .url(\"order/\")\r\n                     .body({ id })\r\n                     .send();\r\n                  let error = api.getError();\r\n                  if (error) throw new Error();\r\n                  let items = context.state.items.filter((item) => item.getId() !== id);\r\n                  context.commit(\"items\", items);\r\n               });\r\n            },\r\n            async updateStatusOfId(context, arg = { id, status }) {\r\n               return context.state.processor.acquire(\"updateStatusOfId\", async () => {\r\n                  let { id, status } = arg;\r\n                  let api = await ApiHost.request()\r\n                     .PUT()\r\n                     .url(\"order/\")\r\n                     .body({ id, status })\r\n                     .send();\r\n                  let error = api.getError();\r\n                  if (error) throw new Error();\r\n\r\n                  let order = new CollectionUpdater(context)\r\n                     .onId((item) => item.getId())\r\n                     .onUpdate((item) => (item.data.status = status))\r\n                     .getItemById(id);\r\n\r\n                  return order;\r\n               });\r\n            },\r\n            async updateToPendingOfId(context, arg = { id }) {\r\n               return context.dispatch(\"updateStatusOfId\", {\r\n                  id: arg.id,\r\n                  status: OrderModule.Status.Pending,\r\n               });\r\n            },\r\n            async updateToCompletedOfId(context, arg = { id }) {\r\n               return context.dispatch(\"updateStatusOfId\", {\r\n                  id: arg.id,\r\n                  status: OrderModule.Status.Completed,\r\n               });\r\n            },\r\n         },\r\n      });\r\n\r\n      return store;\r\n   },\r\n};\r\n"]}]}