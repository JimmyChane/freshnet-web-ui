{"remainingRequest":"C:\\dev\\freshnet-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\dev\\freshnet-vue\\src\\host\\ApiHost.js","dependencies":[{"path":"C:\\dev\\freshnet-vue\\src\\host\\ApiHost.js","mtime":1668341071708},{"path":"C:\\dev\\freshnet-vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\dev\\freshnet-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\dev\\freshnet-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/dev/freshnet-vue/src/host/ApiHost.js"],"names":["HostRequest","HostResponse","Text","ApiHost","window","location","protocol","hostname","name","option","width","height","query","origin","list","api","url","then","json","content","upload","images","formData","FormData","forEach","image","append","fetch","method","body","remove","request","DELETE","send","param","trim","headers","undefined","localStorage","getItem","authorization","response","hostResponse","getError","console","error","port"],"mappings":"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","sourcesContent":["import HostRequest from \"./HostRequest.js\";\r\nimport HostResponse from \"./HostResponse.js\";\r\nimport Text from \"@/items/data/Text.js\";\r\n\r\nclass ApiHost {\r\n\tstatic #dev_port = 80;\r\n\tstatic #parseOrigin(protocol, hostname, port) {\r\n\t\tport = port === 80 ? \"\" : `:${port}`;\r\n\t\treturn `${protocol}//${hostname}${port}`;\r\n\t}\r\n\r\n\tget #pathCloudinary() {\r\n\t\treturn \"https://res.cloudinary.com/freshnet/image/upload/\";\r\n\t}\r\n\tget origin() {\r\n\t\t// return \"https://www.freshnet.app\";\r\n\t\tconst { protocol, hostname } = window.location;\r\n\t\treturn ApiHost.#parseOrigin(protocol, hostname, ApiHost.#dev_port);\r\n\t}\r\n\tget imgFile() {\r\n\t\treturn {\r\n\t\t\tname: (name, option = {}) => {\r\n\t\t\t\tlet { width = 0, height = 0 } = option;\r\n\t\t\t\twidth = width > 0 ? width : 0;\r\n\t\t\t\theight = height > 0 ? height : 0;\r\n\r\n\t\t\t\tlet query = \"\";\r\n\t\t\t\tif (width != 0 && height == 0) {\r\n\t\t\t\t\tquery = `?width=${width}`;\r\n\t\t\t\t} else if (width == 0 && height != 0) {\r\n\t\t\t\t\tquery = `?height=${height}`;\r\n\t\t\t\t} else if (width > 0 && height > 0) {\r\n\t\t\t\t\tquery = `?width=${width}&height=${height}`;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn `${this.origin}/api/image/name/${name}${query}`;\r\n\t\t\t},\r\n\t\t\tlist: () => this.api({ url: `image/list` }).then((json) => json.content),\r\n\t\t\tupload: (images = []) => {\r\n\t\t\t\tconst formData = new FormData();\r\n\t\t\t\timages.forEach((image) => formData.append(image.name, image));\r\n\r\n\t\t\t\treturn this.fetch({\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\turl: `image/upload`,\r\n\t\t\t\t\tbody: formData,\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tremove: (name) => {\r\n\t\t\t\treturn this.request().DELETE().url(`image/delete/${name}`).send();\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\tres(url) {\r\n\t\treturn `${this.origin}/resource/${url}`;\r\n\t}\r\n\tcloudinary(param = { url: \"\" }) {\r\n\t\tlet { url } = param;\r\n\t\turl = typeof url === \"string\" ? Text.trim(url, \"\") : \"\";\r\n\t\tif (url === \"\") return \"\";\r\n\t\treturn `${this.#pathCloudinary}resource/${url}`;\r\n\t}\r\n\r\n\trequest() {\r\n\t\treturn new HostRequest(this);\r\n\t}\r\n\tapi(param = { method: \"GET\", url: \"\", headers: {}, body: undefined }) {\r\n\t\treturn this.request()\r\n\t\t\t.method(param.method)\r\n\t\t\t.url(param.url)\r\n\t\t\t.headers(param.headers)\r\n\t\t\t.body(param.body)\r\n\t\t\t.send();\r\n\t} //legacy\r\n\tasync fetch(param = {}) {\r\n\t\tlet { method = \"GET\", url = \"\", headers = {}, body = undefined } = param;\r\n\r\n\t\tif (url) url = `${this.origin}/api/${url}`;\r\n\t\tif (window.localStorage.getItem(\"userToken\")) {\r\n\t\t\theaders.authorization = window.localStorage.getItem(\"userToken\");\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlet response = await fetch(url, { method, headers, body });\r\n\t\t\tlet json = await response.json();\r\n\t\t\tlet hostResponse = new HostResponse(json);\r\n\r\n\t\t\tif (hostResponse.getError()) {\r\n\t\t\t\tconsole.error(\"ApiHost Response:\", hostResponse.getError());\r\n\t\t\t}\r\n\r\n\t\t\treturn hostResponse;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Fetch:\", error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default new ApiHost();\r\n"]}]}