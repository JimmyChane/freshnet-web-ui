{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\development\\freshnet-v2\\vue\\src\\stores\\store.database.js","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\stores\\store.database.js","mtime":1663504444444},{"path":"C:\\development\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/development/freshnet-v2/vue/src/stores/store.database.js"],"names":["Vuex","ApiHost","DataLoader","Processor","urlCollections","database","urlDocuments","collection","urlImports","init","Stores","store","Store","state","dataLoader","timeout","processor","loadData","request","POST","url","send","api","baseInfo","getContent","dispatch","setData","data","commit","getData","getters","items","mutations","isLoading","actions","refresh","context","acquire","doTimeout","loadBaseInfo","loadDatabases","content","map","name","collections","loadCollections","arg","documents","dbFound","length","splice","push","loadDocuments","collectionFound","imports","json","body","console","log","Error","exportDatabase","findDatabase","find","db","findCollection","dbCollection"],"mappings":"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","sourcesContent":["import Vuex from \"vuex\";\r\nimport ApiHost from \"@/host/ApiHost.js\";\r\nimport DataLoader from \"./components/DataLoader\";\r\nimport Processor from \"./components/Processor.js\";\r\n\r\nconst urlCollections = (database) => `database/database/${database}/collections`;\r\nconst urlDocuments = (database, collection) =>\r\n   `database/database/${database}/collection/${collection}/documents`;\r\nconst urlImports = () => `database/imports`;\r\n\r\nexport default {\r\n   init(Stores) {\r\n      const store = new Vuex.Store({\r\n         state: {\r\n            dataLoader: new DataLoader({ timeout: 1000 * 5 }) // 5sec\r\n               .processor(() => store.state.processor)\r\n               .loadData(async () => {\r\n                  const api = await ApiHost.request().POST().url(\"database/info\").send();\r\n                  const baseInfo = api.getContent();\r\n                  store.dispatch(\"loadDatabases\");\r\n                  return baseInfo;\r\n               })\r\n               .setData((data) => store.commit(\"baseInfo\", data ? data : null))\r\n               .getData(() => store.getters.baseInfo),\r\n            baseInfo: null,\r\n            items: [],\r\n            processor: new Processor(),\r\n         },\r\n         mutations: {\r\n            baseInfo: (state, baseInfo) => (state.baseInfo = baseInfo),\r\n            items: (state, items) => (state.items = items),\r\n         },\r\n         getters: {\r\n            isLoading: (state) => state.processor.isLoading(),\r\n            baseInfo: (state) => state.baseInfo,\r\n            items: (state) => state.items,\r\n         },\r\n         actions: {\r\n            async refresh(context) {\r\n               return context.state.processor.acquire(\"refresh\", async () => {\r\n                  context.state.dataLoader.doTimeout();\r\n                  await context.dispatch(\"loadBaseInfo\");\r\n               });\r\n            },\r\n\r\n            async loadBaseInfo(context) {\r\n               return context.state.processor.acquire(\"loadBaseInfo\", async () => {\r\n                  return context.state.dataLoader.data();\r\n               });\r\n            },\r\n            async loadDatabases(context) {\r\n               return context.state.processor.acquire(\"loadDatabases\", async () => {\r\n                  try {\r\n                     context.commit(\"items\", []);\r\n                     let api = await ApiHost.request()\r\n                        .POST()\r\n                        .url(\"database/databases\")\r\n                        .send();\r\n                     let content = api.getContent();\r\n                     let items = content.map((database) => {\r\n                        return { name: database, collections: [] };\r\n                     });\r\n                     context.commit(\"items\", items);\r\n                     for (let database of items) {\r\n                        context.dispatch(\"loadCollections\", {\r\n                           database: database.name,\r\n                        });\r\n                     }\r\n                     return context.getters.items;\r\n                  } catch (error) {\r\n                     context.commit(\"items\", []);\r\n                     throw error;\r\n                  }\r\n               });\r\n            },\r\n            async loadCollections(context, arg = {}) {\r\n               return context.state.processor.acquire(\"loadCollections\", async () => {\r\n                  let { database } = arg;\r\n                  let api = await ApiHost.request()\r\n                     .POST()\r\n                     .url(urlCollections(database))\r\n                     .send();\r\n                  let content = api.getContent();\r\n                  let collections = content.map((collection) => {\r\n                     return { name: collection, documents: [] };\r\n                  });\r\n                  let dbFound = await context.dispatch(\"findDatabase\", {\r\n                     database,\r\n                  });\r\n                  while (dbFound.collections.length) {\r\n                     dbFound.collections.splice(0, dbFound.collections.length);\r\n                  }\r\n                  dbFound.collections.push(...collections);\r\n                  for (let collection of dbFound.collections) {\r\n                     context.dispatch(\"loadDocuments\", {\r\n                        database: dbFound.name,\r\n                        collection: collection.name,\r\n                     });\r\n                  }\r\n                  return dbFound.collections;\r\n               });\r\n            },\r\n            async loadDocuments(context, arg = {}) {\r\n               return context.state.processor.acquire(\"loadDocuments\", async () => {\r\n                  let { database, collection } = arg;\r\n                  let api = await ApiHost.request()\r\n                     .POST()\r\n                     .url(urlDocuments(database, collection))\r\n                     .send();\r\n                  let documents = api.getContent();\r\n                  const collectionFound = await context.dispatch(\"findCollection\", {\r\n                     database,\r\n                     collection,\r\n                  });\r\n                  while (collectionFound.documents.length) {\r\n                     collectionFound.documents.splice(\r\n                        0,\r\n                        collectionFound.documents.length\r\n                     );\r\n                  }\r\n                  collectionFound.documents.push(...documents);\r\n                  return collectionFound.documents;\r\n               });\r\n            },\r\n\r\n            async imports(context, arg = {}) {\r\n               return context.state.processor.acquire(\"imports\", async () => {\r\n                  let { json } = arg;\r\n                  let api = await ApiHost.request()\r\n                     .POST()\r\n                     .url(urlImports())\r\n                     .body({ content: json })\r\n                     .send();\r\n                  console.log(api);\r\n                  throw new Error();\r\n               });\r\n            },\r\n            async exportDatabase(context, arg = {}) {\r\n               return context.state.processor.acquire(\"exportDatabase\", async () => {\r\n                  let { database } = arg;\r\n                  let api = await ApiHost.request()\r\n                     .url(`database/database/${database}/exportv2`)\r\n                     .send();\r\n                  let content = api.getContent();\r\n                  return content;\r\n               });\r\n            },\r\n\r\n            async findDatabase(context, arg = {}) {\r\n               return context.state.processor.acquire(\"findDatabase\", async () => {\r\n                  let { database } = arg;\r\n                  const dbFound = context.state.items.find((db) => {\r\n                     return db.name === database;\r\n                  });\r\n                  if (!dbFound) throw new Error(\"database not found\");\r\n\r\n                  return dbFound;\r\n               });\r\n            },\r\n            async findCollection(context, arg = {}) {\r\n               return context.state.processor.acquire(\"findCollection\", async () => {\r\n                  let { database, collection } = arg;\r\n                  let dbFound = await context.dispatch(\"findDatabase\", {\r\n                     database,\r\n                  });\r\n                  let collectionFound = dbFound.collections.find(\r\n                     (dbCollection) => dbCollection.name === collection\r\n                  );\r\n                  if (!collectionFound) {\r\n                     throw new Error(\"collection not found\");\r\n                  }\r\n                  return collectionFound;\r\n               });\r\n            },\r\n         },\r\n      });\r\n\r\n      return store;\r\n   },\r\n};\r\n"]}]}