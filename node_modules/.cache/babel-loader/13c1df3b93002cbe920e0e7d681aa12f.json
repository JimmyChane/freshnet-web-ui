{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\development\\freshnet-v2\\vue\\src\\stores\\store.product.js","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\stores\\store.product.js","mtime":1663504444448},{"path":"C:\\development\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1662650934417},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:import _asyncToGenerator from "C:\\development\\freshnet-v2\\vue\\node_modules\\@babel\\runtime\\helpers\\esm\\asyncToGenerator.js";
import "regenerator-runtime/runtime.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.sort.js";
import "core-js/modules/es.array.find.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.string.trim.js";
import "core-js/modules/es.function.name.js";
import Vuex from "vuex";
import ApiHost from "@/host/ApiHost.js";
import DataLoader from "./components/DataLoader";
import CollectionUpdater from "./components/CollectionUpdater";
import Processor from "./components/Processor.js";
import ModuleBundle from "../../../express/data_structures/ProductBundle.js";
import ModulePrice from "../../../express/data_structures/ProductPrice.js";
import ModuleCategory from "../../../express/data_structures/Category";
import Product from "../items/Product.js";
import ProductPrice from "../items/ProductPrice.js";
import ProductSpecContent from "../items/ProductSpecContent.js";
import Image from "../items/Image.js";

var catchErrorWithContext = function catchErrorWithContext(context, error) {
  console.error(error);
  throw error;
};

export default {
  init: function init(Stores) {
    var categoryStore = Stores.category;
    var productStore = new Vuex.Store({
      state: {
        dataLoader: new DataLoader({
          timeout: 1000 * 60 * 10
        }) // 10min
        .processor(function () {
          return productStore.state.processor;
        }).loadData( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var api, error, contents;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return ApiHost.request().url("productv2/list/").send();

                case 2:
                  api = _context.sent;
                  error = api.getError();
                  contents = api.getContent();

                  if (!error) {
                    _context.next = 7;
                    break;
                  }

                  throw new Error(error);

                case 7:
                  if (Array.isArray(contents)) {
                    _context.next = 9;
                    break;
                  }

                  throw new Error("content is not array");

                case 9:
                  return _context.abrupt("return", Promise.all(contents.map(function (content) {
                    return Product.importData(content);
                  })));

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))).setData(function (data) {
          return productStore.commit("items", Array.isArray(data) ? data : []);
        }).getData(function () {
          return productStore.getters.items;
        }),
        items: [],
        processor: new Processor()
      },
      mutations: {
        items: function items(state, _items) {
          return state.items = _items;
        }
      },
      getters: {
        isLoading: function isLoading(state) {
          return state.processor.isLoading();
        },
        items: function items(state) {
          return state.items.sort(function (product1, product2) {
            return product1.compare(product2);
          });
        }
      },
      actions: {
        refresh: function refresh(context) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    return _context3.abrupt("return", context.state.processor.acquire("refresh", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                      return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              context.state.dataLoader.doTimeout();
                              _context2.next = 3;
                              return context.dispatch("getItems");

                            case 3:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }))));

                  case 1:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }))();
        },
        getItems: function getItems(context) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    return _context5.abrupt("return", context.state.processor.acquire("getItems", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                      return regeneratorRuntime.wrap(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              return _context4.abrupt("return", context.state.dataLoader.data());

                            case 1:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4);
                    }))));

                  case 1:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }))();
        },
        getItemOfId: function getItemOfId(context) {
          var _arguments = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
            var arg;
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    arg = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {
                      id: id
                    };
                    return _context7.abrupt("return", context.state.processor.acquire("getItemOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                      var id, items, item;
                      return regeneratorRuntime.wrap(function _callee6$(_context6) {
                        while (1) {
                          switch (_context6.prev = _context6.next) {
                            case 0:
                              id = arg.id;
                              _context6.next = 3;
                              return context.dispatch("getItems");

                            case 3:
                              items = _context6.sent;
                              item = items.find(function (item) {
                                return item.getId() === id;
                              });

                              if (item) {
                                _context6.next = 10;
                                break;
                              }

                              _context6.next = 8;
                              return context.dispatch("refreshItems");

                            case 8:
                              items = _context6.sent;
                              item = items.find(function (item) {
                                return item.getId() === id;
                              });

                            case 10:
                              return _context6.abrupt("return", item);

                            case 11:
                            case "end":
                              return _context6.stop();
                          }
                        }
                      }, _callee6);
                    }))));

                  case 2:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7);
          }))();
        },
        addItem: function addItem(context) {
          var _arguments2 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
            var arg;
            return regeneratorRuntime.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    arg = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : {
                      data: data
                    };
                    return _context9.abrupt("return", context.state.processor.acquire("addItem", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                      var data, api, error, content, productNew, item;
                      return regeneratorRuntime.wrap(function _callee8$(_context8) {
                        while (1) {
                          switch (_context8.prev = _context8.next) {
                            case 0:
                              data = arg.data;

                              if (data) {
                                _context8.next = 3;
                                break;
                              }

                              throw new Error("data not valid");

                            case 3:
                              _context8.next = 5;
                              return ApiHost.request().POST().url("productv2/").body({
                                content: data
                              }).send();

                            case 5:
                              api = _context8.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context8.next = 10;
                                break;
                              }

                              throw new Error(error);

                            case 10:
                              _context8.next = 12;
                              return Product.importData(content);

                            case 12:
                              productNew = _context8.sent;
                              item = new CollectionUpdater(context).onId(function (item) {
                                return item.getId();
                              }).getItem(productNew);
                              return _context8.abrupt("return", item);

                            case 15:
                            case "end":
                              return _context8.stop();
                          }
                        }
                      }, _callee8);
                    }))).catch(function (error) {
                      catchErrorWithContext(context, error);
                    }));

                  case 2:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9);
          }))();
        },
        removeItemOfId: function removeItemOfId(context) {
          var _arguments3 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
            var arg;
            return regeneratorRuntime.wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    arg = _arguments3.length > 1 && _arguments3[1] !== undefined ? _arguments3[1] : {
                      id: id
                    };
                    return _context11.abrupt("return", context.state.processor.acquire("removeItemOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                      var id, api, error, items;
                      return regeneratorRuntime.wrap(function _callee10$(_context10) {
                        while (1) {
                          switch (_context10.prev = _context10.next) {
                            case 0:
                              id = arg.id;
                              _context10.next = 3;
                              return ApiHost.request().DELETE().url("productv2/id/".concat(id)).body({
                                id: id
                              }).send();

                            case 3:
                              api = _context10.sent;
                              error = api.getError();

                              if (!error) {
                                _context10.next = 7;
                                break;
                              }

                              throw new Error(error);

                            case 7:
                              items = context.state.items.filter(function (item) {
                                return item.getId() !== id;
                              });
                              context.commit("items", items);
                              return _context10.abrupt("return", true);

                            case 10:
                            case "end":
                              return _context10.stop();
                          }
                        }
                      }, _callee10);
                    }))));

                  case 2:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11);
          }))();
        },
        onUpdateItem: function onUpdateItem(context) {
          var _arguments4 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
            var arg;
            return regeneratorRuntime.wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    arg = _arguments4.length > 1 && _arguments4[1] !== undefined ? _arguments4[1] : {
                      id: id,
                      callback: callback
                    };
                    return _context13.abrupt("return", context.state.processor.acquire("onUpdateItem", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                      var id, callback, item;
                      return regeneratorRuntime.wrap(function _callee12$(_context12) {
                        while (1) {
                          switch (_context12.prev = _context12.next) {
                            case 0:
                              id = arg.id, callback = arg.callback;
                              _context12.next = 3;
                              return context.dispatch("getItemOfId", {
                                id: id
                              });

                            case 3:
                              item = _context12.sent;
                              if (item) callback(item);
                              return _context12.abrupt("return", item);

                            case 6:
                            case "end":
                              return _context12.stop();
                          }
                        }
                      }, _callee12);
                    }))));

                  case 2:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13);
          }))();
        },
        updateTitleOfId: function updateTitleOfId(context) {
          var _arguments5 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
            var arg;
            return regeneratorRuntime.wrap(function _callee15$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    arg = _arguments5.length > 1 && _arguments5[1] !== undefined ? _arguments5[1] : {
                      id: id,
                      title: title
                    };
                    return _context15.abrupt("return", context.state.processor.acquire("updateTitleOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                      var id, title, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee14$(_context14) {
                        while (1) {
                          switch (_context14.prev = _context14.next) {
                            case 0:
                              id = arg.id, title = arg.title;
                              _context14.next = 3;
                              return ApiHost.request().PUT().url("productv2/title/").body({
                                content: {
                                  productId: id,
                                  title: title
                                }
                              }).send();

                            case 3:
                              api = _context14.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context14.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context14.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  return item.setTitle(content.title);
                                }
                              });

                            case 10:
                              item = _context14.sent;
                              return _context14.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context14.stop();
                          }
                        }
                      }, _callee14);
                    }))));

                  case 2:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee15);
          }))();
        },
        updateDescriptionOfId: function updateDescriptionOfId(context) {
          var _arguments6 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
            var arg;
            return regeneratorRuntime.wrap(function _callee17$(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    arg = _arguments6.length > 1 && _arguments6[1] !== undefined ? _arguments6[1] : {
                      id: id,
                      description: description
                    };
                    return _context17.abrupt("return", context.state.processor.acquire("updateDescriptionOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
                      var id, description, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee16$(_context16) {
                        while (1) {
                          switch (_context16.prev = _context16.next) {
                            case 0:
                              id = arg.id, description = arg.description;
                              _context16.next = 3;
                              return ApiHost.request().PUT().url("productv2/description/").body({
                                content: {
                                  productId: id,
                                  description: description
                                }
                              }).send();

                            case 3:
                              api = _context16.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context16.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context16.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  item.setDescription(content.description);
                                }
                              });

                            case 10:
                              item = _context16.sent;
                              return _context16.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context16.stop();
                          }
                        }
                      }, _callee16);
                    }))));

                  case 2:
                  case "end":
                    return _context17.stop();
                }
              }
            }, _callee17);
          }))();
        },
        updateBrandIdOfId: function updateBrandIdOfId(context) {
          var _arguments7 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
            var arg;
            return regeneratorRuntime.wrap(function _callee19$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    arg = _arguments7.length > 1 && _arguments7[1] !== undefined ? _arguments7[1] : {
                      id: id,
                      brandId: brandId
                    };
                    return _context19.abrupt("return", context.state.processor.acquire("updateBrandIdOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
                      var id, brandId, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee18$(_context18) {
                        while (1) {
                          switch (_context18.prev = _context18.next) {
                            case 0:
                              id = arg.id, brandId = arg.brandId;
                              _context18.next = 3;
                              return ApiHost.request().PUT().url("productv2/brandId/").body({
                                content: {
                                  productId: id,
                                  brandId: brandId
                                }
                              }).send();

                            case 3:
                              api = _context18.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context18.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context18.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  return item.setBrandId(content.brandId);
                                }
                              });

                            case 10:
                              item = _context18.sent;
                              return _context18.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context18.stop();
                          }
                        }
                      }, _callee18);
                    }))));

                  case 2:
                  case "end":
                    return _context19.stop();
                }
              }
            }, _callee19);
          }))();
        },
        updateCategoryIdOfId: function updateCategoryIdOfId(context) {
          var _arguments8 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
            var arg;
            return regeneratorRuntime.wrap(function _callee21$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    arg = _arguments8.length > 1 && _arguments8[1] !== undefined ? _arguments8[1] : {
                      id: id,
                      categoryId: categoryId
                    };
                    return _context21.abrupt("return", context.state.processor.acquire("updateCategoryIdOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
                      var id, categoryId, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee20$(_context20) {
                        while (1) {
                          switch (_context20.prev = _context20.next) {
                            case 0:
                              id = arg.id, categoryId = arg.categoryId;
                              _context20.next = 3;
                              return ApiHost.request().PUT().url("productv2/categoryId/").body({
                                content: {
                                  productId: id,
                                  categoryId: categoryId
                                }
                              }).send();

                            case 3:
                              api = _context20.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context20.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context20.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  return item.setCategoryId(content.categoryId);
                                }
                              });

                            case 10:
                              item = _context20.sent;
                              return _context20.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context20.stop();
                          }
                        }
                      }, _callee20);
                    }))));

                  case 2:
                  case "end":
                    return _context21.stop();
                }
              }
            }, _callee21);
          }))();
        },
        updateAvailabilityOfId: function updateAvailabilityOfId(context) {
          var _arguments9 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
            var arg;
            return regeneratorRuntime.wrap(function _callee23$(_context23) {
              while (1) {
                switch (_context23.prev = _context23.next) {
                  case 0:
                    arg = _arguments9.length > 1 && _arguments9[1] !== undefined ? _arguments9[1] : {
                      id: id,
                      isAvailable: isAvailable
                    };
                    return _context23.abrupt("return", context.state.processor.acquire("updateAvailabilityOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
                      var id, isAvailable, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee22$(_context22) {
                        while (1) {
                          switch (_context22.prev = _context22.next) {
                            case 0:
                              id = arg.id, isAvailable = arg.isAvailable;
                              _context22.next = 3;
                              return ApiHost.request().PUT().url("productv2/isAvailable/").body({
                                content: {
                                  productId: id,
                                  isAvailable: isAvailable
                                }
                              }).send();

                            case 3:
                              api = _context22.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context22.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context22.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  item.stock.isAvailable = content.isAvailable;
                                }
                              });

                            case 10:
                              item = _context22.sent;
                              return _context22.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context22.stop();
                          }
                        }
                      }, _callee22);
                    }))));

                  case 2:
                  case "end":
                    return _context23.stop();
                }
              }
            }, _callee23);
          }))();
        },
        updateSecondHandOfId: function updateSecondHandOfId(context) {
          var _arguments10 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
            var arg;
            return regeneratorRuntime.wrap(function _callee25$(_context25) {
              while (1) {
                switch (_context25.prev = _context25.next) {
                  case 0:
                    arg = _arguments10.length > 1 && _arguments10[1] !== undefined ? _arguments10[1] : {
                      id: id,
                      isSecondHand: isSecondHand
                    };
                    return _context25.abrupt("return", context.state.processor.acquire("updateSecondHandOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
                      var id, isSecondHand, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee24$(_context24) {
                        while (1) {
                          switch (_context24.prev = _context24.next) {
                            case 0:
                              id = arg.id, isSecondHand = arg.isSecondHand;
                              _context24.next = 3;
                              return ApiHost.request().PUT().url("productv2/isSecondHand/").body({
                                content: {
                                  productId: id,
                                  isSecondHand: isSecondHand
                                }
                              }).send();

                            case 3:
                              api = _context24.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context24.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context24.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  item.stock.isSecondHand = content.isSecondHand;
                                }
                              });

                            case 10:
                              item = _context24.sent;
                              return _context24.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context24.stop();
                          }
                        }
                      }, _callee24);
                    }))));

                  case 2:
                  case "end":
                    return _context25.stop();
                }
              }
            }, _callee25);
          }))();
        },
        updatePriceOfId: function updatePriceOfId(context) {
          var _arguments11 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27() {
            var arg;
            return regeneratorRuntime.wrap(function _callee27$(_context27) {
              while (1) {
                switch (_context27.prev = _context27.next) {
                  case 0:
                    arg = _arguments11.length > 1 && _arguments11[1] !== undefined ? _arguments11[1] : {
                      id: id,
                      price: price
                    };
                    return _context27.abrupt("return", context.state.processor.acquire("updatePriceOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {
                      var id, price, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee26$(_context26) {
                        while (1) {
                          switch (_context26.prev = _context26.next) {
                            case 0:
                              id = arg.id, price = arg.price;
                              price = ModulePrice.trim(price);
                              _context26.next = 4;
                              return ApiHost.request().PUT().url("productv2/price/").body({
                                content: {
                                  productId: id,
                                  price: price
                                }
                              }).send();

                            case 4:
                              api = _context26.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context26.next = 9;
                                break;
                              }

                              throw new Error(error);

                            case 9:
                              _context26.next = 11;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  item.setPrice({
                                    normal: ProductPrice.parseString(content.price.normal),
                                    promotion: ProductPrice.parseString(content.price.promotion)
                                  });
                                }
                              });

                            case 11:
                              item = _context26.sent;
                              return _context26.abrupt("return", item);

                            case 13:
                            case "end":
                              return _context26.stop();
                          }
                        }
                      }, _callee26);
                    }))));

                  case 2:
                  case "end":
                    return _context27.stop();
                }
              }
            }, _callee27);
          }))();
        },
        addBundleOfId: function addBundleOfId(context) {
          var _arguments12 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29() {
            var arg;
            return regeneratorRuntime.wrap(function _callee29$(_context29) {
              while (1) {
                switch (_context29.prev = _context29.next) {
                  case 0:
                    arg = _arguments12.length > 1 && _arguments12[1] !== undefined ? _arguments12[1] : {
                      id: id,
                      bundle: bundle
                    };
                    return _context29.abrupt("return", context.state.processor.acquire("addBundleOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {
                      var id, bundle, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee28$(_context28) {
                        while (1) {
                          switch (_context28.prev = _context28.next) {
                            case 0:
                              id = arg.id, bundle = arg.bundle;
                              _context28.next = 3;
                              return ApiHost.request().POST().url("productv2/bundle/").body({
                                content: {
                                  productId: id,
                                  bundle: bundle
                                }
                              }).send();

                            case 3:
                              api = _context28.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context28.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context28.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  item.addBundle(ModuleBundle.trim(content.bundle));
                                }
                              });

                            case 10:
                              item = _context28.sent;
                              return _context28.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context28.stop();
                          }
                        }
                      }, _callee28);
                    }))));

                  case 2:
                  case "end":
                    return _context29.stop();
                }
              }
            }, _callee29);
          }))();
        },
        removeBundleOfId: function removeBundleOfId(context) {
          var _arguments13 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {
            var arg;
            return regeneratorRuntime.wrap(function _callee31$(_context31) {
              while (1) {
                switch (_context31.prev = _context31.next) {
                  case 0:
                    arg = _arguments13.length > 1 && _arguments13[1] !== undefined ? _arguments13[1] : {
                      id: id,
                      bundle: bundle
                    };
                    return _context31.abrupt("return", context.state.processor.acquire("removeBundleOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30() {
                      var id, bundle, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee30$(_context30) {
                        while (1) {
                          switch (_context30.prev = _context30.next) {
                            case 0:
                              id = arg.id, bundle = arg.bundle;
                              _context30.next = 3;
                              return ApiHost.request().DELETE().url("productv2/bundle/").body({
                                content: {
                                  productId: id,
                                  bundle: ModuleBundle.trim(bundle)
                                }
                              }).send();

                            case 3:
                              api = _context30.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context30.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context30.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  return item.removeBundle(content.bundle);
                                }
                              });

                            case 10:
                              item = _context30.sent;
                              return _context30.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context30.stop();
                          }
                        }
                      }, _callee30);
                    }))));

                  case 2:
                  case "end":
                    return _context31.stop();
                }
              }
            }, _callee31);
          }))();
        },
        addGiftOfId: function addGiftOfId(context) {
          var _arguments14 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33() {
            var arg;
            return regeneratorRuntime.wrap(function _callee33$(_context33) {
              while (1) {
                switch (_context33.prev = _context33.next) {
                  case 0:
                    arg = _arguments14.length > 1 && _arguments14[1] !== undefined ? _arguments14[1] : {
                      id: id,
                      gift: gift
                    };
                    return _context33.abrupt("return", context.state.processor.acquire("addGiftOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32() {
                      var id, gift, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee32$(_context32) {
                        while (1) {
                          switch (_context32.prev = _context32.next) {
                            case 0:
                              id = arg.id, gift = arg.gift;
                              _context32.next = 3;
                              return ApiHost.request().POST().url("productv2/gift/").body({
                                content: {
                                  productId: id,
                                  gift: gift
                                }
                              }).send();

                            case 3:
                              api = _context32.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context32.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context32.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  return item.addGift(content.gift);
                                }
                              });

                            case 10:
                              item = _context32.sent;
                              return _context32.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context32.stop();
                          }
                        }
                      }, _callee32);
                    }))));

                  case 2:
                  case "end":
                    return _context33.stop();
                }
              }
            }, _callee33);
          }))();
        },
        removeGiftOfId: function removeGiftOfId(context) {
          var _arguments15 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35() {
            var arg;
            return regeneratorRuntime.wrap(function _callee35$(_context35) {
              while (1) {
                switch (_context35.prev = _context35.next) {
                  case 0:
                    arg = _arguments15.length > 1 && _arguments15[1] !== undefined ? _arguments15[1] : {
                      id: id,
                      gift: gift
                    };
                    return _context35.abrupt("return", context.state.processor.acquire("removeGiftOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34() {
                      var id, gift, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee34$(_context34) {
                        while (1) {
                          switch (_context34.prev = _context34.next) {
                            case 0:
                              id = arg.id, gift = arg.gift;
                              _context34.next = 3;
                              return ApiHost.request().DELETE().url("productv2/gift/").body({
                                content: {
                                  productId: id,
                                  gift: gift
                                }
                              }).send();

                            case 3:
                              api = _context34.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context34.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context34.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  return item.removeGift(content.gift);
                                }
                              });

                            case 10:
                              item = _context34.sent;
                              return _context34.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context34.stop();
                          }
                        }
                      }, _callee34);
                    }))));

                  case 2:
                  case "end":
                    return _context35.stop();
                }
              }
            }, _callee35);
          }))();
        },
        addSpecificationOfId: function addSpecificationOfId(context) {
          var _arguments16 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37() {
            var arg;
            return regeneratorRuntime.wrap(function _callee37$(_context37) {
              while (1) {
                switch (_context37.prev = _context37.next) {
                  case 0:
                    arg = _arguments16.length > 1 && _arguments16[1] !== undefined ? _arguments16[1] : {
                      id: id,
                      specification: specification
                    };
                    return _context37.abrupt("return", context.state.processor.acquire("addSpecificationOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36() {
                      var id, specification, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee36$(_context36) {
                        while (1) {
                          switch (_context36.prev = _context36.next) {
                            case 0:
                              id = arg.id, specification = arg.specification;
                              _context36.next = 3;
                              return ApiHost.request().POST().url("productv2/specification/").body({
                                content: {
                                  productId: id,
                                  specification: specification
                                }
                              }).send();

                            case 3:
                              api = _context36.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context36.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context36.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  item.addSpecification(content.specification);
                                }
                              });

                            case 10:
                              item = _context36.sent;
                              return _context36.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context36.stop();
                          }
                        }
                      }, _callee36);
                    }))));

                  case 2:
                  case "end":
                    return _context37.stop();
                }
              }
            }, _callee37);
          }))();
        },
        removeSpecificationOfId: function removeSpecificationOfId(context) {
          var _arguments17 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39() {
            var arg;
            return regeneratorRuntime.wrap(function _callee39$(_context39) {
              while (1) {
                switch (_context39.prev = _context39.next) {
                  case 0:
                    arg = _arguments17.length > 1 && _arguments17[1] !== undefined ? _arguments17[1] : {
                      id: id,
                      specification: specification
                    };
                    return _context39.abrupt("return", context.state.processor.acquire("removeSpecificationOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38() {
                      var id, specification, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee38$(_context38) {
                        while (1) {
                          switch (_context38.prev = _context38.next) {
                            case 0:
                              id = arg.id, specification = arg.specification;
                              specification = specification instanceof ProductSpecContent ? ProductSpecContent.exportFrom(specification) : specification;
                              specification.type = specification.key;
                              _context38.next = 5;
                              return ApiHost.request().DELETE().url("productv2/specification/").body({
                                content: {
                                  productId: id,
                                  specification: specification
                                }
                              }).send();

                            case 5:
                              api = _context38.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context38.next = 10;
                                break;
                              }

                              throw new Error(error);

                            case 10:
                              _context38.next = 12;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  item.removeSpecification(content.specification);
                                }
                              });

                            case 12:
                              item = _context38.sent;
                              return _context38.abrupt("return", item);

                            case 14:
                            case "end":
                              return _context38.stop();
                          }
                        }
                      }, _callee38);
                    }))));

                  case 2:
                  case "end":
                    return _context39.stop();
                }
              }
            }, _callee39);
          }))();
        },
        updateSpecificationsOfId: function updateSpecificationsOfId(context) {
          var _arguments18 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41() {
            var arg;
            return regeneratorRuntime.wrap(function _callee41$(_context41) {
              while (1) {
                switch (_context41.prev = _context41.next) {
                  case 0:
                    arg = _arguments18.length > 1 && _arguments18[1] !== undefined ? _arguments18[1] : {
                      id: id,
                      specifications: specifications
                    };
                    return _context41.abrupt("return", context.state.processor.acquire("updateSpecificationsOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40() {
                      var id, specifications, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee40$(_context40) {
                        while (1) {
                          switch (_context40.prev = _context40.next) {
                            case 0:
                              id = arg.id, specifications = arg.specifications;
                              _context40.next = 3;
                              return ApiHost.request().PUT().url("productv2/specification/list").body({
                                content: {
                                  productId: id,
                                  specifications: specifications
                                }
                              }).send();

                            case 3:
                              api = _context40.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context40.next = 8;
                                break;
                              }

                              throw new Error(error);

                            case 8:
                              _context40.next = 10;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  item.setSpecifications(content.specifications);
                                }
                              });

                            case 10:
                              item = _context40.sent;
                              return _context40.abrupt("return", item);

                            case 12:
                            case "end":
                              return _context40.stop();
                          }
                        }
                      }, _callee40);
                    }))));

                  case 2:
                  case "end":
                    return _context41.stop();
                }
              }
            }, _callee41);
          }))();
        },
        addImageOfId: function addImageOfId(context) {
          var _arguments19 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43() {
            var arg;
            return regeneratorRuntime.wrap(function _callee43$(_context43) {
              while (1) {
                switch (_context43.prev = _context43.next) {
                  case 0:
                    arg = _arguments19.length > 1 && _arguments19[1] !== undefined ? _arguments19[1] : {
                      id: id,
                      imageFile: imageFile
                    };
                    return _context43.abrupt("return", context.state.processor.acquire("addImageOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42() {
                      var id, imageFile, imageFileForm, api, content, item;
                      return regeneratorRuntime.wrap(function _callee42$(_context42) {
                        while (1) {
                          switch (_context42.prev = _context42.next) {
                            case 0:
                              id = arg.id, imageFile = arg.imageFile;
                              imageFileForm = new FormData();
                              imageFileForm.append(imageFile.name, imageFile);
                              _context42.next = 5;
                              return ApiHost.fetch({
                                method: "POST",
                                url: "productv2/id/".concat(id, "/image/"),
                                body: imageFileForm
                              });

                            case 5:
                              api = _context42.sent;

                              if (!api.error) {
                                _context42.next = 8;
                                break;
                              }

                              throw new Error(api.error);

                            case 8:
                              content = api.content;
                              _context42.next = 11;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  item.addImages(content.images);
                                }
                              });

                            case 11:
                              item = _context42.sent;
                              return _context42.abrupt("return", item);

                            case 13:
                            case "end":
                              return _context42.stop();
                          }
                        }
                      }, _callee42);
                    }))));

                  case 2:
                  case "end":
                    return _context43.stop();
                }
              }
            }, _callee43);
          }))();
        },
        removeImageOfId: function removeImageOfId(context) {
          var _arguments20 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45() {
            var arg;
            return regeneratorRuntime.wrap(function _callee45$(_context45) {
              while (1) {
                switch (_context45.prev = _context45.next) {
                  case 0:
                    arg = _arguments20.length > 1 && _arguments20[1] !== undefined ? _arguments20[1] : {
                      id: id,
                      image: image
                    };
                    return _context45.abrupt("return", context.state.processor.acquire("removeImageOfId", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44() {
                      var id, image, api, error, content, item;
                      return regeneratorRuntime.wrap(function _callee44$(_context44) {
                        while (1) {
                          switch (_context44.prev = _context44.next) {
                            case 0:
                              id = arg.id, image = arg.image;
                              image = image instanceof Image ? Image.exportFrom(image) : image;
                              _context44.next = 4;
                              return ApiHost.request().DELETE().url("productv2/id/".concat(id, "/image/")).body({
                                content: {
                                  image: image
                                }
                              }).send();

                            case 4:
                              api = _context44.sent;
                              error = api.getError();
                              content = api.getContent();

                              if (!error) {
                                _context44.next = 9;
                                break;
                              }

                              throw new Error(error);

                            case 9:
                              _context44.next = 11;
                              return context.dispatch("onUpdateItem", {
                                id: content.productId,
                                callback: function callback(item) {
                                  item.removeImage(content.image);
                                }
                              });

                            case 11:
                              item = _context44.sent;
                              return _context44.abrupt("return", item);

                            case 13:
                            case "end":
                              return _context44.stop();
                          }
                        }
                      }, _callee44);
                    }))));

                  case 2:
                  case "end":
                    return _context45.stop();
                }
              }
            }, _callee45);
          }))();
        }
      }
    });
    var store = new Vuex.Store({
      getters: {
        categories: function categories() {
          return categoryStore.state.items.map(function (item) {
            return item;
          });
        },
        products: function products() {
          return productStore.state.items.map(function (item) {
            return item;
          });
        },
        groups: function groups() {
          var _store$getters = store.getters,
              categories = _store$getters.categories,
              products = _store$getters.products;
          var categoryOther = categories.find(function (category) {
            return category.key === ModuleCategory.Key.Other;
          });
          var categoryOtherId = categoryOther ? categoryOther._id : "";
          return categories.map(function (category) {
            category.items = products.filter(function (product) {
              var productCategoryId = product.getCategoryId();

              if (!productCategoryId) {
                productCategoryId = categoryOtherId;
              }

              return product.getCategoryId() === category._id;
            }).sort(function (product1, product2) {
              return product1.compare(product2);
            });
            return category;
          }).sort(function (product1, product2) {
            return product1.compare(product2);
          });
        },
        groups2: function groups2() {
          var _store$getters2 = store.getters,
              categories = _store$getters2.categories,
              products = _store$getters2.products;
          var categoryOther = categories.find(function (category) {
            return category.key === ModuleCategory.Key.Other;
          });
          var categoryOtherId = categoryOther ? categoryOther._id : "";
          return categories.map(function (category) {
            var group = {
              category: category
            };
            group.products = products.filter(function (product) {
              var productCategoryId = product.getCategoryId();

              if (!productCategoryId) {
                productCategoryId = categoryOtherId;
              }

              return productCategoryId === category._id;
            }).sort(function (product1, product2) {
              return product1.compare(product2);
            });
            return group;
          }).sort(function (group1, group2) {
            return group1.category.compare(group2.category);
          });
        },
        isLoading: function isLoading() {
          return categoryStore.state.isLoading || productStore.state.isLoading;
        }
      },
      actions: {
        refresh: function refresh() {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46() {
            return regeneratorRuntime.wrap(function _callee46$(_context46) {
              while (1) {
                switch (_context46.prev = _context46.next) {
                  case 0:
                    _context46.next = 2;
                    return Promise.all([categoryStore.dispatch("refresh"), productStore.dispatch("refresh")]);

                  case 2:
                  case "end":
                    return _context46.stop();
                }
              }
            }, _callee46);
          }))();
        },
        getProductsGroupByCategories: function getProductsGroupByCategories(context) {
          var _arguments21 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47() {
            var arg, preventRefresh, assets, groups;
            return regeneratorRuntime.wrap(function _callee47$(_context47) {
              while (1) {
                switch (_context47.prev = _context47.next) {
                  case 0:
                    arg = _arguments21.length > 1 && _arguments21[1] !== undefined ? _arguments21[1] : {
                      preventRefresh: false
                    };
                    preventRefresh = arg.preventRefresh;

                    if (!(preventRefresh || !productStore.state.dataLoader.isTimeout() && !categoryStore.state.dataLoader.isTimeout())) {
                      _context47.next = 4;
                      break;
                    }

                    return _context47.abrupt("return", context.getters.groups);

                  case 4:
                    _context47.next = 6;
                    return context.dispatch("refresh");

                  case 6:
                    assets = {
                      categories: categoryStore.state.items,
                      products: productStore.state.items
                    };
                    groups = assets.categories.map(function (category) {
                      category.items = assets.products.filter(function (product) {
                        return product.getCategoryId() === category._id;
                      });
                      return category;
                    });
                    return _context47.abrupt("return", groups);

                  case 9:
                  case "end":
                    return _context47.stop();
                }
              }
            }, _callee47);
          }))();
        },
        getProductCategories: function getProductCategories() {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48() {
            return regeneratorRuntime.wrap(function _callee48$(_context48) {
              while (1) {
                switch (_context48.prev = _context48.next) {
                  case 0:
                    return _context48.abrupt("return", categoryStore.dispatch("getItems"));

                  case 1:
                  case "end":
                    return _context48.stop();
                }
              }
            }, _callee48);
          }))();
        },
        getProductCategoryByCategoryID: function getProductCategoryByCategoryID(context) {
          var _arguments22 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49() {
            var arg;
            return regeneratorRuntime.wrap(function _callee49$(_context49) {
              while (1) {
                switch (_context49.prev = _context49.next) {
                  case 0:
                    arg = _arguments22.length > 1 && _arguments22[1] !== undefined ? _arguments22[1] : {
                      id: id
                    };
                    return _context49.abrupt("return", categoryStore.dispatch("getItemOfId", arg));

                  case 2:
                  case "end":
                    return _context49.stop();
                }
              }
            }, _callee49);
          }))();
        },
        getProducts: function getProducts() {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50() {
            return regeneratorRuntime.wrap(function _callee50$(_context50) {
              while (1) {
                switch (_context50.prev = _context50.next) {
                  case 0:
                    return _context50.abrupt("return", productStore.dispatch("getItems"));

                  case 1:
                  case "end":
                    return _context50.stop();
                }
              }
            }, _callee50);
          }))();
        },
        getProductByID: function getProductByID(context) {
          var _arguments23 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51() {
            var arg;
            return regeneratorRuntime.wrap(function _callee51$(_context51) {
              while (1) {
                switch (_context51.prev = _context51.next) {
                  case 0:
                    arg = _arguments23.length > 1 && _arguments23[1] !== undefined ? _arguments23[1] : {
                      id: id,
                      preventRefresh: false
                    };
                    return _context51.abrupt("return", productStore.dispatch("getItemOfId", arg));

                  case 2:
                  case "end":
                    return _context51.stop();
                }
              }
            }, _callee51);
          }))();
        },
        addProduct: function addProduct(context) {
          var _arguments24 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52() {
            var arg;
            return regeneratorRuntime.wrap(function _callee52$(_context52) {
              while (1) {
                switch (_context52.prev = _context52.next) {
                  case 0:
                    arg = _arguments24.length > 1 && _arguments24[1] !== undefined ? _arguments24[1] : {
                      data: data
                    };
                    return _context52.abrupt("return", productStore.dispatch("addItem", arg));

                  case 2:
                  case "end":
                    return _context52.stop();
                }
              }
            }, _callee52);
          }))();
        },
        deleteProductbyID: function deleteProductbyID(context) {
          var _arguments25 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee53() {
            var arg;
            return regeneratorRuntime.wrap(function _callee53$(_context53) {
              while (1) {
                switch (_context53.prev = _context53.next) {
                  case 0:
                    arg = _arguments25.length > 1 && _arguments25[1] !== undefined ? _arguments25[1] : {
                      id: id
                    };
                    return _context53.abrupt("return", productStore.dispatch("removeItemOfId", arg));

                  case 2:
                  case "end":
                    return _context53.stop();
                }
              }
            }, _callee53);
          }))();
        },
        updateTitleOfProductId: function updateTitleOfProductId(context) {
          var _arguments26 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee54() {
            var arg;
            return regeneratorRuntime.wrap(function _callee54$(_context54) {
              while (1) {
                switch (_context54.prev = _context54.next) {
                  case 0:
                    arg = _arguments26.length > 1 && _arguments26[1] !== undefined ? _arguments26[1] : {
                      productId: productId,
                      title: title
                    };
                    return _context54.abrupt("return", productStore.dispatch("updateTitleOfId", {
                      id: arg.productId,
                      title: arg.title
                    }));

                  case 2:
                  case "end":
                    return _context54.stop();
                }
              }
            }, _callee54);
          }))();
        },
        updateDescriptionOfProductId: function updateDescriptionOfProductId(context) {
          var _arguments27 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee55() {
            var arg;
            return regeneratorRuntime.wrap(function _callee55$(_context55) {
              while (1) {
                switch (_context55.prev = _context55.next) {
                  case 0:
                    arg = _arguments27.length > 1 && _arguments27[1] !== undefined ? _arguments27[1] : {
                      productId: productId,
                      description: description
                    };
                    return _context55.abrupt("return", productStore.dispatch("updateDescriptionOfId", {
                      id: arg.productId,
                      description: arg.description
                    }));

                  case 2:
                  case "end":
                    return _context55.stop();
                }
              }
            }, _callee55);
          }))();
        },
        updateBrandIdOfProductId: function updateBrandIdOfProductId(context) {
          var _arguments28 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee56() {
            var arg;
            return regeneratorRuntime.wrap(function _callee56$(_context56) {
              while (1) {
                switch (_context56.prev = _context56.next) {
                  case 0:
                    arg = _arguments28.length > 1 && _arguments28[1] !== undefined ? _arguments28[1] : {
                      productId: productId,
                      brandId: brandId
                    };
                    return _context56.abrupt("return", productStore.dispatch("updateBrandIdOfId", {
                      id: arg.productId,
                      brandId: arg.brandId
                    }));

                  case 2:
                  case "end":
                    return _context56.stop();
                }
              }
            }, _callee56);
          }))();
        },
        updateCategoryIdOfProductId: function updateCategoryIdOfProductId(context) {
          var _arguments29 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee57() {
            var arg;
            return regeneratorRuntime.wrap(function _callee57$(_context57) {
              while (1) {
                switch (_context57.prev = _context57.next) {
                  case 0:
                    arg = _arguments29.length > 1 && _arguments29[1] !== undefined ? _arguments29[1] : {
                      productId: productId,
                      categoryId: categoryId
                    };
                    return _context57.abrupt("return", productStore.dispatch("updateCategoryIdOfId", {
                      id: arg.productId,
                      categoryId: arg.categoryId
                    }));

                  case 2:
                  case "end":
                    return _context57.stop();
                }
              }
            }, _callee57);
          }))();
        },
        updateAvailabilityOfProductId: function updateAvailabilityOfProductId(context) {
          var _arguments30 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee58() {
            var arg;
            return regeneratorRuntime.wrap(function _callee58$(_context58) {
              while (1) {
                switch (_context58.prev = _context58.next) {
                  case 0:
                    arg = _arguments30.length > 1 && _arguments30[1] !== undefined ? _arguments30[1] : {
                      productId: productId,
                      isAvailable: isAvailable
                    };
                    return _context58.abrupt("return", productStore.dispatch("updateAvailabilityOfId", {
                      id: arg.productId,
                      isAvailable: arg.isAvailable
                    }));

                  case 2:
                  case "end":
                    return _context58.stop();
                }
              }
            }, _callee58);
          }))();
        },
        updateSecondHandOfProductId: function updateSecondHandOfProductId(context) {
          var _arguments31 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee59() {
            var arg;
            return regeneratorRuntime.wrap(function _callee59$(_context59) {
              while (1) {
                switch (_context59.prev = _context59.next) {
                  case 0:
                    arg = _arguments31.length > 1 && _arguments31[1] !== undefined ? _arguments31[1] : {
                      productId: productId,
                      isSecondHand: isSecondHand
                    };
                    return _context59.abrupt("return", productStore.dispatch("updateSecondHandOfId", {
                      id: arg.productId,
                      isSecondHand: arg.isSecondHand
                    }));

                  case 2:
                  case "end":
                    return _context59.stop();
                }
              }
            }, _callee59);
          }))();
        },
        updatePriceOfProductId: function updatePriceOfProductId(context) {
          var _arguments32 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee60() {
            var arg;
            return regeneratorRuntime.wrap(function _callee60$(_context60) {
              while (1) {
                switch (_context60.prev = _context60.next) {
                  case 0:
                    arg = _arguments32.length > 1 && _arguments32[1] !== undefined ? _arguments32[1] : {
                      productId: productId,
                      price: price
                    };
                    return _context60.abrupt("return", productStore.dispatch("updatePriceOfId", {
                      id: arg.productId,
                      price: arg.price
                    }));

                  case 2:
                  case "end":
                    return _context60.stop();
                }
              }
            }, _callee60);
          }))();
        },
        addBundleOfProductId: function addBundleOfProductId(context) {
          var _arguments33 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee61() {
            var arg;
            return regeneratorRuntime.wrap(function _callee61$(_context61) {
              while (1) {
                switch (_context61.prev = _context61.next) {
                  case 0:
                    arg = _arguments33.length > 1 && _arguments33[1] !== undefined ? _arguments33[1] : {
                      productId: productId,
                      bundle: bundle
                    };
                    return _context61.abrupt("return", productStore.dispatch("addBundleOfId", {
                      id: arg.productId,
                      bundle: arg.bundle
                    }));

                  case 2:
                  case "end":
                    return _context61.stop();
                }
              }
            }, _callee61);
          }))();
        },
        deleteBundleOfProductId: function deleteBundleOfProductId(context) {
          var _arguments34 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee62() {
            var arg;
            return regeneratorRuntime.wrap(function _callee62$(_context62) {
              while (1) {
                switch (_context62.prev = _context62.next) {
                  case 0:
                    arg = _arguments34.length > 1 && _arguments34[1] !== undefined ? _arguments34[1] : {
                      productId: productId,
                      bundle: bundle
                    };
                    return _context62.abrupt("return", productStore.dispatch("removeBundleOfId", {
                      id: arg.productId,
                      bundle: arg.bundle
                    }));

                  case 2:
                  case "end":
                    return _context62.stop();
                }
              }
            }, _callee62);
          }))();
        },
        addGiftOfProductId: function addGiftOfProductId(context) {
          var _arguments35 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee63() {
            var arg;
            return regeneratorRuntime.wrap(function _callee63$(_context63) {
              while (1) {
                switch (_context63.prev = _context63.next) {
                  case 0:
                    arg = _arguments35.length > 1 && _arguments35[1] !== undefined ? _arguments35[1] : {
                      productId: productId,
                      gift: gift
                    };
                    return _context63.abrupt("return", productStore.dispatch("addGiftOfId", {
                      id: arg.productId,
                      gift: arg.gift
                    }));

                  case 2:
                  case "end":
                    return _context63.stop();
                }
              }
            }, _callee63);
          }))();
        },
        deleteGiftOfProductId: function deleteGiftOfProductId(context) {
          var _arguments36 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee64() {
            var arg;
            return regeneratorRuntime.wrap(function _callee64$(_context64) {
              while (1) {
                switch (_context64.prev = _context64.next) {
                  case 0:
                    arg = _arguments36.length > 1 && _arguments36[1] !== undefined ? _arguments36[1] : {
                      productId: productId,
                      gift: gift
                    };
                    return _context64.abrupt("return", productStore.dispatch("removeGiftOfId", {
                      id: arg.productId,
                      gift: arg.gift
                    }));

                  case 2:
                  case "end":
                    return _context64.stop();
                }
              }
            }, _callee64);
          }))();
        },
        addSpecificationOfProductId: function addSpecificationOfProductId(context) {
          var _arguments37 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee65() {
            var arg;
            return regeneratorRuntime.wrap(function _callee65$(_context65) {
              while (1) {
                switch (_context65.prev = _context65.next) {
                  case 0:
                    arg = _arguments37.length > 1 && _arguments37[1] !== undefined ? _arguments37[1] : {
                      productId: productId,
                      specification: specification
                    };
                    return _context65.abrupt("return", productStore.dispatch("addSpecificationOfId", {
                      id: arg.productId,
                      specification: arg.specification
                    }));

                  case 2:
                  case "end":
                    return _context65.stop();
                }
              }
            }, _callee65);
          }))();
        },
        deleteSpecificationOfProductId: function deleteSpecificationOfProductId(context) {
          var _arguments38 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee66() {
            var arg;
            return regeneratorRuntime.wrap(function _callee66$(_context66) {
              while (1) {
                switch (_context66.prev = _context66.next) {
                  case 0:
                    arg = _arguments38.length > 1 && _arguments38[1] !== undefined ? _arguments38[1] : {
                      productId: productId,
                      specification: specification
                    };
                    return _context66.abrupt("return", productStore.dispatch("removeSpecificationOfId", {
                      id: arg.productId,
                      specification: arg.specification
                    }));

                  case 2:
                  case "end":
                    return _context66.stop();
                }
              }
            }, _callee66);
          }))();
        },
        updateSpecificationsOfProductId: function updateSpecificationsOfProductId(context) {
          var _arguments39 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee67() {
            var arg;
            return regeneratorRuntime.wrap(function _callee67$(_context67) {
              while (1) {
                switch (_context67.prev = _context67.next) {
                  case 0:
                    arg = _arguments39.length > 1 && _arguments39[1] !== undefined ? _arguments39[1] : {
                      productId: productId,
                      specifications: specifications
                    };
                    return _context67.abrupt("return", productStore.dispatch("updateSpecificationsOfId", {
                      id: arg.productId,
                      specifications: arg.specifications
                    }));

                  case 2:
                  case "end":
                    return _context67.stop();
                }
              }
            }, _callee67);
          }))();
        },
        addImageOfProductId: function addImageOfProductId(context) {
          var _arguments40 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee68() {
            var arg;
            return regeneratorRuntime.wrap(function _callee68$(_context68) {
              while (1) {
                switch (_context68.prev = _context68.next) {
                  case 0:
                    arg = _arguments40.length > 1 && _arguments40[1] !== undefined ? _arguments40[1] : {
                      productId: productId,
                      imageFile: imageFile
                    };
                    return _context68.abrupt("return", productStore.dispatch("addImageOfId", {
                      id: arg.productId,
                      imageFile: arg.imageFile
                    }));

                  case 2:
                  case "end":
                    return _context68.stop();
                }
              }
            }, _callee68);
          }))();
        },
        deleteImageOfProductId: function deleteImageOfProductId(context) {
          var _arguments41 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee69() {
            var arg;
            return regeneratorRuntime.wrap(function _callee69$(_context69) {
              while (1) {
                switch (_context69.prev = _context69.next) {
                  case 0:
                    arg = _arguments41.length > 1 && _arguments41[1] !== undefined ? _arguments41[1] : {
                      productId: productId,
                      image: image
                    };
                    return _context69.abrupt("return", productStore.dispatch("removeImageOfId", {
                      id: arg.productId,
                      image: arg.image
                    }));

                  case 2:
                  case "end":
                    return _context69.stop();
                }
              }
            }, _callee69);
          }))();
        },
        getProductComboByID: function getProductComboByID(context) {
          var _arguments42 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee70() {
            var arg;
            return regeneratorRuntime.wrap(function _callee70$(_context70) {
              while (1) {
                switch (_context70.prev = _context70.next) {
                  case 0:
                    arg = _arguments42.length > 1 && _arguments42[1] !== undefined ? _arguments42[1] : {
                      id: id,
                      preventRefresh: false
                    };
                    return _context70.abrupt("return", productStore.dispatch("getItemOfId", arg));

                  case 2:
                  case "end":
                    return _context70.stop();
                }
              }
            }, _callee70);
          }))();
        }
      }
    });
    Product.BrandStore = Stores.brand;
    Product.SpecificationStore = Stores.specification;
    ProductSpecContent.SpecificationStore = Stores.specification;
    Product.ProductStore = store;
    Stores.specification.dispatch("refresh");
    return store;
  }
};"},null]}