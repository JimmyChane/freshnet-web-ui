{"remainingRequest":"C:\\dev\\freshnet-v2\\vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\dev\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\dev\\freshnet-v2\\vue\\src\\items\\Product.js","dependencies":[{"path":"C:\\dev\\freshnet-v2\\vue\\src\\items\\Product.js","mtime":1668006070206},{"path":"C:\\dev\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1662650934417},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJDOlxcZGV2XFxmcmVzaG5ldC12MlxcdnVlXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFx0b0NvbnN1bWFibGVBcnJheS5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJDOlxcZGV2XFxmcmVzaG5ldC12MlxcdnVlXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxhc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIkM6XFxkZXZcXGZyZXNobmV0LXYyXFx2dWVcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lXFxoZWxwZXJzXFxlc21cXGNyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIuanMiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkM6XFxkZXZcXGZyZXNobmV0LXYyXFx2dWVcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lXFxoZWxwZXJzXFxlc21cXGNsYXNzQ2FsbENoZWNrLmpzIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJDOlxcZGV2XFxmcmVzaG5ldC12MlxcdnVlXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxjcmVhdGVDbGFzcy5qcyI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiQzpcXGRldlxcZnJlc2huZXQtdjJcXHZ1ZVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWVcXGhlbHBlcnNcXGVzbVxcZGVmaW5lUHJvcGVydHkuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgQXBwSG9zdCBmcm9tICJAL2hvc3QvQXBwSG9zdC5qcyI7CmltcG9ydCBNb2R1bGVQcm9kdWN0IGZyb20gIkAvLi4vLi4vZXhwcmVzcy9kYXRhX3N0cnVjdHVyZXMvUHJvZHVjdC5qcyI7CmltcG9ydCBNb2R1bGVTdG9jayBmcm9tICJALy4uLy4uL2V4cHJlc3MvZGF0YV9zdHJ1Y3R1cmVzL1Byb2R1Y3RTdG9jay5qcyI7CmltcG9ydCBNb2R1bGVCdW5kbGUgZnJvbSAiQC8uLi8uLi9leHByZXNzL2RhdGFfc3RydWN0dXJlcy9Qcm9kdWN0QnVuZGxlLmpzIjsKaW1wb3J0IEltYWdlIGZyb20gIi4vSW1hZ2UuanMiOwppbXBvcnQgUHJvZHVjdFNwZWNDb250ZW50IGZyb20gIi4vUHJvZHVjdFNwZWNDb250ZW50LmpzIjsKaW1wb3J0IFByb2R1Y3RQcmljZSBmcm9tICIuL1Byb2R1Y3RQcmljZS5qcyI7CmltcG9ydCBJdGVtU2VhcmNoZXIgZnJvbSAiLi90b29scy9JdGVtU2VhcmNoZXIuanMiOwppbXBvcnQgVSBmcm9tICJAL1UuanMiOwp2YXIgdGV4dENvbnRhaW5zID0gSXRlbVNlYXJjaGVyLnRleHRDb250YWluczsKCnZhciBQcm9kdWN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQcm9kdWN0KHN0b3JlcykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb2R1Y3QpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAic3RvcmVzIiwgbnVsbCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJjYXRlZ29yeVN0b3JlIiwgbnVsbCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJwcm9kdWN0U3RvcmUiLCBudWxsKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImJyYW5kU3RvcmUiLCBudWxsKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInNwZWNpZmljYXRpb25TdG9yZSIsIG51bGwpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiaWQiLCAiIik7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJ0aXRsZSIsICIiKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImRlc2NyaXB0aW9uIiwgIiIpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiZ2lmdHMiLCBbXSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJidW5kbGVzIiwgW10pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiYnJhbmRJZCIsICIiKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImNhdGVnb3J5SWQiLCAiIik7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJzcGVjaWZpY2F0aW9ucyIsIFtdKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImltYWdlcyIsIFtdKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInByaWNlIiwgbnVsbCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJzdG9jayIsIE1vZHVsZVN0b2NrLnRyaW0oe30pKTsKCiAgICB0aGlzLnN0b3JlcyA9IHN0b3JlczsKICAgIHRoaXMuY2F0ZWdvcnlTdG9yZSA9IHN0b3Jlcy5jYXRlZ29yeTsKICAgIHRoaXMucHJvZHVjdFN0b3JlID0gc3RvcmVzLnByb2R1Y3Q7CiAgICB0aGlzLmJyYW5kU3RvcmUgPSBzdG9yZXMuYnJhbmQ7CiAgICB0aGlzLnNwZWNpZmljYXRpb25TdG9yZSA9IHN0b3Jlcy5zcGVjaWZpY2F0aW9uOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFByb2R1Y3QsIFt7CiAgICBrZXk6ICJmcm9tRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbURhdGEoZGF0YSkgewogICAgICBkYXRhID0gTW9kdWxlUHJvZHVjdC50cmltKGRhdGEpOwogICAgICBpZiAoVS5pc09iamVjdChkYXRhLmltYWdlKSAmJiBkYXRhLmltYWdlKSBkYXRhLmltYWdlcy5wdXNoKGRhdGEuaW1hZ2UpOwogICAgICB0aGlzLmlkID0gZGF0YS5faWQ7CiAgICAgIHRoaXMudGl0bGUgPSBVLm9wdFN0cmluZyhkYXRhLnRpdGxlKTsKICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFUub3B0U3RyaW5nKGRhdGEuZGVzY3JpcHRpb24pLnRyaW0oKTsKICAgICAgdGhpcy5zZXRHaWZ0cyhkYXRhLmdpZnRzKTsKICAgICAgdGhpcy5zZXRCdW5kbGVzKGRhdGEuYnVuZGxlcyk7CiAgICAgIHRoaXMuc2V0QnJhbmRJZChkYXRhLmJyYW5kSWQpOwogICAgICB0aGlzLnNldENhdGVnb3J5SWQoZGF0YS5jYXRlZ29yeUlkKTsKICAgICAgdGhpcy5zZXRTcGVjaWZpY2F0aW9ucyhkYXRhLnNwZWNpZmljYXRpb25zKTsKICAgICAgdGhpcy5zZXRJbWFnZXMoZGF0YS5pbWFnZXMpOwogICAgICB0aGlzLnNldFByaWNlKGRhdGEucHJpY2UpOwogICAgICB0aGlzLnN0b2NrID0gZGF0YS5zdG9jazsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9EYXRhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0RhdGEoKSB7CiAgICAgIHZhciBzcGVjaWZpY2F0aW9uID0ge307CgogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5zcGVjaWZpY2F0aW9ucyksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBpdGVtU3BlY2lmaWNhdGlvbiA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgc3BlY2lmaWNhdGlvbltpdGVtU3BlY2lmaWNhdGlvbi50eXBlLmtleV0gPSBpdGVtU3BlY2lmaWNhdGlvbi5jb250ZW50OwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICB9CgogICAgICB2YXIgcHJpY2UgPSB0aGlzLnByaWNlID8gdGhpcy5wcmljZSA6IHt9OwogICAgICB2YXIgcHJpY2VQcm9tb3Rpb24gPSBwcmljZS5wcm9tb3Rpb247CiAgICAgIHZhciBwcmljZU5vcm1hbCA9IHByaWNlLm5vcm1hbDsKICAgICAgcmV0dXJuIHsKICAgICAgICBfaWQ6IHRoaXMuaWQsCiAgICAgICAgdGl0bGU6IHRoaXMudGl0bGUgPyB0aGlzLnRpdGxlIDogdW5kZWZpbmVkLAogICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uID8gdGhpcy5kZXNjcmlwdGlvbiA6IHVuZGVmaW5lZCwKICAgICAgICBicmFuZElkOiBVLm9wdFN0cmluZyh0aGlzLmJyYW5kSWQpLAogICAgICAgIGNhdGVnb3J5SWQ6IFUub3B0U3RyaW5nKHRoaXMuY2F0ZWdvcnlJZCksCiAgICAgICAgc3RvY2s6IE1vZHVsZVN0b2NrLnRyaW0odGhpcy5zdG9jayksCiAgICAgICAgZ2lmdHM6IHRoaXMuZ2lmdHMubWFwKGZ1bmN0aW9uIChnaWZ0KSB7CiAgICAgICAgICByZXR1cm4gZ2lmdDsKICAgICAgICB9KSwKICAgICAgICBidW5kbGVzOiB0aGlzLmJ1bmRsZXMubWFwKGZ1bmN0aW9uIChidW5kbGUpIHsKICAgICAgICAgIHJldHVybiBNb2R1bGVCdW5kbGUudHJpbShidW5kbGUpOwogICAgICAgIH0pLAogICAgICAgIGltYWdlOiB0aGlzLmltYWdlID8gdGhpcy5pbWFnZS50b0RhdGEoKSA6IHt9LAogICAgICAgIHNwZWNpZmljYXRpb246IHNwZWNpZmljYXRpb24sCiAgICAgICAgcHJpY2U6IHsKICAgICAgICAgIG5vcm1hbDogcHJpY2VQcm9tb3Rpb24sCiAgICAgICAgICBwcm9tb3Rpb246IHByaWNlTm9ybWFsCiAgICAgICAgfQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInRvQ291bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvQ291bnQoc3RycykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGJyYW5kID0gdGhpcy5icmFuZCwKICAgICAgICAgIGNhdGVnb3J5ID0gdGhpcy5jYXRlZ29yeSwKICAgICAgICAgIHNwZWNpZmljYXRpb25zID0gdGhpcy5zcGVjaWZpY2F0aW9uczsKICAgICAgcmV0dXJuIHN0cnMucmVkdWNlKGZ1bmN0aW9uIChjb3VudCwgc3RyKSB7CiAgICAgICAgY291bnQgKz0gdGV4dENvbnRhaW5zKCJwcm9kdWN0Iiwgc3RyKSA/IDEgOiAwOwogICAgICAgIGNvdW50ICs9IHRleHRDb250YWlucyhfdGhpcy50aXRsZSwgc3RyKSA/IDEgOiAwOwogICAgICAgIGNvdW50ICs9IHRleHRDb250YWlucyhfdGhpcy5kZXNjcmlwdGlvbiwgc3RyKSA/IDEgOiAwOwogICAgICAgIGNvdW50ICs9IGJyYW5kICYmIHRleHRDb250YWlucyhicmFuZC50aXRsZSwgc3RyKSA/IDEgOiAwOwogICAgICAgIGNvdW50ICs9IGNhdGVnb3J5ICYmIHRleHRDb250YWlucyhjYXRlZ29yeS50aXRsZSwgc3RyKSA/IDEgOiAwOwogICAgICAgIGNvdW50ICs9IHNwZWNpZmljYXRpb25zLnJlZHVjZShmdW5jdGlvbiAoY291bnQsIHNwZWNDb250ZW50KSB7CiAgICAgICAgICB2YXIgdHlwZSA9IHNwZWNDb250ZW50LnR5cGUsCiAgICAgICAgICAgICAgY29udGVudCA9IHNwZWNDb250ZW50LmNvbnRlbnQ7CiAgICAgICAgICBjb3VudCArPSB0eXBlICYmIHRleHRDb250YWlucyh0eXBlLnRpdGxlLCBzdHIpID8gMSA6IDA7CiAgICAgICAgICBjb3VudCArPSB0ZXh0Q29udGFpbnMoY29udGVudCwgc3RyKSA/IDEgOiAwOwogICAgICAgICAgcmV0dXJuIGNvdW50OwogICAgICAgIH0sIDApOwogICAgICAgIHJldHVybiBjb3VudDsKICAgICAgfSwgMCk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9JbWFnZVRodW1ibmFpbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9JbWFnZVRodW1ibmFpbCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaW1hZ2VzLmxlbmd0aCA/IHRoaXMuaW1hZ2VzWzBdIDogbnVsbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wYXJlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wYXJlKGl0ZW0pIHsKICAgICAgdmFyIHZhbHVlID0gMDsKICAgICAgaWYgKHZhbHVlID09PSAwKSB2YWx1ZSA9IHRoaXMuY29tcGFyZUF2YWlsYWJsZShpdGVtKTsKICAgICAgaWYgKHZhbHVlID09PSAwKSB2YWx1ZSA9IHRoaXMuY29tcGFyZVByb21vdGlvbnMoaXRlbSk7CiAgICAgIGlmICh2YWx1ZSA9PT0gMCkgdmFsdWUgPSB0aGlzLmNvbXBhcmVTZWNvbmRIYW5kKGl0ZW0pOwogICAgICBpZiAodmFsdWUgPT09IDApIHZhbHVlID0gdGhpcy5jb21wYXJlSW1hZ2UoaXRlbSk7CiAgICAgIGlmICh2YWx1ZSA9PT0gMCkgdmFsdWUgPSB0aGlzLmNvbXBhcmVQcmljZXMoaXRlbSk7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wYXJlQXZhaWxhYmxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wYXJlQXZhaWxhYmxlKGl0ZW0pIHsKICAgICAgdmFyIF90aGlzJHN0b2NrLCBfaXRlbSRzdG9jaywgX3N0b2NrMSRpc0F2YWlsYWJsZSwgX3N0b2NrMiRpc0F2YWlsYWJsZTsKCiAgICAgIHZhciBzdG9jazEgPSAoX3RoaXMkc3RvY2sgPSB0aGlzLnN0b2NrKSAhPT0gbnVsbCAmJiBfdGhpcyRzdG9jayAhPT0gdm9pZCAwID8gX3RoaXMkc3RvY2sgOiB7CiAgICAgICAgaXNBdmFpbGFibGU6IHRydWUsCiAgICAgICAgaXNTZWNvbmRIYW5kOiBmYWxzZQogICAgICB9OwogICAgICB2YXIgc3RvY2syID0gKF9pdGVtJHN0b2NrID0gaXRlbS5zdG9jaykgIT09IG51bGwgJiYgX2l0ZW0kc3RvY2sgIT09IHZvaWQgMCA/IF9pdGVtJHN0b2NrIDogewogICAgICAgIGlzQXZhaWxhYmxlOiB0cnVlLAogICAgICAgIGlzU2Vjb25kSGFuZDogZmFsc2UKICAgICAgfTsKICAgICAgdmFyIGlzQXZhaWxhYmxlMSA9IChfc3RvY2sxJGlzQXZhaWxhYmxlID0gc3RvY2sxLmlzQXZhaWxhYmxlKSAhPT0gbnVsbCAmJiBfc3RvY2sxJGlzQXZhaWxhYmxlICE9PSB2b2lkIDAgPyBfc3RvY2sxJGlzQXZhaWxhYmxlIDogdHJ1ZTsKICAgICAgdmFyIGlzQXZhaWxhYmxlMiA9IChfc3RvY2syJGlzQXZhaWxhYmxlID0gc3RvY2syLmlzQXZhaWxhYmxlKSAhPT0gbnVsbCAmJiBfc3RvY2syJGlzQXZhaWxhYmxlICE9PSB2b2lkIDAgPyBfc3RvY2syJGlzQXZhaWxhYmxlIDogdHJ1ZTsKICAgICAgaWYgKGlzQXZhaWxhYmxlMSAmJiAhaXNBdmFpbGFibGUyKSByZXR1cm4gLTE7CiAgICAgIGlmICghaXNBdmFpbGFibGUxICYmIGlzQXZhaWxhYmxlMikgcmV0dXJuIDE7CiAgICAgIHJldHVybiAwOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBhcmVJbWFnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcGFyZUltYWdlKGl0ZW0pIHsKICAgICAgaWYgKHRoaXMuaW1hZ2UgJiYgIWl0ZW0uaW1hZ2UpIHJldHVybiAtMTsKICAgICAgaWYgKCF0aGlzLmltYWdlICYmIGl0ZW0uaW1hZ2UpIHJldHVybiAxOwogICAgICByZXR1cm4gMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wYXJlUHJvbW90aW9ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcGFyZVByb21vdGlvbnMoaXRlbSkgewogICAgICB2YXIgcHJpY2UxID0gdGhpcy5wcmljZTsKICAgICAgdmFyIHByaWNlMiA9IGl0ZW0ucHJpY2U7CiAgICAgIHZhciBwcm9tb3Rpb24xID0gcHJpY2UxID8gVS5vcHRTdHJpbmcocHJpY2UxLnByb21vdGlvbikudHJpbSgpIDogIiI7CiAgICAgIHZhciBwcm9tb3Rpb24yID0gcHJpY2UyID8gVS5vcHRTdHJpbmcocHJpY2UyLnByb21vdGlvbikudHJpbSgpIDogIiI7CiAgICAgIHZhciBoYXNQcm9tb3Rpb24xID0gcHJvbW90aW9uMS5sZW5ndGggPiAwOwogICAgICB2YXIgaGFzUHJvbW90aW9uMiA9IHByb21vdGlvbjIubGVuZ3RoID4gMDsKICAgICAgaWYgKGhhc1Byb21vdGlvbjEgJiYgIWhhc1Byb21vdGlvbjIpIHJldHVybiAtMTsKICAgICAgaWYgKCFoYXNQcm9tb3Rpb24xICYmIGhhc1Byb21vdGlvbjIpIHJldHVybiAxOwogICAgICByZXR1cm4gMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wYXJlUHJpY2VzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wYXJlUHJpY2VzKGl0ZW0pIHsKICAgICAgdmFyIHByaWNlMSA9IHRoaXMucHJpY2U7CiAgICAgIHZhciBwcmljZTIgPSBpdGVtLnByaWNlOwogICAgICB2YXIgbm9ybWFsMSA9IHByaWNlMSA/IFUub3B0U3RyaW5nKHByaWNlMS5ub3JtYWwpLnRyaW0oKSA6ICIiOwogICAgICB2YXIgbm9ybWFsMiA9IHByaWNlMiA/IFUub3B0U3RyaW5nKHByaWNlMi5ub3JtYWwpLnRyaW0oKSA6ICIiOwogICAgICBpZiAoIW5vcm1hbDEgJiYgbm9ybWFsMikgcmV0dXJuIDE7CiAgICAgIGlmIChub3JtYWwxICYmICFub3JtYWwyKSByZXR1cm4gLTE7CiAgICAgIGlmIChub3JtYWwxID4gbm9ybWFsMikgcmV0dXJuIC0xOwogICAgICBpZiAobm9ybWFsMSA8IG5vcm1hbDIpIHJldHVybiAxOwogICAgICByZXR1cm4gMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wYXJlU2Vjb25kSGFuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcGFyZVNlY29uZEhhbmQoaXRlbSkgewogICAgICB2YXIgX3RoaXMkc3RvY2syLCBfaXRlbSRzdG9jazIsIF9zdG9jazEkaXNTZWNvbmRIYW5kLCBfc3RvY2syJGlzU2Vjb25kSGFuZDsKCiAgICAgIHZhciBzdG9jazEgPSAoX3RoaXMkc3RvY2syID0gdGhpcy5zdG9jaykgIT09IG51bGwgJiYgX3RoaXMkc3RvY2syICE9PSB2b2lkIDAgPyBfdGhpcyRzdG9jazIgOiB7CiAgICAgICAgaXNBdmFpbGFibGU6IHRydWUsCiAgICAgICAgaXNTZWNvbmRIYW5kOiBmYWxzZQogICAgICB9OwogICAgICB2YXIgc3RvY2syID0gKF9pdGVtJHN0b2NrMiA9IGl0ZW0uc3RvY2spICE9PSBudWxsICYmIF9pdGVtJHN0b2NrMiAhPT0gdm9pZCAwID8gX2l0ZW0kc3RvY2syIDogewogICAgICAgIGlzQXZhaWxhYmxlOiB0cnVlLAogICAgICAgIGlzU2Vjb25kSGFuZDogZmFsc2UKICAgICAgfTsKICAgICAgdmFyIGlzU2Vjb25kSGFuZDEgPSAoX3N0b2NrMSRpc1NlY29uZEhhbmQgPSBzdG9jazEuaXNTZWNvbmRIYW5kKSAhPT0gbnVsbCAmJiBfc3RvY2sxJGlzU2Vjb25kSGFuZCAhPT0gdm9pZCAwID8gX3N0b2NrMSRpc1NlY29uZEhhbmQgOiBmYWxzZTsKICAgICAgdmFyIGlzU2Vjb25kSGFuZDIgPSAoX3N0b2NrMiRpc1NlY29uZEhhbmQgPSBzdG9jazIuaXNTZWNvbmRIYW5kKSAhPT0gbnVsbCAmJiBfc3RvY2syJGlzU2Vjb25kSGFuZCAhPT0gdm9pZCAwID8gX3N0b2NrMiRpc1NlY29uZEhhbmQgOiBmYWxzZTsKICAgICAgaWYgKGlzU2Vjb25kSGFuZDEgJiYgIWlzU2Vjb25kSGFuZDIpIHJldHVybiAxOwogICAgICBpZiAoIWlzU2Vjb25kSGFuZDEgJiYgaXNTZWNvbmRIYW5kMikgcmV0dXJuIC0xOwogICAgICByZXR1cm4gMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRQcmljZU5vcm1hbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJpY2VOb3JtYWwoKSB7CiAgICAgIHJldHVybiB0aGlzLnByaWNlID8gdGhpcy5wcmljZS5ub3JtYWwgOiBudWxsOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFByaWNlUHJvbW90aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcmljZVByb21vdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMucHJpY2UgPyB0aGlzLnByaWNlLnByb21vdGlvbiA6IG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UHJpY2VOb3JtYWxWYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJpY2VOb3JtYWxWYWx1ZSgpIHsKICAgICAgdmFyIG5vcm1hbCA9IHRoaXMuZ2V0UHJpY2VOb3JtYWwoKTsKICAgICAgcmV0dXJuIG5vcm1hbCA/IG5vcm1hbC52YWx1ZSA6IDA7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UHJpY2VQcm9tb3Rpb25WYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJpY2VQcm9tb3Rpb25WYWx1ZSgpIHsKICAgICAgdmFyIHByb21vdGlvbiA9IHRoaXMuZ2V0UHJpY2VQcm9tb3Rpb24oKTsKICAgICAgcmV0dXJuIHByb21vdGlvbiA/IHByb21vdGlvbi52YWx1ZSA6IDA7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TGluayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGluaygpIHsKICAgICAgcmV0dXJuICIiLmNvbmNhdChBcHBIb3N0LnBhdGgsICIvaXRlbS9pZC8iKS5jb25jYXQodGhpcy5pZCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZmV0Y2hCcmFuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2ZldGNoQnJhbmQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICAgIHZhciBicmFuZHM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKHRoaXMuYnJhbmRJZCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgbnVsbCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnJhbmRTdG9yZS5kaXNwYXRjaCgiZ2V0SXRlbXMiKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgYnJhbmRzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGJyYW5kcy5maW5kKGZ1bmN0aW9uIChicmFuZCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gYnJhbmQuaWQgPT09IF90aGlzMi5icmFuZElkOwogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZmV0Y2hCcmFuZCgpIHsKICAgICAgICByZXR1cm4gX2ZldGNoQnJhbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZldGNoQnJhbmQ7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJmZXRjaEZ1bGxUaXRsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2ZldGNoRnVsbFRpdGxlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgdGl0bGUsIGJyYW5kLCBicmFuZFRpdGxlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aXRsZSA9IHRoaXMudGl0bGU7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaEJyYW5kKCk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGJyYW5kID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBicmFuZFRpdGxlID0gYnJhbmQgPyBicmFuZC50aXRsZSA6ICIiOwoKICAgICAgICAgICAgICAgIGlmICghKCFicmFuZFRpdGxlICYmICF0aXRsZSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgIiIpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBpZiAoIShicmFuZFRpdGxlICYmIHRpdGxlKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCAiIi5jb25jYXQoYnJhbmRUaXRsZSwgIiAiKS5jb25jYXQodGl0bGUpKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgaWYgKCF0aXRsZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgdGl0bGUpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgaWYgKCFicmFuZFRpdGxlKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBicmFuZFRpdGxlKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCAiIik7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBmZXRjaEZ1bGxUaXRsZSgpIHsKICAgICAgICByZXR1cm4gX2ZldGNoRnVsbFRpdGxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmZXRjaEZ1bGxUaXRsZTsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImZldGNoQ2F0ZWdvcnkiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9mZXRjaENhdGVnb3J5ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgICAgdmFyIGNhdGVnb3JpZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhdGVnb3J5SWQpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgbnVsbCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNhdGVnb3J5U3RvcmUuZGlzcGF0Y2goImdldEl0ZW1zIik7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIGNhdGVnb3JpZXMgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBjYXRlZ29yaWVzLmZpbmQoZnVuY3Rpb24gKGNhdGVnb3J5KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjYXRlZ29yeS5pZCA9PT0gX3RoaXMzLmNhdGVnb3J5SWQ7CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMywgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGZldGNoQ2F0ZWdvcnkoKSB7CiAgICAgICAgcmV0dXJuIF9mZXRjaENhdGVnb3J5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmZXRjaENhdGVnb3J5OwogICAgfSgpCiAgfSwgewogICAga2V5OiAiaXNQcmljZVByb21vdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNQcmljZVByb21vdGlvbigpIHsKICAgICAgdmFyIHByaWNlID0gdGhpcy5wcmljZTsKICAgICAgaWYgKCFwcmljZSkgcmV0dXJuIGZhbHNlOwogICAgICB2YXIgbm9ybWFsVmFsdWUgPSBwcmljZS5ub3JtYWwgPyBwcmljZS5ub3JtYWwudmFsdWUgOiAwOwogICAgICB2YXIgcHJvbW90aW9uVmFsdWUgPSBwcmljZS5ub3JtYWwgPyBwcmljZS5wcm9tb3Rpb24udmFsdWUgOiAwOwogICAgICByZXR1cm4gbm9ybWFsVmFsdWUgPiAwICYmIHByb21vdGlvblZhbHVlID4gMCAmJiBub3JtYWxWYWx1ZSA+IHByb21vdGlvblZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogImlzU3RvY2tBdmFpbGFibGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzU3RvY2tBdmFpbGFibGUoKSB7CiAgICAgIHZhciBzdG9jayA9IHRoaXMuc3RvY2s7CiAgICAgIHJldHVybiBzdG9jayA/IHN0b2NrLmlzQXZhaWxhYmxlIDogdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1N0b2NrU2Vjb25kSGFuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNTdG9ja1NlY29uZEhhbmQoKSB7CiAgICAgIHZhciBzdG9jayA9IHRoaXMuc3RvY2s7CiAgICAgIHJldHVybiBzdG9jayA/IHN0b2NrLmlzU2Vjb25kSGFuZCA6IGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInNldEJyYW5kSWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldEJyYW5kSWQoYnJhbmRJZCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHRoaXMuYnJhbmRJZCA9IGJyYW5kSWQ7CiAgICAgIHRoaXMuZmV0Y2hCcmFuZCgpLnRoZW4oZnVuY3Rpb24gKGJyYW5kKSB7CiAgICAgICAgcmV0dXJuIF90aGlzNC5icmFuZCA9IGJyYW5kOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRDYXRlZ29yeUlkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDYXRlZ29yeUlkKGNhdGVnb3J5SWQpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICB0aGlzLmNhdGVnb3J5SWQgPSBjYXRlZ29yeUlkOwogICAgICB0aGlzLmZldGNoQ2F0ZWdvcnkoKS50aGVuKGZ1bmN0aW9uIChjYXRlZ29yeSkgewogICAgICAgIHJldHVybiBfdGhpczUuY2F0ZWdvcnkgPSBjYXRlZ29yeTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0UHJpY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByaWNlKHByaWNlKSB7CiAgICAgIHZhciBfcmVmID0gcHJpY2UgPyBwcmljZSA6IHt9LAogICAgICAgICAgbm9ybWFsID0gX3JlZi5ub3JtYWwsCiAgICAgICAgICBwcm9tb3Rpb24gPSBfcmVmLnByb21vdGlvbjsKCiAgICAgIHRoaXMucHJpY2UgPSB7CiAgICAgICAgbm9ybWFsOiBQcm9kdWN0UHJpY2UucGFyc2VTdHJpbmcoVS5pc1N0cmluZyhub3JtYWwpID8gbm9ybWFsIDogIiIpLAogICAgICAgIHByb21vdGlvbjogUHJvZHVjdFByaWNlLnBhcnNlU3RyaW5nKFUuaXNTdHJpbmcocHJvbW90aW9uKSA/IHByb21vdGlvbiA6ICIiKQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInNldEltYWdlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SW1hZ2VzKGltYWdlcykgewogICAgICB0aGlzLmltYWdlcyA9IGltYWdlcy5maWx0ZXIoZnVuY3Rpb24gKGltYWdlKSB7CiAgICAgICAgcmV0dXJuIFUuaXNTdHJpbmcoaW1hZ2UubWV0aG9kKSAmJiBVLmlzU3RyaW5nKGltYWdlLnBhdGgpOwogICAgICB9KS5tYXAoZnVuY3Rpb24gKGltYWdlKSB7CiAgICAgICAgcmV0dXJuIG5ldyBJbWFnZSgpLmZyb21EYXRhKHsKICAgICAgICAgIG1ldGhvZDogaW1hZ2UubWV0aG9kLAogICAgICAgICAgcGF0aDogaW1hZ2UucGF0aAogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGRJbWFnZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEltYWdlcyhpbWFnZXMpIHsKICAgICAgdmFyIF90aGlzJGltYWdlczsKCiAgICAgIChfdGhpcyRpbWFnZXMgPSB0aGlzLmltYWdlcykucHVzaC5hcHBseShfdGhpcyRpbWFnZXMsIF90b0NvbnN1bWFibGVBcnJheShpbWFnZXMubWFwKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgcmV0dXJuIG5ldyBJbWFnZSgpLmZyb21EYXRhKGRhdGEpOwogICAgICB9KSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbW92ZUltYWdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVJbWFnZShpbWFnZSkgewogICAgICB0aGlzLmltYWdlcyA9IHRoaXMuaW1hZ2VzLmZpbHRlcihmdW5jdGlvbiAodGhpc0ltYWdlKSB7CiAgICAgICAgcmV0dXJuIHRoaXNJbWFnZS5wYXRoICE9PSBpbWFnZS5wYXRoOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRTcGVjaWZpY2F0aW9ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3BlY2lmaWNhdGlvbnMoKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdmFyIHNwZWNpZmljYXRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTsKICAgICAgdGhpcy5zcGVjaWZpY2F0aW9ucyA9IHNwZWNpZmljYXRpb25zLm1hcChmdW5jdGlvbiAoc3BlY2lmaWNhdGlvbikgewogICAgICAgIHJldHVybiBuZXcgUHJvZHVjdFNwZWNDb250ZW50KF90aGlzNi5zdG9yZXMpLmZyb21EYXRhKHsKICAgICAgICAgIGtleTogc3BlY2lmaWNhdGlvbi50eXBlLAogICAgICAgICAgY29udGVudDogc3BlY2lmaWNhdGlvbi5jb250ZW50CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZFNwZWNpZmljYXRpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNwZWNpZmljYXRpb24oc3BlY2lmaWNhdGlvbikgewogICAgICB2YXIgX3RoaXM3ID0gdGhpczsKCiAgICAgIG5ldyBQcm9kdWN0U3BlY0NvbnRlbnQoKS5mcm9tRGF0YSh7CiAgICAgICAga2V5OiBzcGVjaWZpY2F0aW9uLnR5cGUsCiAgICAgICAgY29udGVudDogc3BlY2lmaWNhdGlvbi5jb250ZW50CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNwZWMpIHsKICAgICAgICBfdGhpczcuc3BlY2lmaWNhdGlvbi5wdXNoKHNwZWMpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW1vdmVTcGVjaWZpY2F0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTcGVjaWZpY2F0aW9uKHNwZWNpZmljYXRpb24pIHsKICAgICAgdGhpcy5zcGVjaWZpY2F0aW9ucyA9IHRoaXMuc3BlY2lmaWNhdGlvbnMuZmlsdGVyKGZ1bmN0aW9uICh0aGlzU3BlY2lmaWNhdGlvbikgewogICAgICAgIHJldHVybiAhKHRoaXNTcGVjaWZpY2F0aW9uLnR5cGUgPT09IHNwZWNpZmljYXRpb24udHlwZSAmJiB0aGlzU3BlY2lmaWNhdGlvbi5jb250ZW50ID09PSBzcGVjaWZpY2F0aW9uLmNvbnRlbnQpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRCdW5kbGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRCdW5kbGVzKCkgewogICAgICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107CiAgICAgIHRoaXMuYnVuZGxlcyA9IChBcnJheS5pc0FycmF5KGRhdGEpID8gZGF0YSA6IFtdKS5tYXAoZnVuY3Rpb24gKGJ1bmRsZSkgewogICAgICAgIHJldHVybiBNb2R1bGVCdW5kbGUudHJpbShidW5kbGUpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGRCdW5kbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEJ1bmRsZShidW5kbGUpIHsKICAgICAgdGhpcy5idW5kbGVzLnB1c2goYnVuZGxlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW1vdmVCdW5kbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUJ1bmRsZShidW5kbGUpIHsKICAgICAgdGhpcy5idW5kbGVzID0gdGhpcy5idW5kbGVzLmZpbHRlcihmdW5jdGlvbiAodGhpc0J1bmRsZSkgewogICAgICAgIHJldHVybiB0aGlzQnVuZGxlLnRpdGxlICE9PSBidW5kbGUudGl0bGU7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInNldEdpZnRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRHaWZ0cygpIHsKICAgICAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdOwogICAgICB0aGlzLmdpZnRzID0gKEFycmF5LmlzQXJyYXkoZGF0YSkgPyBkYXRhIDogW10pLm1hcChmdW5jdGlvbiAoZ2lmdCkgewogICAgICAgIHJldHVybiBVLmlzU3RyaW5nKGdpZnQpID8gZ2lmdC50cmltKCkgOiAiIjsKICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChnaWZ0KSB7CiAgICAgICAgcmV0dXJuIGdpZnQ7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZEdpZnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEdpZnQoZ2lmdCkgewogICAgICB0aGlzLmdpZnRzLnB1c2goZ2lmdCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVtb3ZlR2lmdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlR2lmdChnaWZ0KSB7CiAgICAgIHRoaXMuZ2lmdHMgPSB0aGlzLmdpZnRzLmZpbHRlcihmdW5jdGlvbiAodGhpc0dpZnQpIHsKICAgICAgICByZXR1cm4gdGhpc0dpZnQgIT09IGdpZnQ7CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFByb2R1Y3Q7Cn0oKTsKCmV4cG9ydCBkZWZhdWx0IFByb2R1Y3Q7"},null]}