{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\development\\freshnet-v2\\vue\\src\\pages\\setting\\ItemSetting.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\pages\\setting\\ItemSetting.vue","mtime":1663518638165},{"path":"C:\\development\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1662650934771}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgVG9nZ2xlQnV0dG9uIGZyb20gIkAvY29tcG9uZW50cy9idXR0b24vVG9nZ2xlQnV0dG9uLnZ1ZSI7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBUb2dnbGVCdXR0b246IFRvZ2dsZUJ1dHRvbgogIH0sCiAgcHJvcHM6IHsKICAgIHNldHRpbmdLZXk6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAiIgogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGlzTG9hZGluZzogZnVuY3Rpb24gaXNMb2FkaW5nKGMpIHsKICAgICAgcmV0dXJuIGMuc2V0dGluZ1N0b3JlLmdldHRlcnMuaXNMb2FkaW5nOwogICAgfSwKICAgIHNldHRpbmc6IGZ1bmN0aW9uIHNldHRpbmcoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gdGhpcy5zZXR0aW5nU3RvcmUuZ2V0dGVycy5pdGVtcy5maW5kKGZ1bmN0aW9uIChzZXR0aW5nKSB7CiAgICAgICAgcmV0dXJuIHNldHRpbmcua2V5ID09PSBfdGhpcy5zZXR0aW5nS2V5OwogICAgICB9KTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHZhbHVlKSB7CiAgICAgIHZhciBfdGhpcyRzZXR0aW5nOwoKICAgICAgdmFyIGtleSA9IChfdGhpcyRzZXR0aW5nID0gdGhpcy5zZXR0aW5nKSA9PT0gbnVsbCB8fCBfdGhpcyRzZXR0aW5nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRzZXR0aW5nLmtleTsKICAgICAgdGhpcy5zZXR0aW5nU3RvcmUuZGlzcGF0Y2goInVwZGF0ZUl0ZW0iLCB7CiAgICAgICAga2V5OiBrZXksCiAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgIH0pOwogICAgfQogIH0KfTs="},{"version":3,"sources":["ItemSetting.vue"],"names":[],"mappings":";;AACA,OAAA,YAAA,MAAA,sCAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GADA;AAEA,EAAA,KAAA,EAAA;AAAA,IAAA,UAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA;AAAA;AAAA,GAFA;AAGA,EAAA,QAAA,EAAA;AACA,IAAA,SAAA,EAAA,mBAAA,CAAA;AAAA,aAAA,CAAA,CAAA,YAAA,CAAA,OAAA,CAAA,SAAA;AAAA,KADA;AAEA,IAAA,OAFA,qBAEA;AAAA;;AACA,aAAA,KAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,OAAA,EAAA;AACA,eAAA,OAAA,CAAA,GAAA,KAAA,KAAA,CAAA,UAAA;AACA,OAFA,CAAA;AAGA;AANA,GAHA;AAWA,EAAA,OAAA,EAAA;AACA,IAAA,MADA,kBACA,KADA,EACA;AAAA;;AACA,UAAA,GAAA,oBAAA,KAAA,OAAA,kDAAA,cAAA,GAAA;AACA,WAAA,YAAA,CAAA,QAAA,CAAA,YAAA,EAAA;AAAA,QAAA,GAAA,EAAA,GAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA;AACA;AAJA;AAXA,CAAA","sourcesContent":["<script>\r\n   import ToggleButton from \"@/components/button/ToggleButton.vue\";\r\n\r\n   export default {\r\n      components: { ToggleButton },\r\n      props: { settingKey: { type: String, default: \"\" } },\r\n      computed: {\r\n         isLoading: (c) => c.settingStore.getters.isLoading,\r\n         setting() {\r\n            return this.settingStore.getters.items.find((setting) => {\r\n               return setting.key === this.settingKey;\r\n            });\r\n         },\r\n      },\r\n      methods: {\r\n         update(value) {\r\n            let key = this.setting?.key;\r\n            this.settingStore.dispatch(\"updateItem\", { key: key, value });\r\n         },\r\n      },\r\n   };\r\n</script>\r\n\r\n<template>\r\n   <div class=\"ItemSetting\" @click=\"$refs.toggleButton.$el.click()\">\r\n      <span class=\"ItemSetting-title\">{{ setting.title }}</span>\r\n      <ToggleButton\r\n         class=\"ItemSetting-value\"\r\n         ref=\"toggleButton\"\r\n         :isLoading=\"isLoading\"\r\n         :isToggled=\"setting.value\"\r\n         @click-toggle=\"(toggle) => update(toggle)\"\r\n      />\r\n   </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n   .ItemSetting {\r\n      width: 100%;\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      gap: 2rem;\r\n      padding: 1rem 0.8rem;\r\n\r\n      background-color: hsla(0, 0%, 100%, 0.6);\r\n      transition: var(--animation-duration);\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n         background-color: white;\r\n      }\r\n   }\r\n</style>\r\n"],"sourceRoot":"src/pages/setting"}]}