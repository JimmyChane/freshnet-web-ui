{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\development\\freshnet-v2\\vue\\src\\pages\\product\\views\\browse\\PageProductBrowse.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\pages\\product\\views\\browse\\PageProductBrowse.vue","mtime":1662650937432},{"path":"C:\\development\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1662650934417},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1662650934771}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}