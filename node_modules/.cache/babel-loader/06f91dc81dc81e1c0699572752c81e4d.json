{"remainingRequest":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\development\\freshnet-v2\\vue\\src\\stores\\store.user.js","dependencies":[{"path":"C:\\development\\freshnet-v2\\vue\\src\\stores\\store.user.js","mtime":1663428828248},{"path":"C:\\development\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\development\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6XFxkZXZlbG9wbWVudFxcZnJlc2huZXQtdjJcXHZ1ZVxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWVcXGhlbHBlcnNcXGVzbVxcYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0IFZ1ZXggZnJvbSAidnVleCI7CmltcG9ydCBBcGlIb3N0IGZyb20gIi4uL2hvc3QvQXBpSG9zdC5qcyI7CmltcG9ydCBJdGVtVXNlciBmcm9tICIuLi9pdGVtcy9Vc2VyLmpzIjsKaW1wb3J0IERhdGFMb2FkZXIgZnJvbSAiLi9jb21wb25lbnRzL0RhdGFMb2FkZXIiOwppbXBvcnQgUHJvY2Vzc29yIGZyb20gIi4vY29tcG9uZW50cy9Qcm9jZXNzb3IuanMiOwpleHBvcnQgZGVmYXVsdCB7CiAgaW5pdDogZnVuY3Rpb24gaW5pdChTdG9yZXMpIHsKICAgIHZhciBsb2dpblN0b3JlID0gU3RvcmVzLmxvZ2luOwogICAgdmFyIHN0b3JlID0gbmV3IFZ1ZXguU3RvcmUoewogICAgICBzdGF0ZTogewogICAgICAgIGRhdGFMb2FkZXI6IG5ldyBEYXRhTG9hZGVyKHsKICAgICAgICAgIHRpbWVvdXQ6IDEwMDAgKiA1CiAgICAgICAgfSkgLy8gNXNlYwogICAgICAgIC5wcm9jZXNzb3IoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHN0b3JlLnN0YXRlLnByb2Nlc3NvcjsKICAgICAgICB9KS5sb2FkRGF0YSggLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICAgIHZhciB1c2VyLCBhcGksIGNvbnRlbnRzOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2luU3RvcmUuZGlzcGF0Y2goImdldFVzZXIiKTsKCiAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIHVzZXIgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICAgICAgaWYgKCEoIXVzZXIgfHwgIXVzZXIuaXNUeXBlQWRtaW4oKSkpIHsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7CgogICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgcmV0dXJuIEFwaUhvc3QucmVxdWVzdCgpLnVybCgidXNlcnMiKS5zZW5kKCk7CgogICAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgICBhcGkgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGFwaS5nZXRDb250ZW50KCk7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGNvbnRlbnRzLm1hcChmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSXRlbVVzZXIoZGF0YSk7CiAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIF9jYWxsZWUpOwogICAgICAgIH0pKSkuc2V0RGF0YShmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgcmV0dXJuIHN0b3JlLmNvbW1pdCgiaXRlbXMiLCBBcnJheS5pc0FycmF5KGRhdGEpID8gZGF0YSA6IFtdKTsKICAgICAgICB9KS5nZXREYXRhKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBzdG9yZS5nZXR0ZXJzLml0ZW1zOwogICAgICAgIH0pLAogICAgICAgIGl0ZW1zOiBbXSwKICAgICAgICBwcm9jZXNzb3I6IG5ldyBQcm9jZXNzb3IoKQogICAgICB9LAogICAgICBtdXRhdGlvbnM6IHsKICAgICAgICBpdGVtczogZnVuY3Rpb24gaXRlbXMoc3RhdGUsIF9pdGVtcykgewogICAgICAgICAgcmV0dXJuIHN0YXRlLml0ZW1zID0gQXJyYXkuaXNBcnJheShfaXRlbXMpID8gX2l0ZW1zIDogW107CiAgICAgICAgfQogICAgICB9LAogICAgICBnZXR0ZXJzOiB7CiAgICAgICAgaXNMb2FkaW5nOiBmdW5jdGlvbiBpc0xvYWRpbmcoc3RhdGUpIHsKICAgICAgICAgIHJldHVybiBzdGF0ZS5wcm9jZXNzb3IuaXNMb2FkaW5nKCk7CiAgICAgICAgfSwKICAgICAgICB0b2tlbjogZnVuY3Rpb24gdG9rZW4oKSB7CiAgICAgICAgICByZXR1cm4gbG9naW5TdG9yZS5nZXR0ZXJzLnRva2VuOwogICAgICAgIH0sCiAgICAgICAgaXRlbXM6IGZ1bmN0aW9uIGl0ZW1zKHN0YXRlKSB7CiAgICAgICAgICByZXR1cm4gc3RhdGUuaXRlbXMubWFwKGZ1bmN0aW9uICh1c2VyKSB7CiAgICAgICAgICAgIHJldHVybiB1c2VyOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBhY3Rpb25zOiB7CiAgICAgICAgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaChjb250ZXh0KSB7CiAgICAgICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgY29udGV4dC5zdGF0ZS5wcm9jZXNzb3IuYWNxdWlyZSgicmVmcmVzaCIsIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdGF0ZS5kYXRhTG9hZGVyLmRvVGltZW91dCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmRpc3BhdGNoKCJnZXRVc2VycyIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICAgICAgICAgICAgICAgIH0pKSkpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICAgICAgfSkpKCk7CiAgICAgICAgfSwKICAgICAgICBnZXRVc2VyczogZnVuY3Rpb24gZ2V0VXNlcnMoY29udGV4dCkgewogICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuc3RhdGUucHJvY2Vzc29yLmFjcXVpcmUoImdldFVzZXJzIiwgLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnN0YXRlLmRhdGFMb2FkZXIuZGF0YSgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0NC5zZW50KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgICAgICAgICAgICAgICB9KSkpKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9jYWxsZWU1KTsKICAgICAgICAgIH0pKSgpOwogICAgICAgIH0sCiAgICAgICAgZ2V0VXNlckJ5VXNlcm5hbWU6IGZ1bmN0aW9uIGdldFVzZXJCeVVzZXJuYW1lKGNvbnRleHQpIHsKICAgICAgICAgIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzOwogICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7CiAgICAgICAgICAgIHZhciBhcmc7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50cy5sZW5ndGggPiAxICYmIF9hcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmd1bWVudHNbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LnN0YXRlLnByb2Nlc3Nvci5hY3F1aXJlKCJnZXRVc2VyQnlVc2VybmFtZSIsIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJzOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5kaXNwYXRjaCgiZ2V0VXNlcnMiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJzID0gX2NvbnRleHQ2LnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCB1c2Vycy5maW5kKGZ1bmN0aW9uICh1c2VyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXIuZ2V0VXNlcm5hbWUoKSA9PT0gYXJnLnVzZXJuYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlNik7CiAgICAgICAgICAgICAgICAgICAgfSkpKSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlNyk7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9LAogICAgICAgIGFkZFVzZXI6IGZ1bmN0aW9uIGFkZFVzZXIoY29udGV4dCkgewogICAgICAgICAgdmFyIF9hcmd1bWVudHMyID0gYXJndW1lbnRzOwogICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoKSB7CiAgICAgICAgICAgIHZhciBhcmc7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ5LnByZXYgPSBfY29udGV4dDkubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czIubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzMlsxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50czJbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmROZXc6IHBhc3N3b3JkTmV3LAogICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmRSZXBlYXQ6IHBhc3N3b3JkUmVwZWF0CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdCgicmV0dXJuIiwgY29udGV4dC5zdGF0ZS5wcm9jZXNzb3IuYWNxdWlyZSgiYWRkVXNlciIsIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXIsIGFwaSwgY29udGVudCwgbmV3VXNlciwgdXNlcnM7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTgkKF9jb250ZXh0OCkgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dpblN0b3JlLmRpc3BhdGNoKCJnZXRVc2VyIik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyID0gX2NvbnRleHQ4LnNlbnQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISghdXNlciAmJiAhdXNlci5pc1R5cGVBZG1pbigpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBcGlIb3N0LnJlcXVlc3QoKS51cmwoInVzZXJzL3VzZXIiKS5QT1NUKCkuYm9keSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IGFyZy51c2VybmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBhcmcubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZE5ldzogYXJnLnBhc3N3b3JkTmV3LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkUmVwZWF0OiBhcmcucGFzc3dvcmRSZXBlYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuc2VuZCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpID0gX2NvbnRleHQ4LnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBhcGkuZ2V0Q29udGVudCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdVc2VyID0gbmV3IEl0ZW1Vc2VyKGNvbnRlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VycyA9IGNvbnRleHQuZ2V0dGVycy5pdGVtczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnMucHVzaChuZXdVc2VyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoIml0ZW1zIiwgdXNlcnMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIiwgbmV3VXNlcik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTgpOwogICAgICAgICAgICAgICAgICAgIH0pKSkpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTkpOwogICAgICAgICAgfSkpKCk7CiAgICAgICAgfSwKICAgICAgICByZW1vdmVVc2VyQnlVc2VybmFtZTogZnVuY3Rpb24gcmVtb3ZlVXNlckJ5VXNlcm5hbWUoY29udGV4dCkgewogICAgICAgICAgdmFyIF9hcmd1bWVudHMzID0gYXJndW1lbnRzOwogICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTExKCkgewogICAgICAgICAgICB2YXIgYXJnOwogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTExJChfY29udGV4dDExKSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICBhcmcgPSBfYXJndW1lbnRzMy5sZW5ndGggPiAxICYmIF9hcmd1bWVudHMzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzM1sxXSA6IHsKICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LnN0YXRlLnByb2Nlc3Nvci5hY3F1aXJlKCJyZW1vdmVVc2VyQnlVc2VybmFtZSIsIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMCgpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VyLCBhcGksIGNvbnRlbnQsIHVzZXJzOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMC5wcmV2ID0gX2NvbnRleHQxMC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dpblN0b3JlLmRpc3BhdGNoKCJnZXRVc2VyIik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyID0gX2NvbnRleHQxMC5zZW50OwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIXVzZXIgJiYgIXVzZXIuaXNUeXBlQWRtaW4oKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA1OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBcGlIb3N0LnJlcXVlc3QoKS5ERUxFVEUoKS51cmwoInVzZXJzL3VzZXIiKS5ib2R5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogYXJnLnVzZXJuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNlbmQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaSA9IF9jb250ZXh0MTAuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGFwaS5nZXRDb250ZW50KCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShjb250ZW50ICE9PSAib2siKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VycyA9IGNvbnRleHQuZ2V0dGVycy5pdGVtcy5maWx0ZXIoZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlci5nZXRVc2VybmFtZSgpICE9PSBhcmcudXNlcm5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgiaXRlbXMiLCB1c2Vycyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLmFicnVwdCgicmV0dXJuIiwgdHJ1ZSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUxMCk7CiAgICAgICAgICAgICAgICAgICAgfSkpKSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTExKTsKICAgICAgICAgIH0pKSgpOwogICAgICAgIH0sCiAgICAgICAgdXBkYXRlVHlwZU9mVXNlckJ5VXNlcm5hbWU6IGZ1bmN0aW9uIHVwZGF0ZVR5cGVPZlVzZXJCeVVzZXJuYW1lKGNvbnRleHQpIHsKICAgICAgICAgIHZhciBfYXJndW1lbnRzNCA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMygpIHsKICAgICAgICAgICAgdmFyIGFyZzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMyQoX2NvbnRleHQxMykgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTMucHJldiA9IF9jb250ZXh0MTMubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czQubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzNFsxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50czRbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICB1c2VyVHlwZTogdXNlclR5cGUKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLmFicnVwdCgicmV0dXJuIiwgY29udGV4dC5zdGF0ZS5wcm9jZXNzb3IuYWNxdWlyZSgidXBkYXRlVHlwZU9mVXNlckJ5VXNlcm5hbWUiLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTIoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlciwgX3VzZXJuYW1lLCBfdXNlclR5cGUsIGFwaSwgY29udGVudCwgdXNlckNoYW5nZSwgdXNlcnM7CgogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMiQoX2NvbnRleHQxMikgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMi5wcmV2ID0gX2NvbnRleHQxMi5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTIucHJldiA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dpblN0b3JlLmRpc3BhdGNoKCJnZXRVc2VyIik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyID0gX2NvbnRleHQxMi5zZW50OwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIXVzZXIgJiYgIXVzZXIuaXNUeXBlQWRtaW4oKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSA2OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF91c2VybmFtZSA9IGFyZy51c2VybmFtZSwgX3VzZXJUeXBlID0gYXJnLnVzZXJUeXBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSA5OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXBpSG9zdC5yZXF1ZXN0KCkudXJsKCJ1c2Vycy91c2VyIikuUFVUKCkuYm9keSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IF91c2VybmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyVHlwZTogX3VzZXJUeXBlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNlbmQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaSA9IF9jb250ZXh0MTIuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGFwaS5nZXRDb250ZW50KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJDaGFuZ2UgPSBuZXcgSXRlbVVzZXIoY29udGVudCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlckNoYW5nZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VycyA9IGNvbnRleHQuZ2V0dGVycy5pdGVtcy5tYXAoZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlci5nZXRVc2VybmFtZSgpID09PSB1c2VyQ2hhbmdlLmdldFVzZXJuYW1lKCkgPyB1c2VyQ2hhbmdlIDogdXNlcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCJpdGVtcyIsIHVzZXJzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuYWJydXB0KCJyZXR1cm4iLCB1c2VyQ2hhbmdlKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDEyLnByZXYgPSAxOTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMi50MCA9IF9jb250ZXh0MTJbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCJpdGVtcyIsIFtdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2NvbnRleHQxMi50MDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTEyLCBudWxsLCBbWzAsIDE5XV0pOwogICAgICAgICAgICAgICAgICAgIH0pKSkpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLnN0b3AoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9jYWxsZWUxMyk7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHN0b3JlOwogIH0KfTs="},{"version":3,"sources":["C:/development/freshnet-v2/vue/src/stores/store.user.js"],"names":["Vuex","ApiHost","ItemUser","DataLoader","Processor","init","Stores","loginStore","login","store","Store","state","dataLoader","timeout","processor","loadData","dispatch","user","isTypeAdmin","Error","request","url","send","api","contents","getContent","map","data","setData","commit","Array","isArray","getData","getters","items","mutations","isLoading","token","actions","refresh","context","acquire","doTimeout","getUsers","getUserByUsername","arg","username","users","find","getUsername","addUser","name","passwordNew","passwordRepeat","POST","body","content","newUser","push","removeUserByUsername","DELETE","filter","updateTypeOfUserByUsername","userType","PUT","userChange"],"mappings":"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","sourcesContent":["import Vuex from \"vuex\";\r\nimport ApiHost from \"../host/ApiHost.js\";\r\nimport ItemUser from \"../items/User.js\";\r\nimport DataLoader from \"./components/DataLoader\";\r\nimport Processor from \"./components/Processor.js\";\r\n\r\nexport default {\r\n   init(Stores) {\r\n      const loginStore = Stores.login;\r\n\r\n      const store = new Vuex.Store({\r\n         state: {\r\n            dataLoader: new DataLoader({ timeout: 1000 * 5 }) // 5sec\r\n               .processor(() => store.state.processor)\r\n               .loadData(async () => {\r\n                  const user = await loginStore.dispatch(\"getUser\");\r\n                  if (!user || !user.isTypeAdmin()) throw new Error();\r\n                  const api = await ApiHost.request().url(\"users\").send();\r\n                  const contents = api.getContent();\r\n                  return contents.map((data) => new ItemUser(data));\r\n               })\r\n               .setData((data) => store.commit(\"items\", Array.isArray(data) ? data : []))\r\n               .getData(() => store.getters.items),\r\n            items: [],\r\n            processor: new Processor(),\r\n         },\r\n         mutations: {\r\n            items: (state, items) => (state.items = Array.isArray(items) ? items : []),\r\n         },\r\n         getters: {\r\n            isLoading: (state) => state.processor.isLoading(),\r\n            token: () => loginStore.getters.token,\r\n            items: (state) => state.items.map((user) => user),\r\n         },\r\n         actions: {\r\n            async refresh(context) {\r\n               return context.state.processor.acquire(\"refresh\", async () => {\r\n                  context.state.dataLoader.doTimeout();\r\n                  await context.dispatch(\"getUsers\");\r\n               });\r\n            },\r\n\r\n            async getUsers(context) {\r\n               return context.state.processor.acquire(\"getUsers\", async () => {\r\n                  return await context.state.dataLoader.data();\r\n               });\r\n            },\r\n            async getUserByUsername(context, arg = { username }) {\r\n               return context.state.processor.acquire(\"getUserByUsername\", async () => {\r\n                  const users = await context.dispatch(\"getUsers\");\r\n                  return users.find((user) => user.getUsername() === arg.username);\r\n               });\r\n            },\r\n            async addUser(\r\n               context,\r\n               arg = { username, name, passwordNew, passwordRepeat }\r\n            ) {\r\n               return context.state.processor.acquire(\"addUser\", async () => {\r\n                  let user = await loginStore.dispatch(\"getUser\");\r\n\r\n                  if (!user && !user.isTypeAdmin()) throw new Error();\r\n\r\n                  let api = await ApiHost.request()\r\n                     .url(\"users/user\")\r\n                     .POST()\r\n                     .body({\r\n                        username: arg.username,\r\n                        name: arg.name,\r\n                        passwordNew: arg.passwordNew,\r\n                        passwordRepeat: arg.passwordRepeat,\r\n                     })\r\n                     .send();\r\n\r\n                  let content = api.getContent();\r\n                  if (!content) throw new Error();\r\n                  const newUser = new ItemUser(content);\r\n                  const users = context.getters.items;\r\n                  users.push(newUser);\r\n                  context.commit(\"items\", users);\r\n                  return newUser;\r\n               });\r\n            },\r\n            async removeUserByUsername(context, arg = { username }) {\r\n               return context.state.processor.acquire(\r\n                  \"removeUserByUsername\",\r\n                  async () => {\r\n                     let user = await loginStore.dispatch(\"getUser\");\r\n\r\n                     if (!user && !user.isTypeAdmin()) throw new Error();\r\n\r\n                     let api = await ApiHost.request()\r\n                        .DELETE()\r\n                        .url(\"users/user\")\r\n                        .body({ username: arg.username })\r\n                        .send();\r\n\r\n                     let content = api.getContent();\r\n                     if (content !== \"ok\") throw new Error();\r\n                     let users = context.getters.items.filter(\r\n                        (user) => user.getUsername() !== arg.username\r\n                     );\r\n                     context.commit(\"items\", users);\r\n                     return true;\r\n                  }\r\n               );\r\n            },\r\n            async updateTypeOfUserByUsername(context, arg = { username, userType }) {\r\n               return context.state.processor.acquire(\r\n                  \"updateTypeOfUserByUsername\",\r\n                  async () => {\r\n                     try {\r\n                        let user = await loginStore.dispatch(\"getUser\");\r\n\r\n                        if (!user && !user.isTypeAdmin()) throw new Error();\r\n\r\n                        let { username, userType } = arg;\r\n\r\n                        let api = await ApiHost.request()\r\n                           .url(\"users/user\")\r\n                           .PUT()\r\n                           .body({ username, userType })\r\n                           .send();\r\n\r\n                        let content = api.getContent();\r\n                        let userChange = new ItemUser(content);\r\n                        if (!userChange) throw new Error();\r\n                        let users = context.getters.items.map((user) => {\r\n                           return user.getUsername() === userChange.getUsername()\r\n                              ? userChange\r\n                              : user;\r\n                        });\r\n                        context.commit(\"items\", users);\r\n                        return userChange;\r\n                     } catch (error) {\r\n                        context.commit(\"items\", []);\r\n                        throw error;\r\n                     }\r\n                  }\r\n               );\r\n            },\r\n         },\r\n      });\r\n\r\n      return store;\r\n   },\r\n};\r\n"]}]}