{"remainingRequest":"C:\\dev\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\dev\\freshnet-v2\\vue\\src\\stores\\store.service.js","dependencies":[{"path":"C:\\dev\\freshnet-v2\\vue\\src\\stores\\store.service.js","mtime":1666953103263},{"path":"C:\\dev\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJDOlxcZGV2XFxmcmVzaG5ldC12MlxcdnVlXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFx0b0NvbnN1bWFibGVBcnJheS5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJDOlxcZGV2XFxmcmVzaG5ldC12MlxcdnVlXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxhc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgRGF0YUxvYWRlciBmcm9tICIuL3Rvb2xzL0RhdGFMb2FkZXIiOwppbXBvcnQgQ29sbGVjdGlvblVwZGF0ZXIgZnJvbSAiLi90b29scy9Db2xsZWN0aW9uVXBkYXRlciI7CmltcG9ydCBQcm9jZXNzb3IgZnJvbSAiLi90b29scy9Qcm9jZXNzb3IuanMiOwppbXBvcnQgU2VydmljZSBmcm9tICJAL2l0ZW1zL1NlcnZpY2UuanMiOwppbXBvcnQgU2VydmljZUN1c3RvbWVyIGZyb20gIkAvaXRlbXMvU2VydmljZUN1c3RvbWVyIjsKaW1wb3J0IFNlcnZpY2VJbWFnZSBmcm9tICJAL2l0ZW1zL1NlcnZpY2VJbWFnZSI7CmltcG9ydCBWdWV4IGZyb20gInZ1ZXgiOwppbXBvcnQgU2VydmljZU1vZHVsZSBmcm9tICJALy4uLy4uL2V4cHJlc3MvZGF0YV9zdHJ1Y3R1cmVzL1NlcnZpY2UuanMiOwppbXBvcnQgQXBpSG9zdCBmcm9tICJAL2hvc3QvQXBpSG9zdC5qcyI7CmV4cG9ydCBkZWZhdWx0IHsKICBpbml0OiBmdW5jdGlvbiBpbml0KFN0b3JlcykgewogICAgdmFyIHN0b3JlU2VydmljZSA9IG5ldyBWdWV4LlN0b3JlKHsKICAgICAgc3RhdGU6IHsKICAgICAgICBsYXN0TW9kaWZpZWQ6IDAsCiAgICAgICAgZGF0YUxvYWRlcjogbmV3IERhdGFMb2FkZXIoewogICAgICAgICAgdGltZW91dDogMTAwMCAqIDYwICogMTAKICAgICAgICB9KSAvLyAxMG1pbgogICAgICAgIC5wcm9jZXNzb3IoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHN0b3JlU2VydmljZS5zdGF0ZS5wcm9jZXNzb3I7CiAgICAgICAgfSkubG9hZERhdGEoIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgICB2YXIgYXBpLCBlcnJvciwgY29udGVudCwgY29udGVudHMsIGl0ZW1zOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgcmV0dXJuIEFwaUhvc3QucmVxdWVzdCgpLnVybCgic2VydmljZV92Mi9nZXQvaXRlbXMiKS5zZW5kKCk7CgogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBhcGkgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICBlcnJvciA9IGFwaS5nZXRFcnJvcigpOwogICAgICAgICAgICAgICAgICBjb250ZW50ID0gYXBpLmdldENvbnRlbnQoKTsKCiAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTsKCiAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gQXJyYXkuaXNBcnJheShjb250ZW50KSA/IGNvbnRlbnQgOiBbXTsKICAgICAgICAgICAgICAgICAgaXRlbXMgPSBjb250ZW50cy5tYXAoZnVuY3Rpb24gKGNvbnRlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNlcnZpY2UoU3RvcmVzKS5mcm9tRGF0YShjb250ZW50KTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGl0ZW1zKTsKCiAgICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIF9jYWxsZWUpOwogICAgICAgIH0pKSkuc2V0RGF0YShmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgc3RvcmVTZXJ2aWNlLmNvbW1pdCgiaXRlbXMiLCBBcnJheS5pc0FycmF5KGRhdGEpID8gZGF0YSA6IFtdKTsKICAgICAgICAgIHN0b3JlU2VydmljZS5jb21taXQoImxhc3RNb2RpZmllZCIsIERhdGUubm93KCkpOwogICAgICAgIH0pLmdldERhdGEoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHN0b3JlU2VydmljZS5nZXR0ZXJzLml0ZW1zOwogICAgICAgIH0pLAogICAgICAgIGl0ZW1zOiBbXSwKICAgICAgICBwcm9jZXNzb3I6IG5ldyBQcm9jZXNzb3IoKQogICAgICB9LAogICAgICBtdXRhdGlvbnM6IHsKICAgICAgICBsYXN0TW9kaWZpZWQ6IGZ1bmN0aW9uIGxhc3RNb2RpZmllZChzdGF0ZSwgdGltZSkgewogICAgICAgICAgcmV0dXJuIHN0YXRlLmxhc3RNb2RpZmllZCA9IHRpbWU7CiAgICAgICAgfSwKICAgICAgICBpdGVtczogZnVuY3Rpb24gaXRlbXMoc3RhdGUsIF9pdGVtcykgewogICAgICAgICAgcmV0dXJuIHN0YXRlLml0ZW1zID0gX2l0ZW1zOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZ2V0dGVyczogewogICAgICAgIGxhc3RNb2RpZmllZDogZnVuY3Rpb24gbGFzdE1vZGlmaWVkKHN0YXRlKSB7CiAgICAgICAgICByZXR1cm4gc3RhdGUubGFzdE1vZGlmaWVkOwogICAgICAgIH0sCiAgICAgICAgaXNMb2FkaW5nOiBmdW5jdGlvbiBpc0xvYWRpbmcoc3RhdGUpIHsKICAgICAgICAgIHJldHVybiBzdGF0ZS5wcm9jZXNzb3IuaXNMb2FkaW5nKCk7CiAgICAgICAgfSwKICAgICAgICBpdGVtczogZnVuY3Rpb24gaXRlbXMoc3RhdGUpIHsKICAgICAgICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShzdGF0ZS5pdGVtcykgPyBzdGF0ZS5pdGVtcyA6IFtdKS5tYXAoZnVuY3Rpb24gKHNlcnZpY2UpIHsKICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VydmljZS5ldmVudHMpKSBzZXJ2aWNlLmV2ZW50cy5zb3J0KGZ1bmN0aW9uIChldmVudDEsIGV2ZW50MikgewogICAgICAgICAgICAgIHJldHVybiBldmVudDEuY29tcGFyZShldmVudDIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2U7CiAgICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uIChzZXJ2aWNlMSwgc2VydmljZTIpIHsKICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UxLmNvbXBhcmUoc2VydmljZTIpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBhY3Rpb25zOiB7CiAgICAgICAgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaChjb250ZXh0KSB7CiAgICAgICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgY29udGV4dC5zdGF0ZS5wcm9jZXNzb3IuYWNxdWlyZSgicmVmcmVzaCIsIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdGF0ZS5kYXRhTG9hZGVyLmRvVGltZW91dCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmRpc3BhdGNoKCJnZXRJdGVtcyIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICAgICAgICAgICAgICAgIH0pKSkpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICAgICAgfSkpKCk7CiAgICAgICAgfSwKICAgICAgICBnZXRJdGVtczogZnVuY3Rpb24gZ2V0SXRlbXMoY29udGV4dCkgewogICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuc3RhdGUucHJvY2Vzc29yLmFjcXVpcmUoImdldEl0ZW1zIiwgLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgY29udGV4dC5zdGF0ZS5kYXRhTG9hZGVyLmRhdGEoKSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgICAgICAgICAgICAgICAgfSkpKSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlNSk7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9LAogICAgICAgIGdldEl0ZW1PZklkOiBmdW5jdGlvbiBnZXRJdGVtT2ZJZChjb250ZXh0KSB7CiAgICAgICAgICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICAgICAgICB2YXIgaWQ7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgaWQgPSBfYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50c1sxXSA6ICIiOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LnN0YXRlLnByb2Nlc3Nvci5hY3F1aXJlKCJnZXRJdGVtT2ZJZCIsIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1zOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5kaXNwYXRjaCgiZ2V0U2VydmljZXMiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gX2NvbnRleHQ2LnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCBpdGVtcy5maW5kKGZ1bmN0aW9uIChzZXJ2aWNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuaWQgPT09IGlkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlNik7CiAgICAgICAgICAgICAgICAgICAgfSkpKSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlNyk7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9LAogICAgICAgIGdldEdyb3Vwc0J5Q3VzdG9tZXI6IGZ1bmN0aW9uIGdldEdyb3Vwc0J5Q3VzdG9tZXIoY29udGV4dCkgewogICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoKSB7CiAgICAgICAgICAgIHZhciBpdGVtcywgZ3JvdXBzOwogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTgkKF9jb250ZXh0OCkgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5kaXNwYXRjaCgiZ2V0SXRlbXMiKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IF9jb250ZXh0OC5zZW50OwogICAgICAgICAgICAgICAgICAgIGdyb3VwcyA9IGl0ZW1zLnJlZHVjZShmdW5jdGlvbiAoZ3JvdXBzLCBpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cHMuZmluZChmdW5jdGlvbiAoZ3JvdXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdyb3VwLmN1c3RvbWVyLmlzRXF1YWwoaXRlbS5jdXN0b21lcik7CiAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICBpZiAoIWdyb3VwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwID0gewogICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyOiBpdGVtLmN1c3RvbWVyLAogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBncm91cHMucHVzaChncm91cCk7CiAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuaXRlbXMucHVzaChpdGVtKTsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBncm91cHM7CiAgICAgICAgICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguYWJydXB0KCJyZXR1cm4iLCBncm91cHMpOwoKICAgICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTgpOwogICAgICAgICAgfSkpKCk7CiAgICAgICAgfSwKICAgICAgICBpbXBvcnRJdGVtOiBmdW5jdGlvbiBpbXBvcnRJdGVtKGNvbnRleHQpIHsKICAgICAgICAgIHZhciBfYXJndW1lbnRzMiA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMCgpIHsKICAgICAgICAgICAgdmFyIGFyZzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czIubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzMlsxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50czJbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuc3RhdGUucHJvY2Vzc29yLmFjcXVpcmUoImltcG9ydEl0ZW0iLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOSgpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhLCBzZXJ2aWNlLCBhcGksIGVycm9yLCBjb250ZW50LCBpdGVtczsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBhcmcuZGF0YTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UgPSBTZXJ2aWNlTW9kdWxlLnRyaW0oZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFwaUhvc3QucmVxdWVzdCgpLlBPU1QoKS51cmwoInNlcnZpY2VfdjIvaW1wb3J0L2l0ZW0vIikuYm9keSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5zZW5kKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkgPSBfY29udGV4dDkuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhcGkuZ2V0RXJyb3IoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGFwaS5nZXRDb250ZW50KCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZSA9IG5ldyBTZXJ2aWNlKFN0b3JlcykuZnJvbURhdGEoY29udGVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gY29udGV4dC5nZXR0ZXJzLml0ZW1zOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHNlcnZpY2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgiaXRlbXMiLCBpdGVtcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCJsYXN0TW9kaWZpZWQiLCBEYXRlLm5vdygpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5hYnJ1cHQoInJldHVybiIsIHNlcnZpY2UpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWU5KTsKICAgICAgICAgICAgICAgICAgICB9KSkpKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlMTApOwogICAgICAgICAgfSkpKCk7CiAgICAgICAgfSwKICAgICAgICBhZGRJdGVtOiBmdW5jdGlvbiBhZGRJdGVtKGNvbnRleHQpIHsKICAgICAgICAgIHZhciBfYXJndW1lbnRzMyA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMigpIHsKICAgICAgICAgICAgdmFyIGFyZzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMiQoX2NvbnRleHQxMikgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTIucHJldiA9IF9jb250ZXh0MTIubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czMubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzM1sxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50czNbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuc3RhdGUucHJvY2Vzc29yLmFjcXVpcmUoImFkZEl0ZW0iLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTEoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSwgaW1hZ2VzLCBhcGksIGVycm9yLCBjb250ZW50LCBzZXJ2aWNlOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMSQoX2NvbnRleHQxMSkgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBhcmcuZGF0YTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuYWJydXB0KCJyZXR1cm4iLCBudWxsKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJpbnZhbGlkIGRhdGEiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKCFBcnJheS5pc0FycmF5KGRhdGEuaW1hZ2VGaWxlcykgfHwgZGF0YS5pbWFnZUZpbGVzLmxlbmd0aCA8PSAwKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEudDAgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBcGlIb3N0LmltZ0ZpbGUudXBsb2FkKGRhdGEuaW1hZ2VGaWxlcykudGhlbihmdW5jdGlvbiAoanNvbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBqc29uLmNvbnRlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEudDAgPSBfY29udGV4dDExLnNlbnQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VzID0gX2NvbnRleHQxMS50MDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pbWFnZUZpbGVzID0gaW1hZ2VzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAxNjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFwaUhvc3QucmVxdWVzdCgpLlBPU1QoKS51cmwoInNlcnZpY2VfdjIvYWRkL2l0ZW0vIikuYm9keSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5zZW5kKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpID0gX2NvbnRleHQxMS5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGFwaS5nZXRFcnJvcigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gYXBpLmdldENvbnRlbnQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAyMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZSA9IG5ldyBTZXJ2aWNlKFN0b3JlcykuZnJvbURhdGEoY29udGVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLmFicnVwdCgicmV0dXJuIiwgbmV3IENvbGxlY3Rpb25VcGRhdGVyKGNvbnRleHQpLm9uSWQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuZ2V0SXRlbShzZXJ2aWNlKSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUxMSk7CiAgICAgICAgICAgICAgICAgICAgfSkpKSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTEyKTsKICAgICAgICAgIH0pKSgpOwogICAgICAgIH0sCiAgICAgICAgcmVtb3ZlSXRlbU9mSWQ6IGZ1bmN0aW9uIHJlbW92ZUl0ZW1PZklkKGNvbnRleHQpIHsKICAgICAgICAgIHZhciBfYXJndW1lbnRzNCA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNCgpIHsKICAgICAgICAgICAgdmFyIGFyZzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNCQoX2NvbnRleHQxNCkgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTQucHJldiA9IF9jb250ZXh0MTQubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czQubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzNFsxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50czRbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICBpZDogaWQKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE0LmFicnVwdCgicmV0dXJuIiwgY29udGV4dC5zdGF0ZS5wcm9jZXNzb3IuYWNxdWlyZSgicmVtb3ZlSXRlbU9mSWQiLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTMoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQsIGFwaSwgZXJyb3IsIGZvdW5kLCBpdGVtczsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTMkKF9jb250ZXh0MTMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTMucHJldiA9IF9jb250ZXh0MTMubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGFyZy5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFwaUhvc3QucmVxdWVzdCgpLkRFTEVURSgpLnVybCgic2VydmljZV92Mi9kZWxldGUvaXRlbS8iLmNvbmNhdChpZCkpLnNlbmQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaSA9IF9jb250ZXh0MTMuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhcGkuZ2V0RXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gY29udGV4dC5zdGF0ZS5pdGVtcy5maW5kKGZ1bmN0aW9uIChzZXJ2aWNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuaWQgPT09IGlkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTMubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IGNvbnRleHQuc3RhdGUuaXRlbXM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnNwbGljZShpdGVtcy5pbmRleE9mKGZvdW5kKSwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCJpdGVtcyIsIGl0ZW1zKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoImxhc3RNb2RpZmllZCIsIERhdGUubm93KCkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMy5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMTMpOwogICAgICAgICAgICAgICAgICAgIH0pKSkpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE0LnN0b3AoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9jYWxsZWUxNCk7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9LAogICAgICAgIHVwZGF0ZVN0YXRlT2ZJZDogZnVuY3Rpb24gdXBkYXRlU3RhdGVPZklkKGNvbnRleHQpIHsKICAgICAgICAgIHZhciBfYXJndW1lbnRzNSA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNigpIHsKICAgICAgICAgICAgdmFyIGFyZzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNiQoX2NvbnRleHQxNikgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTYucHJldiA9IF9jb250ZXh0MTYubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czUubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzNVsxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50czVbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQ6IHNlcnZpY2VJRCwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTYuYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LnN0YXRlLnByb2Nlc3Nvci5hY3F1aXJlKCJ1cGRhdGVTdGF0ZU9mSWQiLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTUoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VydmljZUlELCBzdGF0ZSwgYXBpLCBlcnJvcjsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTUkKF9jb250ZXh0MTUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTUucHJldiA9IF9jb250ZXh0MTUubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQgPSBhcmcuc2VydmljZUlELCBzdGF0ZSA9IGFyZy5zdGF0ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFwaUhvc3QucmVxdWVzdCgpLlBVVCgpLnVybCgic2VydmljZV92Mi9pdGVtLyIuY29uY2F0KHNlcnZpY2VJRCwgIi91cGRhdGUvc3RhdGUvIikpLmJvZHkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHN0YXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNlbmQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaSA9IF9jb250ZXh0MTUuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhcGkuZ2V0RXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDE1Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE1LmFicnVwdCgicmV0dXJuIiwgbmV3IENvbGxlY3Rpb25VcGRhdGVyKGNvbnRleHQpLm9uSWQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkub25VcGRhdGUoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5zdGF0ZSA9IHN0YXRlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5nZXRJdGVtQnlJZChzZXJ2aWNlSUQpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNS5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMTUpOwogICAgICAgICAgICAgICAgICAgIH0pKSkpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnN0b3AoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9jYWxsZWUxNik7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9LAogICAgICAgIHVwZGF0ZURlc2NyaXB0aW9uT2ZJZDogZnVuY3Rpb24gdXBkYXRlRGVzY3JpcHRpb25PZklkKGNvbnRleHQpIHsKICAgICAgICAgIHZhciBfYXJndW1lbnRzNiA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxOCgpIHsKICAgICAgICAgICAgdmFyIGFyZzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxOCQoX2NvbnRleHQxOCkgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTgucHJldiA9IF9jb250ZXh0MTgubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czYubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzNlsxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50czZbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQ6IHNlcnZpY2VJRCwKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbgogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTguYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LnN0YXRlLnByb2Nlc3Nvci5hY3F1aXJlKCJ1cGRhdGVEZXNjcmlwdGlvbk9mSWQiLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTcoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VydmljZUlELCBkZXNjcmlwdGlvbiwgYXBpLCBlcnJvcjsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTckKF9jb250ZXh0MTcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTcucHJldiA9IF9jb250ZXh0MTcubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQgPSBhcmcuc2VydmljZUlELCBkZXNjcmlwdGlvbiA9IGFyZy5kZXNjcmlwdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxNy5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFwaUhvc3QucmVxdWVzdCgpLlBVVCgpLnVybCgic2VydmljZV92Mi9pdGVtLyIuY29uY2F0KHNlcnZpY2VJRCwgIi91cGRhdGUvZGVzY3JpcHRpb24vIikpLmJvZHkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGRlc2NyaXB0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNlbmQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaSA9IF9jb250ZXh0MTcuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhcGkuZ2V0RXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE3LmFicnVwdCgicmV0dXJuIiwgbmV3IENvbGxlY3Rpb25VcGRhdGVyKGNvbnRleHQpLm9uSWQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkub25VcGRhdGUoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5nZXRJdGVtQnlJZChzZXJ2aWNlSUQpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNy5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMTcpOwogICAgICAgICAgICAgICAgICAgIH0pKSkpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE4LnN0b3AoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9jYWxsZWUxOCk7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9LAogICAgICAgIHVwZGF0ZUJlbG9uZ2luZ3NPZklkOiBmdW5jdGlvbiB1cGRhdGVCZWxvbmdpbmdzT2ZJZChjb250ZXh0KSB7CiAgICAgICAgICB2YXIgX2FyZ3VtZW50czcgPSBhcmd1bWVudHM7CiAgICAgICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjAoKSB7CiAgICAgICAgICAgIHZhciBhcmc7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjAkKF9jb250ZXh0MjApIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIwLnByZXYgPSBfY29udGV4dDIwLm5leHQpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIGFyZyA9IF9hcmd1bWVudHM3Lmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50czdbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmd1bWVudHM3WzFdIDogewogICAgICAgICAgICAgICAgICAgICAgc2VydmljZUlEOiBzZXJ2aWNlSUQsCiAgICAgICAgICAgICAgICAgICAgICBiZWxvbmdpbmdzOiBiZWxvbmdpbmdzCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMC5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuc3RhdGUucHJvY2Vzc29yLmFjcXVpcmUoInVwZGF0ZUJlbG9uZ2luZ3NPZklkIiwgLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE5KCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcnZpY2VJRCwgYmVsb25naW5ncywgYXBpLCBlcnJvciwgY29udGVudDsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTkkKF9jb250ZXh0MTkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTkucHJldiA9IF9jb250ZXh0MTkubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQgPSBhcmcuc2VydmljZUlELCBiZWxvbmdpbmdzID0gYXJnLmJlbG9uZ2luZ3M7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBcGlIb3N0LnJlcXVlc3QoKS5QVVQoKS51cmwoInNlcnZpY2VfdjIvaXRlbS8iLmNvbmNhdChzZXJ2aWNlSUQsICIvdXBkYXRlL2JlbG9uZ2luZy8iKSkuYm9keSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogYmVsb25naW5ncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5zZW5kKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkgPSBfY29udGV4dDE5LnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gYXBpLmdldEVycm9yKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBhcGkuZ2V0Q29udGVudCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTkuYWJydXB0KCJyZXR1cm4iLCBuZXcgQ29sbGVjdGlvblVwZGF0ZXIoY29udGV4dCkub25JZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmlkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5vblVwZGF0ZShmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmJlbG9uZ2luZ3MgPSBjb250ZW50LmJlbG9uZ2luZ3M7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmdldEl0ZW1CeUlkKHNlcnZpY2VJRCkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE5LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUxOSk7CiAgICAgICAgICAgICAgICAgICAgfSkpKSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjAuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTIwKTsKICAgICAgICAgIH0pKSgpOwogICAgICAgIH0sCiAgICAgICAgdXBkYXRlQ3VzdG9tZXJPZklkOiBmdW5jdGlvbiB1cGRhdGVDdXN0b21lck9mSWQoY29udGV4dCkgewogICAgICAgICAgdmFyIF9hcmd1bWVudHM4ID0gYXJndW1lbnRzOwogICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIyKCkgewogICAgICAgICAgICB2YXIgYXJnOwogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIyJChfY29udGV4dDIyKSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyMi5wcmV2ID0gX2NvbnRleHQyMi5uZXh0KSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICBhcmcgPSBfYXJndW1lbnRzOC5sZW5ndGggPiAxICYmIF9hcmd1bWVudHM4WzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzOFsxXSA6IHsKICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VJRDogc2VydmljZUlELAogICAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXI6IGN1c3RvbWVyCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMi5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuc3RhdGUucHJvY2Vzc29yLmFjcXVpcmUoInVwZGF0ZUN1c3RvbWVyT2ZJZCIsIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMSgpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXJ2aWNlSUQsIGN1c3RvbWVyLCBhcGksIGVycm9yLCBjb250ZW50OwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyMSQoX2NvbnRleHQyMSkgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyMS5wcmV2ID0gX2NvbnRleHQyMS5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VJRCA9IGFyZy5zZXJ2aWNlSUQsIGN1c3RvbWVyID0gYXJnLmN1c3RvbWVyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIxLm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXBpSG9zdC5yZXF1ZXN0KCkuUFVUKCkudXJsKCJzZXJ2aWNlX3YyL2l0ZW0vIi5jb25jYXQoc2VydmljZUlELCAiL3VwZGF0ZS9jdXN0b21lci8iKSkuYm9keSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY3VzdG9tZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuc2VuZCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpID0gX2NvbnRleHQyMS5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGFwaS5nZXRFcnJvcigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gYXBpLmdldENvbnRlbnQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIxLm5leHQgPSA4OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIxLmFicnVwdCgicmV0dXJuIiwgbmV3IENvbGxlY3Rpb25VcGRhdGVyKGNvbnRleHQpLm9uSWQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkub25VcGRhdGUoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5jdXN0b21lciA9IG5ldyBTZXJ2aWNlQ3VzdG9tZXIoU3RvcmVzKS5mcm9tRGF0YShjb250ZW50LmN1c3RvbWVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuZ2V0SXRlbUJ5SWQoc2VydmljZUlEKSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjEuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTIxKTsKICAgICAgICAgICAgICAgICAgICB9KSkpKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMi5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlMjIpOwogICAgICAgICAgfSkpKCk7CiAgICAgICAgfSwKICAgICAgICBhZGRFdmVudFRvSWQ6IGZ1bmN0aW9uIGFkZEV2ZW50VG9JZChjb250ZXh0KSB7CiAgICAgICAgICB2YXIgX2FyZ3VtZW50czkgPSBhcmd1bWVudHM7CiAgICAgICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjQoKSB7CiAgICAgICAgICAgIHZhciBhcmc7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjQkKF9jb250ZXh0MjQpIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDI0LnByZXYgPSBfY29udGV4dDI0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIGFyZyA9IF9hcmd1bWVudHM5Lmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50czlbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmd1bWVudHM5WzFdIDogewogICAgICAgICAgICAgICAgICAgICAgc2VydmljZUlEOiBzZXJ2aWNlSUQsCiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNC5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuc3RhdGUucHJvY2Vzc29yLmFjcXVpcmUoImFkZEV2ZW50VG9JZCIsIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMygpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXJ2aWNlSUQsIGRhdGEsIGFwaSwgZXJyb3IsIGNvbnRlbnQsIHNlcnZpY2VQYXJzZTsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjMkKF9jb250ZXh0MjMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjMucHJldiA9IF9jb250ZXh0MjMubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQgPSBhcmcuc2VydmljZUlELCBkYXRhID0gYXJnLmRhdGE7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISghc2VydmljZUlEIHx8ICFkYXRhKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MjMubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIzLmFicnVwdCgicmV0dXJuIiwgbnVsbCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIzLm5leHQgPSA1OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXBpSG9zdC5yZXF1ZXN0KCkuUE9TVCgpLnVybCgic2VydmljZV92Mi9pdGVtLyIuY29uY2F0KHNlcnZpY2VJRCwgIi9hZGQvZXZlbnQvIikpLmJvZHkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuc2VuZCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpID0gX2NvbnRleHQyMy5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGFwaS5nZXRFcnJvcigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gYXBpLmdldENvbnRlbnQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIzLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZVBhcnNlID0gbmV3IFNlcnZpY2UoU3RvcmVzKS5mcm9tRGF0YShjb250ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjMuYWJydXB0KCJyZXR1cm4iLCBuZXcgQ29sbGVjdGlvblVwZGF0ZXIoY29udGV4dCkub25JZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmlkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5vblVwZGF0ZShmdW5jdGlvbiAoaXRlbTEsIGl0ZW0yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbTEuZXZlbnRzID0gaXRlbTIuZXZlbnRzLnNvcnQoZnVuY3Rpb24gKGV2ZW50MSwgZXZlbnQyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQxLmNvbXBhcmUoZXZlbnQyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuZ2V0SXRlbShzZXJ2aWNlUGFyc2UpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjMuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTIzKTsKICAgICAgICAgICAgICAgICAgICB9KSkpKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNC5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlMjQpOwogICAgICAgICAgfSkpKCk7CiAgICAgICAgfSwKICAgICAgICByZW1vdmVFdmVudEZyb21JZDogZnVuY3Rpb24gcmVtb3ZlRXZlbnRGcm9tSWQoY29udGV4dCkgewogICAgICAgICAgdmFyIF9hcmd1bWVudHMxMCA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyNigpIHsKICAgICAgICAgICAgdmFyIGFyZzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyNiQoX2NvbnRleHQyNikgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjYucHJldiA9IF9jb250ZXh0MjYubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czEwLmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50czEwWzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzMTBbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQ6IHNlcnZpY2VJRCwKICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHRpbWUKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI2LmFicnVwdCgicmV0dXJuIiwgY29udGV4dC5zdGF0ZS5wcm9jZXNzb3IuYWNxdWlyZSgicmVtb3ZlRXZlbnRGcm9tSWQiLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjUoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VydmljZUlELCB0aW1lLCBhcGksIGVycm9yOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyNSQoX2NvbnRleHQyNSkgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyNS5wcmV2ID0gX2NvbnRleHQyNS5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VJRCA9IGFyZy5zZXJ2aWNlSUQsIHRpbWUgPSBhcmcudGltZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQyNS5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFwaUhvc3QucmVxdWVzdCgpLkRFTEVURSgpLnVybCgic2VydmljZV92Mi9pdGVtLyIuY29uY2F0KHNlcnZpY2VJRCwgIi9kZWxldGUvZXZlbnQvIikpLmJvZHkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VJRDogc2VydmljZUlELAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuc2VuZCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpID0gX2NvbnRleHQyNS5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGFwaS5nZXRFcnJvcigpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjUuYWJydXB0KCJyZXR1cm4iLCBuZXcgQ29sbGVjdGlvblVwZGF0ZXIoY29udGV4dCkub25JZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmlkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5vblVwZGF0ZShmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZXZlbnRzID0gaXRlbS5ldmVudHMuZmlsdGVyKGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LnRpbWVzdGFtcC50aW1lICE9PSB0aW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5nZXRJdGVtQnlJZChzZXJ2aWNlSUQpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNS5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMjUpOwogICAgICAgICAgICAgICAgICAgIH0pKSkpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI2LnN0b3AoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9jYWxsZWUyNik7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9LAogICAgICAgIHVwZGF0ZVVyZ2VudE9mSWQ6IGZ1bmN0aW9uIHVwZGF0ZVVyZ2VudE9mSWQoY29udGV4dCkgewogICAgICAgICAgdmFyIF9hcmd1bWVudHMxMSA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyOCgpIHsKICAgICAgICAgICAgdmFyIGFyZzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyOCQoX2NvbnRleHQyOCkgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjgucHJldiA9IF9jb250ZXh0MjgubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czExLmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50czExWzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzMTFbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQ6IHNlcnZpY2VJRCwKICAgICAgICAgICAgICAgICAgICAgIGlzVXJnZW50OiBpc1VyZ2VudAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCJ1cGRhdGVVcmdlbnRPZklkIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgYWRkTGFiZWxUb0lkIik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjguYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LnN0YXRlLnByb2Nlc3Nvci5hY3F1aXJlKCJ1cGRhdGVVcmdlbnRPZklkIiwgLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTI3KCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcnZpY2VJRCwgaXNVcmdlbnQsIGFwaSwgZXJyb3IsIGNvbnRlbnQsIHNlcnZpY2U7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTI3JChfY29udGV4dDI3KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDI3LnByZXYgPSBfY29udGV4dDI3Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZUlEID0gYXJnLnNlcnZpY2VJRCwgaXNVcmdlbnQgPSBhcmcuaXNVcmdlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MjcubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBcGlIb3N0LnJlcXVlc3QoKS5QVVQoKS51cmwoInNlcnZpY2UvdXJnZW50IikuYm9keSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZUlEOiBzZXJ2aWNlSUQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNVcmdlbnQ6IGlzVXJnZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNlbmQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaSA9IF9jb250ZXh0Mjcuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhcGkuZ2V0RXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDI3Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBhcGkuZ2V0Q29udGVudCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlID0gbmV3IFNlcnZpY2UoU3RvcmVzKS5mcm9tRGF0YShjb250ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjcuYWJydXB0KCJyZXR1cm4iLCBuZXcgQ29sbGVjdGlvblVwZGF0ZXIoY29udGV4dCkub25JZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmlkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5vblVwZGF0ZShmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnNldFVyZ2VudChzZXJ2aWNlLmlzVXJnZW50KCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5nZXRJdGVtQnlJZChzZXJ2aWNlLmlkKSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI3LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUyNyk7CiAgICAgICAgICAgICAgICAgICAgfSkpKSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mjguc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTI4KTsKICAgICAgICAgIH0pKSgpOwogICAgICAgIH0sCiAgICAgICAgdXBkYXRlV2FycmFudHlPZklkOiBmdW5jdGlvbiB1cGRhdGVXYXJyYW50eU9mSWQoY29udGV4dCkgewogICAgICAgICAgdmFyIF9hcmd1bWVudHMxMiA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzMCgpIHsKICAgICAgICAgICAgdmFyIGFyZzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzMCQoX2NvbnRleHQzMCkgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MzAucHJldiA9IF9jb250ZXh0MzAubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czEyLmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50czEyWzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzMTJbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQ6IHNlcnZpY2VJRCwKICAgICAgICAgICAgICAgICAgICAgIGlzV2FycmFudHk6IGlzV2FycmFudHkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigidXBkYXRlV2FycmFudHlPZklkIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgYWRkTGFiZWxUb0lkIik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzAuYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LnN0YXRlLnByb2Nlc3Nvci5hY3F1aXJlKCJ1cGRhdGVXYXJyYW50eU9mSWQiLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjkoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VydmljZUlELCBpc1dhcnJhbnR5LCBhcGksIGVycm9yLCBjb250ZW50LCBzZXJ2aWNlOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyOSQoX2NvbnRleHQyOSkgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyOS5wcmV2ID0gX2NvbnRleHQyOS5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VJRCA9IGFyZy5zZXJ2aWNlSUQsIGlzV2FycmFudHkgPSBhcmcuaXNXYXJyYW50eTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQyOS5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFwaUhvc3QucmVxdWVzdCgpLlBVVCgpLnVybCgic2VydmljZS93YXJyYW50eSIpLmJvZHkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VJRDogc2VydmljZUlELAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzV2FycmFudHk6IGlzV2FycmFudHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuc2VuZCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpID0gX2NvbnRleHQyOS5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGFwaS5nZXRFcnJvcigpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MjkubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGFwaS5nZXRDb250ZW50KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UgPSBuZXcgU2VydmljZShTdG9yZXMpLmZyb21EYXRhKGNvbnRlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyOS5hYnJ1cHQoInJldHVybiIsIG5ldyBDb2xsZWN0aW9uVXBkYXRlcihjb250ZXh0KS5vbklkKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLm9uVXBkYXRlKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uc2V0V2FycmFudHkoc2VydmljZS5pc1dhcnJhbnR5KCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5nZXRJdGVtQnlJZChzZXJ2aWNlLmlkKSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI5LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUyOSk7CiAgICAgICAgICAgICAgICAgICAgfSkpKSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzAuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTMwKTsKICAgICAgICAgIH0pKSgpOwogICAgICAgIH0sCiAgICAgICAgYWRkTGFiZWxUb0lkOiBmdW5jdGlvbiBhZGRMYWJlbFRvSWQoY29udGV4dCkgewogICAgICAgICAgdmFyIF9hcmd1bWVudHMxMyA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzMigpIHsKICAgICAgICAgICAgdmFyIGFyZzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzMiQoX2NvbnRleHQzMikgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MzIucHJldiA9IF9jb250ZXh0MzIubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czEzLmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50czEzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzMTNbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQ6IHNlcnZpY2VJRCwKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBsYWJlbAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzIuYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LnN0YXRlLnByb2Nlc3Nvci5hY3F1aXJlKCJhZGRMYWJlbFRvSWQiLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMzEoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VydmljZUlELCBsYWJlbCwgYXBpLCBlcnJvciwgY29udGVudDsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMzEkKF9jb250ZXh0MzEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MzEucHJldiA9IF9jb250ZXh0MzEubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQgPSBhcmcuc2VydmljZUlELCBsYWJlbCA9IGFyZy5sYWJlbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQzMS5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFwaUhvc3QucmVxdWVzdCgpLlBPU1QoKS51cmwoInNlcnZpY2VfdjIvaXRlbS8iLmNvbmNhdChzZXJ2aWNlSUQsICIvYWRkL2xhYmVsLyIpKS5ib2R5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuc2VuZCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpID0gX2NvbnRleHQzMS5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGFwaS5nZXRFcnJvcigpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MzEubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gYXBpLmdldENvbnRlbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGNvbnRlbnQpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMxLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUzMSk7CiAgICAgICAgICAgICAgICAgICAgfSkpKSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzIuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTMyKTsKICAgICAgICAgIH0pKSgpOwogICAgICAgIH0sCiAgICAgICAgcmVtb3ZlTGFiZWxGcm9tSWQ6IGZ1bmN0aW9uIHJlbW92ZUxhYmVsRnJvbUlkKGNvbnRleHQpIHsKICAgICAgICAgIHZhciBfYXJndW1lbnRzMTQgPSBhcmd1bWVudHM7CiAgICAgICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMzQoKSB7CiAgICAgICAgICAgIHZhciBhcmc7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMzQkKF9jb250ZXh0MzQpIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDM0LnByZXYgPSBfY29udGV4dDM0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIGFyZyA9IF9hcmd1bWVudHMxNC5sZW5ndGggPiAxICYmIF9hcmd1bWVudHMxNFsxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50czE0WzFdIDogewogICAgICAgICAgICAgICAgICAgICAgc2VydmljZUlEOiBzZXJ2aWNlSUQsCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbGFiZWwKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM0LmFicnVwdCgicmV0dXJuIiwgY29udGV4dC5zdGF0ZS5wcm9jZXNzb3IuYWNxdWlyZSgicmVtb3ZlTGFiZWxGcm9tSWQiLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMzMoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VydmljZUlELCBsYWJlbCwgYXBpLCBlcnJvciwgY29udGVudCwgc2VydmljZSwgaXRlbXMsIGl0ZW07CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMzJChfY29udGV4dDMzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMzLnByZXYgPSBfY29udGV4dDMzLm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZUlEID0gYXJnLnNlcnZpY2VJRCwgbGFiZWwgPSBhcmcubGFiZWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MzMubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBcGlIb3N0LnJlcXVlc3QoKS5ERUxFVEUoKS51cmwoInNlcnZpY2VfdjIvaXRlbS8iLmNvbmNhdChzZXJ2aWNlSUQsICIvZGVsZXRlL2xhYmVsLyIpKS5ib2R5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbGFiZWwudG9EYXRhKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuc2VuZCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpID0gX2NvbnRleHQzMy5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGFwaS5nZXRFcnJvcigpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MzMubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gYXBpLmdldENvbnRlbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZSA9IG5ldyBTZXJ2aWNlKFN0b3JlcykuZnJvbURhdGEoY29udGVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gY29udGV4dC5zdGF0ZS5pdGVtczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW1zLmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZCA9PT0gc2VydmljZS5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHNlcnZpY2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBzZXJ2aWNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc2V0TGFiZWxzKHNlcnZpY2UubGFiZWxzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoIml0ZW1zIiwgaXRlbXMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgibGFzdE1vZGlmaWVkIiwgRGF0ZS5ub3coKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMzLmFicnVwdCgicmV0dXJuIiwgaXRlbSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMzLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUzMyk7CiAgICAgICAgICAgICAgICAgICAgfSkpKSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzQuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTM0KTsKICAgICAgICAgIH0pKSgpOwogICAgICAgIH0sCiAgICAgICAgYWRkSW1hZ2VUb0lkOiBmdW5jdGlvbiBhZGRJbWFnZVRvSWQoY29udGV4dCkgewogICAgICAgICAgdmFyIF9hcmd1bWVudHMxNSA9IGFyZ3VtZW50czsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzNigpIHsKICAgICAgICAgICAgdmFyIGFyZzsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzNiQoX2NvbnRleHQzNikgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MzYucHJldiA9IF9jb250ZXh0MzYubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgYXJnID0gX2FyZ3VtZW50czE1Lmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50czE1WzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzMTVbMV0gOiB7CiAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQ6IHNlcnZpY2VJRCwKICAgICAgICAgICAgICAgICAgICAgIGltYWdlRmlsZTogaW1hZ2VGaWxlCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzNi5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuc3RhdGUucHJvY2Vzc29yLmFjcXVpcmUoImFkZEltYWdlVG9JZCIsIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzNSgpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXJ2aWNlSUQsIGltYWdlRmlsZSwgaW1hZ2VGaWxlRm9ybSwgYXBpLCBjb250ZW50LCBpdGVtcywgZmFpbF9jb3VudDsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMzUkKF9jb250ZXh0MzUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MzUucHJldiA9IF9jb250ZXh0MzUubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSUQgPSBhcmcuc2VydmljZUlELCBpbWFnZUZpbGUgPSBhcmcuaW1hZ2VGaWxlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZUZpbGVGb3JtID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlRmlsZUZvcm0uYXBwZW5kKGltYWdlRmlsZS5uYW1lLCBpbWFnZUZpbGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDM1Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXBpSG9zdC5mZXRjaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAic2VydmljZV92Mi9pdGVtLyIuY29uY2F0KHNlcnZpY2VJRCwgIi9hZGQvaW1hZ2VfZmlsZXMvIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogaW1hZ2VGaWxlRm9ybQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaSA9IF9jb250ZXh0MzUuc2VudDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXBpLmVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQzNS5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGFwaS5lcnJvcik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gYXBpLmNvbnRlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gY29udGVudC5pdGVtcywgZmFpbF9jb3VudCA9IGNvbnRlbnQuZmFpbF9jb3VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzUuYWJydXB0KCJyZXR1cm4iLCBuZXcgQ29sbGVjdGlvblVwZGF0ZXIoY29udGV4dCkub25JZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmlkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5vblVwZGF0ZShmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlbSRpbWFnZUZpbGVzOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9pdGVtJGltYWdlRmlsZXMgPSBpdGVtLmltYWdlRmlsZXMpLnB1c2guYXBwbHkoX2l0ZW0kaW1hZ2VGaWxlcywgX3RvQ29uc3VtYWJsZUFycmF5KGl0ZW1zLm1hcChmdW5jdGlvbiAoaW1hZ2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2VydmljZUltYWdlKCkuZnJvbURhdGEoaW1hZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmdldEl0ZW1CeUlkKHNlcnZpY2VJRCkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzNS5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMzUpOwogICAgICAgICAgICAgICAgICAgIH0pKSkpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM2LnN0b3AoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9jYWxsZWUzNik7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9LAogICAgICAgIHJlbW92ZUltYWdlRnJvbUlkOiBmdW5jdGlvbiByZW1vdmVJbWFnZUZyb21JZChjb250ZXh0KSB7CiAgICAgICAgICB2YXIgX2FyZ3VtZW50czE2ID0gYXJndW1lbnRzOwogICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTM4KCkgewogICAgICAgICAgICB2YXIgYXJnOwogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTM4JChfY29udGV4dDM4KSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzOC5wcmV2ID0gX2NvbnRleHQzOC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICBhcmcgPSBfYXJndW1lbnRzMTYubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzMTZbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmd1bWVudHMxNlsxXSA6IHsKICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VJRDogc2VydmljZUlELAogICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IGltYWdlCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzOC5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuc3RhdGUucHJvY2Vzc29yLmFjcXVpcmUoInJlbW92ZUltYWdlRnJvbUlkIiwgLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTM3KCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcnZpY2VJRCwgaW1hZ2UsIGFwaSwgZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTM3JChfY29udGV4dDM3KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDM3LnByZXYgPSBfY29udGV4dDM3Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZUlEID0gYXJnLnNlcnZpY2VJRCwgaW1hZ2UgPSBhcmcuaW1hZ2U7IC8vIGxldCBhcGkgPSBhd2FpdCBBcGlIb3N0LmltZ0ZpbGUucmVtb3ZlKGltYWdlLm5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoYXBpLmVycm9yKSB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxldCBhcGkgPSBhd2FpdCBBcGlIb3N0LmltZ0ZpbGUucmVtb3ZlKGltYWdlLm5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoYXBpLmVycm9yKSB0aHJvdyBuZXcgRXJyb3IoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpID0gQXBpSG9zdC5yZXF1ZXN0KCkuREVMRVRFKCkudXJsKCJzZXJ2aWNlX3YyL2l0ZW0vIi5jb25jYXQoc2VydmljZUlELCAiL2RlbGV0ZS9pbWFnZS8iKSkuYm9keSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaW1hZ2UudG9EYXRhKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuc2VuZCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGFwaS5lcnJvcjsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDM3Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM3LmFicnVwdCgicmV0dXJuIiwgbmV3IENvbGxlY3Rpb25VcGRhdGVyKGNvbnRleHQpLm9uSWQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkub25VcGRhdGUoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmltYWdlRmlsZXMgPSBpdGVtLmltYWdlRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChpbWFnZUZpbGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbWFnZUZpbGUubmFtZSAhPT0gaW1hZ2UubmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuZ2V0SXRlbUJ5SWQoc2VydmljZUlEKSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mzcuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTM3KTsKICAgICAgICAgICAgICAgICAgICB9KSkpKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzOC5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlMzgpOwogICAgICAgICAgfSkpKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBzdG9yZVNlcnZpY2U7CiAgfQp9Ow=="},{"version":3,"sources":["C:/dev/freshnet-v2/vue/src/stores/store.service.js"],"names":["DataLoader","CollectionUpdater","Processor","Service","ServiceCustomer","ServiceImage","Vuex","ServiceModule","ApiHost","init","Stores","storeService","Store","state","lastModified","dataLoader","timeout","processor","loadData","request","url","send","api","error","getError","content","getContent","Error","contents","Array","isArray","items","map","fromData","setData","data","commit","Date","now","getData","getters","mutations","time","isLoading","service","events","sort","event1","event2","compare","service1","service2","actions","refresh","context","acquire","doTimeout","dispatch","getItems","getItemOfId","id","find","getGroupsByCustomer","groups","reduce","item","group","customer","isEqual","push","importItem","arg","trim","POST","body","addItem","imageFiles","length","imgFile","upload","then","json","images","onId","getItem","removeItemOfId","DELETE","found","splice","indexOf","updateStateOfId","serviceID","PUT","onUpdate","getItemById","updateDescriptionOfId","description","updateBelongingsOfId","belongings","updateCustomerOfId","addEventToId","serviceParse","item1","item2","removeEventFromId","filter","event","timestamp","updateUrgentOfId","isUrgent","console","warn","setUrgent","updateWarrantyOfId","isWarranty","setWarranty","addLabelToId","label","removeLabelFromId","toData","setLabels","labels","addImageToId","imageFile","imageFileForm","FormData","append","name","fetch","method","fail_count","image","removeImageFromId"],"mappings":"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","sourcesContent":["import DataLoader from \"./tools/DataLoader\";\r\nimport CollectionUpdater from \"./tools/CollectionUpdater\";\r\nimport Processor from \"./tools/Processor.js\";\r\n\r\nimport Service from \"@/items/Service.js\";\r\nimport ServiceCustomer from \"@/items/ServiceCustomer\";\r\nimport ServiceImage from \"@/items/ServiceImage\";\r\n\r\nimport Vuex from \"vuex\";\r\nimport ServiceModule from \"@/../../express/data_structures/Service.js\";\r\nimport ApiHost from \"@/host/ApiHost.js\";\r\n\r\nexport default {\r\n\tinit(Stores) {\r\n\t\tconst storeService = new Vuex.Store({\r\n\t\t\tstate: {\r\n\t\t\t\tlastModified: 0,\r\n\t\t\t\tdataLoader: new DataLoader({ timeout: 1000 * 60 * 10 }) // 10min\r\n\t\t\t\t\t.processor(() => storeService.state.processor)\r\n\t\t\t\t\t.loadData(async () => {\r\n\t\t\t\t\t\tconst api = await ApiHost.request()\r\n\t\t\t\t\t\t\t.url(\"service_v2/get/items\")\r\n\t\t\t\t\t\t\t.send();\r\n\t\t\t\t\t\tconst error = api.getError();\r\n\t\t\t\t\t\tconst content = api.getContent();\r\n\t\t\t\t\t\tif (error) throw new Error(error);\r\n\t\t\t\t\t\tconst contents = Array.isArray(content) ? content : [];\r\n\t\t\t\t\t\tconst items = contents.map((content) => {\r\n\t\t\t\t\t\t\treturn new Service(Stores).fromData(content);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn items;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.setData((data) => {\r\n\t\t\t\t\t\tstoreService.commit(\"items\", Array.isArray(data) ? data : []);\r\n\t\t\t\t\t\tstoreService.commit(\"lastModified\", Date.now());\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.getData(() => storeService.getters.items),\r\n\t\t\t\titems: [],\r\n\t\t\t\tprocessor: new Processor(),\r\n\t\t\t},\r\n\t\t\tmutations: {\r\n\t\t\t\tlastModified: (state, time) => (state.lastModified = time),\r\n\t\t\t\titems: (state, items) => (state.items = items),\r\n\t\t\t},\r\n\t\t\tgetters: {\r\n\t\t\t\tlastModified: (state) => state.lastModified,\r\n\t\t\t\tisLoading: (state) => state.processor.isLoading(),\r\n\t\t\t\titems(state) {\r\n\t\t\t\t\treturn (Array.isArray(state.items) ? state.items : [])\r\n\t\t\t\t\t\t.map((service) => {\r\n\t\t\t\t\t\t\tif (Array.isArray(service.events))\r\n\t\t\t\t\t\t\t\tservice.events.sort((event1, event2) => event1.compare(event2));\r\n\t\t\t\t\t\t\treturn service;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.sort((service1, service2) => service1.compare(service2));\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tactions: {\r\n\t\t\t\tasync refresh(context) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\"refresh\", async () => {\r\n\t\t\t\t\t\tcontext.state.dataLoader.doTimeout();\r\n\t\t\t\t\t\tawait context.dispatch(\"getItems\");\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\r\n\t\t\t\tasync getItems(context) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\"getItems\", async () => {\r\n\t\t\t\t\t\treturn context.state.dataLoader.data();\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tasync getItemOfId(context, id = \"\") {\r\n\t\t\t\t\treturn context.state.processor.acquire(\"getItemOfId\", async () => {\r\n\t\t\t\t\t\tlet items = await context.dispatch(\"getServices\");\r\n\t\t\t\t\t\treturn items.find((service) => service.id === id);\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\r\n\t\t\t\tasync getGroupsByCustomer(context) {\r\n\t\t\t\t\tconst items = await context.dispatch(\"getItems\");\r\n\t\t\t\t\tconst groups = items.reduce((groups, item) => {\r\n\t\t\t\t\t\tlet group = groups.find((group) => {\r\n\t\t\t\t\t\t\treturn group.customer.isEqual(item.customer);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tif (!group) {\r\n\t\t\t\t\t\t\tgroup = { customer: item.customer, items: [] };\r\n\t\t\t\t\t\t\tgroups.push(group);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tgroup.items.push(item);\r\n\t\t\t\t\t\treturn groups;\r\n\t\t\t\t\t}, []);\r\n\r\n\t\t\t\t\treturn groups;\r\n\t\t\t\t},\r\n\r\n\t\t\t\tasync importItem(context, arg = { data }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\"importItem\", async () => {\r\n\t\t\t\t\t\tlet { data } = arg;\r\n\t\t\t\t\t\tif (!data) throw new Error();\r\n\t\t\t\t\t\tlet service = ServiceModule.trim(data);\r\n\t\t\t\t\t\tlet api = await ApiHost.request()\r\n\t\t\t\t\t\t\t.POST()\r\n\t\t\t\t\t\t\t.url(\"service_v2/import/item/\")\r\n\t\t\t\t\t\t\t.body({ content: service })\r\n\t\t\t\t\t\t\t.send();\r\n\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\tlet content = api.getContent();\r\n\t\t\t\t\t\tif (error) throw new Error();\r\n\t\t\t\t\t\tservice = new Service(Stores).fromData(content);\r\n\t\t\t\t\t\tlet items = context.getters.items;\r\n\t\t\t\t\t\titems.push(service);\r\n\t\t\t\t\t\tcontext.commit(\"items\", items);\r\n\t\t\t\t\t\tcontext.commit(\"lastModified\", Date.now());\r\n\t\t\t\t\t\treturn service;\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\r\n\t\t\t\tasync addItem(context, arg = { data }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\"addItem\", async () => {\r\n\t\t\t\t\t\tlet { data } = arg;\r\n\t\t\t\t\t\tif (!data) return null;\r\n\t\t\t\t\t\tif (!data) throw new Error(\"invalid data\");\r\n\t\t\t\t\t\tlet images =\r\n\t\t\t\t\t\t\t!Array.isArray(data.imageFiles) || data.imageFiles.length <= 0\r\n\t\t\t\t\t\t\t\t? []\r\n\t\t\t\t\t\t\t\t: await ApiHost.imgFile\r\n\t\t\t\t\t\t\t\t\t\t.upload(data.imageFiles)\r\n\t\t\t\t\t\t\t\t\t\t.then((json) => json.content);\r\n\t\t\t\t\t\tdata.imageFiles = images;\r\n\t\t\t\t\t\tlet api = await ApiHost.request()\r\n\t\t\t\t\t\t\t.POST()\r\n\t\t\t\t\t\t\t.url(\"service_v2/add/item/\")\r\n\t\t\t\t\t\t\t.body({ content: data })\r\n\t\t\t\t\t\t\t.send();\r\n\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\tlet content = api.getContent();\r\n\t\t\t\t\t\tif (error) throw new Error();\r\n\t\t\t\t\t\tlet service = new Service(Stores).fromData(content);\r\n\r\n\t\t\t\t\t\treturn new CollectionUpdater(context)\r\n\t\t\t\t\t\t\t.onId((item) => item.id)\r\n\t\t\t\t\t\t\t.getItem(service);\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tasync removeItemOfId(context, arg = { id }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\"removeItemOfId\", async () => {\r\n\t\t\t\t\t\tlet { id } = arg;\r\n\t\t\t\t\t\tlet api = await ApiHost.request()\r\n\t\t\t\t\t\t\t.DELETE()\r\n\t\t\t\t\t\t\t.url(`service_v2/delete/item/${id}`)\r\n\t\t\t\t\t\t\t.send();\r\n\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\tif (error) throw new Error();\r\n\t\t\t\t\t\tlet found = context.state.items.find(\r\n\t\t\t\t\t\t\t(service) => service.id === id,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tif (!found) throw new Error();\r\n\t\t\t\t\t\tlet items = context.state.items;\r\n\t\t\t\t\t\titems.splice(items.indexOf(found), 1);\r\n\t\t\t\t\t\tcontext.commit(\"items\", items);\r\n\t\t\t\t\t\tcontext.commit(\"lastModified\", Date.now());\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tasync updateStateOfId(context, arg = { serviceID, state }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\r\n\t\t\t\t\t\t\"updateStateOfId\",\r\n\t\t\t\t\t\tasync () => {\r\n\t\t\t\t\t\t\tlet { serviceID, state } = arg;\r\n\t\t\t\t\t\t\tlet api = await ApiHost.request()\r\n\t\t\t\t\t\t\t\t.PUT()\r\n\t\t\t\t\t\t\t\t.url(`service_v2/item/${serviceID}/update/state/`)\r\n\t\t\t\t\t\t\t\t.body({ content: state })\r\n\t\t\t\t\t\t\t\t.send();\r\n\t\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\t\tif (error) throw new Error();\r\n\r\n\t\t\t\t\t\t\treturn new CollectionUpdater(context)\r\n\t\t\t\t\t\t\t\t.onId((item) => item.id)\r\n\t\t\t\t\t\t\t\t.onUpdate((item) => (item.state = state))\r\n\t\t\t\t\t\t\t\t.getItemById(serviceID);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\tasync updateDescriptionOfId(context, arg = { serviceID, description }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\r\n\t\t\t\t\t\t\"updateDescriptionOfId\",\r\n\t\t\t\t\t\tasync () => {\r\n\t\t\t\t\t\t\tlet { serviceID, description } = arg;\r\n\t\t\t\t\t\t\tlet api = await ApiHost.request()\r\n\t\t\t\t\t\t\t\t.PUT()\r\n\t\t\t\t\t\t\t\t.url(`service_v2/item/${serviceID}/update/description/`)\r\n\t\t\t\t\t\t\t\t.body({ content: description })\r\n\t\t\t\t\t\t\t\t.send();\r\n\t\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\t\tif (error) throw new Error();\r\n\r\n\t\t\t\t\t\t\treturn new CollectionUpdater(context)\r\n\t\t\t\t\t\t\t\t.onId((item) => item.id)\r\n\t\t\t\t\t\t\t\t.onUpdate((item) => (item.description = description))\r\n\t\t\t\t\t\t\t\t.getItemById(serviceID);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\tasync updateBelongingsOfId(context, arg = { serviceID, belongings }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\r\n\t\t\t\t\t\t\"updateBelongingsOfId\",\r\n\t\t\t\t\t\tasync () => {\r\n\t\t\t\t\t\t\tlet { serviceID, belongings } = arg;\r\n\t\t\t\t\t\t\tlet api = await ApiHost.request()\r\n\t\t\t\t\t\t\t\t.PUT()\r\n\t\t\t\t\t\t\t\t.url(`service_v2/item/${serviceID}/update/belonging/`)\r\n\t\t\t\t\t\t\t\t.body({ content: belongings })\r\n\t\t\t\t\t\t\t\t.send();\r\n\t\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\t\tlet content = api.getContent();\r\n\t\t\t\t\t\t\tif (error) throw new Error();\r\n\r\n\t\t\t\t\t\t\treturn new CollectionUpdater(context)\r\n\t\t\t\t\t\t\t\t.onId((item) => item.id)\r\n\t\t\t\t\t\t\t\t.onUpdate((item) => (item.belongings = content.belongings))\r\n\t\t\t\t\t\t\t\t.getItemById(serviceID);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\tasync updateCustomerOfId(context, arg = { serviceID, customer }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\r\n\t\t\t\t\t\t\"updateCustomerOfId\",\r\n\t\t\t\t\t\tasync () => {\r\n\t\t\t\t\t\t\tlet { serviceID, customer } = arg;\r\n\t\t\t\t\t\t\tlet api = await ApiHost.request()\r\n\t\t\t\t\t\t\t\t.PUT()\r\n\t\t\t\t\t\t\t\t.url(`service_v2/item/${serviceID}/update/customer/`)\r\n\t\t\t\t\t\t\t\t.body({ content: customer })\r\n\t\t\t\t\t\t\t\t.send();\r\n\t\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\t\tlet content = api.getContent();\r\n\t\t\t\t\t\t\tif (error) throw new Error();\r\n\r\n\t\t\t\t\t\t\treturn new CollectionUpdater(context)\r\n\t\t\t\t\t\t\t\t.onId((item) => item.id)\r\n\t\t\t\t\t\t\t\t.onUpdate((item) => {\r\n\t\t\t\t\t\t\t\t\treturn (item.customer = new ServiceCustomer(Stores).fromData(\r\n\t\t\t\t\t\t\t\t\t\tcontent.customer,\r\n\t\t\t\t\t\t\t\t\t));\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.getItemById(serviceID);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\r\n\t\t\t\tasync addEventToId(context, arg = { serviceID, data }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\"addEventToId\", async () => {\r\n\t\t\t\t\t\tlet { serviceID, data } = arg;\r\n\t\t\t\t\t\tif (!serviceID || !data) return null;\r\n\t\t\t\t\t\tlet api = await ApiHost.request()\r\n\t\t\t\t\t\t\t.POST()\r\n\t\t\t\t\t\t\t.url(`service_v2/item/${serviceID}/add/event/`)\r\n\t\t\t\t\t\t\t.body({ content: data })\r\n\t\t\t\t\t\t\t.send();\r\n\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\tlet content = api.getContent();\r\n\t\t\t\t\t\tif (error) throw new Error();\r\n\r\n\t\t\t\t\t\tlet serviceParse = new Service(Stores).fromData(content);\r\n\r\n\t\t\t\t\t\treturn new CollectionUpdater(context)\r\n\t\t\t\t\t\t\t.onId((item) => item.id)\r\n\t\t\t\t\t\t\t.onUpdate((item1, item2) => {\r\n\t\t\t\t\t\t\t\titem1.events = item2.events.sort((event1, event2) =>\r\n\t\t\t\t\t\t\t\t\tevent1.compare(event2),\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.getItem(serviceParse);\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tasync removeEventFromId(context, arg = { serviceID, time }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\r\n\t\t\t\t\t\t\"removeEventFromId\",\r\n\t\t\t\t\t\tasync () => {\r\n\t\t\t\t\t\t\tlet { serviceID, time } = arg;\r\n\t\t\t\t\t\t\tlet api = await ApiHost.request()\r\n\t\t\t\t\t\t\t\t.DELETE()\r\n\t\t\t\t\t\t\t\t.url(`service_v2/item/${serviceID}/delete/event/`)\r\n\t\t\t\t\t\t\t\t.body({ serviceID, time })\r\n\t\t\t\t\t\t\t\t.send();\r\n\t\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\t\tif (error) throw new Error();\r\n\r\n\t\t\t\t\t\t\treturn new CollectionUpdater(context)\r\n\t\t\t\t\t\t\t\t.onId((item) => item.id)\r\n\t\t\t\t\t\t\t\t.onUpdate((item) => {\r\n\t\t\t\t\t\t\t\t\titem.events = item.events.filter((event) => {\r\n\t\t\t\t\t\t\t\t\t\treturn event.timestamp.time !== time;\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.getItemById(serviceID);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\r\n\t\t\t\tasync updateUrgentOfId(context, arg = { serviceID, isUrgent }) {\r\n\t\t\t\t\tconsole.warn(\r\n\t\t\t\t\t\t\"updateUrgentOfId is deprecated, please use addLabelToId\",\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn context.state.processor.acquire(\r\n\t\t\t\t\t\t\"updateUrgentOfId\",\r\n\t\t\t\t\t\tasync () => {\r\n\t\t\t\t\t\t\tlet { serviceID, isUrgent } = arg;\r\n\t\t\t\t\t\t\tconst api = await ApiHost.request()\r\n\t\t\t\t\t\t\t\t.PUT()\r\n\t\t\t\t\t\t\t\t.url(\"service/urgent\")\r\n\t\t\t\t\t\t\t\t.body({ serviceID, isUrgent })\r\n\t\t\t\t\t\t\t\t.send();\r\n\r\n\t\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\t\tif (error) throw new Error();\r\n\t\t\t\t\t\t\tconst content = api.getContent();\r\n\r\n\t\t\t\t\t\t\tlet service = new Service(Stores).fromData(content);\r\n\t\t\t\t\t\t\treturn new CollectionUpdater(context)\r\n\t\t\t\t\t\t\t\t.onId((item) => item.id)\r\n\t\t\t\t\t\t\t\t.onUpdate((item) => item.setUrgent(service.isUrgent()))\r\n\t\t\t\t\t\t\t\t.getItemById(service.id);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\tasync updateWarrantyOfId(context, arg = { serviceID, isWarranty }) {\r\n\t\t\t\t\tconsole.warn(\r\n\t\t\t\t\t\t\"updateWarrantyOfId is deprecated, please use addLabelToId\",\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn context.state.processor.acquire(\r\n\t\t\t\t\t\t\"updateWarrantyOfId\",\r\n\t\t\t\t\t\tasync () => {\r\n\t\t\t\t\t\t\tlet { serviceID, isWarranty } = arg;\r\n\t\t\t\t\t\t\tconst api = await ApiHost.request()\r\n\t\t\t\t\t\t\t\t.PUT()\r\n\t\t\t\t\t\t\t\t.url(\"service/warranty\")\r\n\t\t\t\t\t\t\t\t.body({ serviceID, isWarranty })\r\n\t\t\t\t\t\t\t\t.send();\r\n\r\n\t\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\t\tif (error) throw new Error();\r\n\t\t\t\t\t\t\tconst content = api.getContent();\r\n\r\n\t\t\t\t\t\t\tlet service = new Service(Stores).fromData(content);\r\n\t\t\t\t\t\t\treturn new CollectionUpdater(context)\r\n\t\t\t\t\t\t\t\t.onId((item) => item.id)\r\n\t\t\t\t\t\t\t\t.onUpdate((item) => item.setWarranty(service.isWarranty()))\r\n\t\t\t\t\t\t\t\t.getItemById(service.id);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\r\n\t\t\t\tasync addLabelToId(context, arg = { serviceID, label }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\"addLabelToId\", async () => {\r\n\t\t\t\t\t\tlet { serviceID, label } = arg;\r\n\t\t\t\t\t\tconst api = await ApiHost.request()\r\n\t\t\t\t\t\t\t.POST()\r\n\t\t\t\t\t\t\t.url(`service_v2/item/${serviceID}/add/label/`)\r\n\t\t\t\t\t\t\t.body({ label })\r\n\t\t\t\t\t\t\t.send();\r\n\r\n\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\tif (error) throw new Error(error);\r\n\t\t\t\t\t\tconst content = api.getContent();\r\n\t\t\t\t\t\tconsole.warn(content);\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tasync removeLabelFromId(context, arg = { serviceID, label }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\r\n\t\t\t\t\t\t\"removeLabelFromId\",\r\n\t\t\t\t\t\tasync () => {\r\n\t\t\t\t\t\t\tlet { serviceID, label } = arg;\r\n\t\t\t\t\t\t\tconst api = await ApiHost.request()\r\n\t\t\t\t\t\t\t\t.DELETE()\r\n\t\t\t\t\t\t\t\t.url(`service_v2/item/${serviceID}/delete/label/`)\r\n\t\t\t\t\t\t\t\t.body({ label: label.toData() })\r\n\t\t\t\t\t\t\t\t.send();\r\n\r\n\t\t\t\t\t\t\tlet error = api.getError();\r\n\t\t\t\t\t\t\tif (error) throw new Error(error);\r\n\t\t\t\t\t\t\tconst content = api.getContent();\r\n\r\n\t\t\t\t\t\t\tlet service = new Service(Stores).fromData(content);\r\n\t\t\t\t\t\t\tlet items = context.state.items;\r\n\t\t\t\t\t\t\tlet item = items.find((item) => {\r\n\t\t\t\t\t\t\t\treturn item.id === service.id;\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tif (!item) {\r\n\t\t\t\t\t\t\t\titems.push(service);\r\n\t\t\t\t\t\t\t\titem = service;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\titem.setLabels(service.labels);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcontext.commit(\"items\", items);\r\n\t\t\t\t\t\t\tcontext.commit(\"lastModified\", Date.now());\r\n\r\n\t\t\t\t\t\t\treturn item;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\r\n\t\t\t\tasync addImageToId(context, arg = { serviceID, imageFile }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\"addImageToId\", async () => {\r\n\t\t\t\t\t\tconst { serviceID, imageFile } = arg;\r\n\t\t\t\t\t\tconst imageFileForm = new FormData();\r\n\t\t\t\t\t\timageFileForm.append(imageFile.name, imageFile);\r\n\t\t\t\t\t\tconst api = await ApiHost.fetch({\r\n\t\t\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\t\t\turl: `service_v2/item/${serviceID}/add/image_files/`,\r\n\t\t\t\t\t\t\tbody: imageFileForm,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (api.error) throw new Error(api.error);\r\n\t\t\t\t\t\tconst { content } = api;\r\n\t\t\t\t\t\tconst { items, fail_count } = content;\r\n\r\n\t\t\t\t\t\treturn new CollectionUpdater(context)\r\n\t\t\t\t\t\t\t.onId((item) => item.id)\r\n\t\t\t\t\t\t\t.onUpdate((item) =>\r\n\t\t\t\t\t\t\t\titem.imageFiles.push(\r\n\t\t\t\t\t\t\t\t\t...items.map((image) => new ServiceImage().fromData(image)),\r\n\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t.getItemById(serviceID);\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tasync removeImageFromId(context, arg = { serviceID, image }) {\r\n\t\t\t\t\treturn context.state.processor.acquire(\r\n\t\t\t\t\t\t\"removeImageFromId\",\r\n\t\t\t\t\t\tasync () => {\r\n\t\t\t\t\t\t\tlet { serviceID, image } = arg;\r\n\t\t\t\t\t\t\t// let api = await ApiHost.imgFile.remove(image.name);\r\n\t\t\t\t\t\t\t// if (api.error) throw new Error();\r\n\t\t\t\t\t\t\tlet api = ApiHost.request()\r\n\t\t\t\t\t\t\t\t.DELETE()\r\n\t\t\t\t\t\t\t\t.url(`service_v2/item/${serviceID}/delete/image/`)\r\n\t\t\t\t\t\t\t\t.body({ content: image.toData() })\r\n\t\t\t\t\t\t\t\t.send();\r\n\t\t\t\t\t\t\tlet error = api.error;\r\n\t\t\t\t\t\t\tif (error) throw new Error();\r\n\r\n\t\t\t\t\t\t\treturn new CollectionUpdater(context)\r\n\t\t\t\t\t\t\t\t.onId((item) => item.id)\r\n\t\t\t\t\t\t\t\t.onUpdate((item) => {\r\n\t\t\t\t\t\t\t\t\titem.imageFiles = item.imageFiles.filter(\r\n\t\t\t\t\t\t\t\t\t\t(imageFile) => imageFile.name !== image.name,\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.getItemById(serviceID);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\treturn storeService;\r\n\t},\r\n};\r\n"]}]}