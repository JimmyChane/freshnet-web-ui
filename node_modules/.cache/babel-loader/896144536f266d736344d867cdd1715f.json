{"remainingRequest":"C:\\dev\\freshnet-v2\\vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\dev\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\dev\\freshnet-v2\\vue\\src\\stores\\store.category.js","dependencies":[{"path":"C:\\dev\\freshnet-v2\\vue\\src\\stores\\store.category.js","mtime":1666954339570},{"path":"C:\\dev\\freshnet-v2\\vue\\babel.config.js","mtime":1662650914175},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662650916242},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1662650934417},{"path":"C:\\dev\\freshnet-v2\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662650915901}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6XFxkZXZcXGZyZXNobmV0LXYyXFx2dWVcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lXFxoZWxwZXJzXFxlc21cXGFzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IFZ1ZXggZnJvbSAidnVleCI7CmltcG9ydCBBcGlIb3N0IGZyb20gIkAvaG9zdC9BcGlIb3N0LmpzIjsKaW1wb3J0IENhdGVnb3J5IGZyb20gIkAvaXRlbXMvQ2F0ZWdvcnkuanMiOwppbXBvcnQgRGF0YUxvYWRlciBmcm9tICIuL3Rvb2xzL0RhdGFMb2FkZXIiOwppbXBvcnQgUHJvY2Vzc29yIGZyb20gIi4vdG9vbHMvUHJvY2Vzc29yLmpzIjsKaW1wb3J0IFUgZnJvbSAiQC9VIjsKZXhwb3J0IGRlZmF1bHQgewogIGluaXQ6IGZ1bmN0aW9uIGluaXQoU3RvcmVzKSB7CiAgICB2YXIgc3RvcmUgPSBuZXcgVnVleC5TdG9yZSh7CiAgICAgIHN0YXRlOiB7CiAgICAgICAgbGFzdE1vZGlmaWVkOiAwLAogICAgICAgIGRhdGFMb2FkZXI6IG5ldyBEYXRhTG9hZGVyKHsKICAgICAgICAgIHRpbWVvdXQ6IDEwMDAgKiA2MCAqIDEwCiAgICAgICAgfSkgLy8gMTBtaW4KICAgICAgICAucHJvY2Vzc29yKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBzdG9yZS5zdGF0ZS5wcm9jZXNzb3I7CiAgICAgICAgfSkubG9hZERhdGEoIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgICB2YXIgYXBpLCBlcnJvciwgY29udGVudCwgaXRlbXM7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICByZXR1cm4gQXBpSG9zdC5yZXF1ZXN0KCkudXJsKCJwcm9kdWN0djIvY2F0ZWdvcnkvbGlzdC8iKS5zZW5kKCk7CgogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBhcGkgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICBlcnJvciA9IGFwaS5nZXRFcnJvcigpOwogICAgICAgICAgICAgICAgICBjb250ZW50ID0gYXBpLmdldENvbnRlbnQoKTsKCiAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTsKCiAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgIGl0ZW1zID0gVS5vcHRBcnJheShjb250ZW50KS5tYXAoZnVuY3Rpb24gKGNvbnRlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENhdGVnb3J5KFN0b3JlcykuZnJvbURhdGEoY29udGVudCk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBpdGVtcyk7CgogICAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIF9jYWxsZWUpOwogICAgICAgIH0pKSkuc2V0RGF0YShmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgc3RvcmUuY29tbWl0KCJpdGVtcyIsIFUub3B0QXJyYXkoZGF0YSkpOwogICAgICAgICAgc3RvcmUuY29tbWl0KCJsYXN0TW9kaWZpZWQiLCBEYXRlLm5vdygpKTsKICAgICAgICB9KS5nZXREYXRhKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBzdG9yZS5nZXR0ZXJzLml0ZW1zOwogICAgICAgIH0pLAogICAgICAgIGl0ZW1zOiBbXSwKICAgICAgICBwcm9jZXNzb3I6IG5ldyBQcm9jZXNzb3IoKQogICAgICB9LAogICAgICBtdXRhdGlvbnM6IHsKICAgICAgICBsYXN0TW9kaWZpZWQ6IGZ1bmN0aW9uIGxhc3RNb2RpZmllZChzdGF0ZSwgdGltZSkgewogICAgICAgICAgcmV0dXJuIHN0YXRlLmxhc3RNb2RpZmllZCA9IHRpbWU7CiAgICAgICAgfSwKICAgICAgICBpdGVtczogZnVuY3Rpb24gaXRlbXMoc3RhdGUsIF9pdGVtcykgewogICAgICAgICAgcmV0dXJuIHN0YXRlLml0ZW1zID0gX2l0ZW1zOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZ2V0dGVyczogewogICAgICAgIGxhc3RNb2RpZmllZDogZnVuY3Rpb24gbGFzdE1vZGlmaWVkKHN0YXRlKSB7CiAgICAgICAgICByZXR1cm4gc3RhdGUubGFzdE1vZGlmaWVkOwogICAgICAgIH0sCiAgICAgICAgaXNMb2FkaW5nOiBmdW5jdGlvbiBpc0xvYWRpbmcoc3RhdGUpIHsKICAgICAgICAgIHJldHVybiBzdGF0ZS5wcm9jZXNzb3IuaXNMb2FkaW5nKCk7CiAgICAgICAgfSwKICAgICAgICBpdGVtczogZnVuY3Rpb24gaXRlbXMoc3RhdGUpIHsKICAgICAgICAgIHJldHVybiBzdGF0ZS5pdGVtczsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGFjdGlvbnM6IHsKICAgICAgICByZWZyZXNoOiBmdW5jdGlvbiByZWZyZXNoKGNvbnRleHQpIHsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LnN0YXRlLnByb2Nlc3Nvci5hY3F1aXJlKCJyZWZyZXNoIiwgLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0YXRlLmRhdGFMb2FkZXIuZG9UaW1lb3V0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZGlzcGF0Y2goImdldEl0ZW1zIik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgICAgICAgICAgICAgICAgfSkpKSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9LAogICAgICAgIGdldEl0ZW1zOiBmdW5jdGlvbiBnZXRJdGVtcyhjb250ZXh0KSB7CiAgICAgICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgY29udGV4dC5zdGF0ZS5wcm9jZXNzb3IuYWNxdWlyZSgiZ2V0SXRlbXMiLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LnN0YXRlLmRhdGFMb2FkZXIuZGF0YSgpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgICAgICAgICAgICAgICB9KSkpKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9jYWxsZWU1KTsKICAgICAgICAgIH0pKSgpOwogICAgICAgIH0sCiAgICAgICAgZ2V0SXRlbU9mSWQ6IGZ1bmN0aW9uIGdldEl0ZW1PZklkKGNvbnRleHQpIHsKICAgICAgICAgIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzOwogICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7CiAgICAgICAgICAgIHZhciBpZDsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICBpZCA9IF9hcmd1bWVudHMubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzWzFdIDogIiI7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuc3RhdGUucHJvY2Vzc29yLmFjcXVpcmUoImdldEl0ZW1PZklkIiwgLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbXM7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmRpc3BhdGNoKCJnZXRJdGVtcyIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIGl0ZW1zLmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZCA9PT0gaWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWU2KTsKICAgICAgICAgICAgICAgICAgICB9KSkpKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9jYWxsZWU3KTsKICAgICAgICAgIH0pKSgpOwogICAgICAgIH0sCiAgICAgICAgZ2V0SXRlbU9mS2V5OiBmdW5jdGlvbiBnZXRJdGVtT2ZLZXkoY29udGV4dCkgewogICAgICAgICAgdmFyIF9hcmd1bWVudHMyID0gYXJndW1lbnRzOwogICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoKSB7CiAgICAgICAgICAgIHZhciBrZXk7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ5LnByZXYgPSBfY29udGV4dDkubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAga2V5ID0gX2FyZ3VtZW50czIubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzMlsxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50czJbMV0gOiAiIjsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdCgicmV0dXJuIiwgY29udGV4dC5zdGF0ZS5wcm9jZXNzb3IuYWNxdWlyZSgiZ2V0SXRlbU9mS2V5IiwgLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbXM7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTgkKF9jb250ZXh0OCkgewogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmRpc3BhdGNoKCJnZXRJdGVtcyIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSBfY29udGV4dDguc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIsIGl0ZW1zLmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5rZXkgPT09IGtleTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTgpOwogICAgICAgICAgICAgICAgICAgIH0pKSkpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTkpOwogICAgICAgICAgfSkpKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBzdG9yZTsKICB9Cn07"},null]}